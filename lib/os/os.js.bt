// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package os

#JS.'var os = require("os")
var fs = require("fs")
var js_path = require("path")
var child_process = require("child_process")
'

pub const ARGS := from_js_string_arr(#JS.'process.argv')

pub fun ls(dir string) []string {
	return from_js_string_arr(#JS.'fs.readdirSync(dir.str)')
}

pub fun walk_ext(dir string, ext string) []string {
	mut ext_files := []string
	all_files := ls(dir)
	for file in all_files {
		fpath := join_path(dir, [file])
		if is_dir(fpath) {
			ext_files = ext_files.concat(walk_ext(fpath, ext))
		} else if fpath.ends_with(ext) {
			ext_files.push(fpath)
		}
	}
	return ext_files
}

pub fun cp(src string, dest string) {
	#JS.'fs.copyFileSync(src.str, dest.str)'
}

pub fun exists(path string) bool {
	return #JS.'fs.existsSync(path.str)' as bool
}

pub fun file_name(path string) string {
	return from_js_string(#JS.'js_path.basename(path.str)')
}

pub fun file_mod_time(path string) i64 {
	return #JS.'fs.lstatSync(path.str).mtimeMs' as i64
}

pub fun symlink(src string, dest string) {
	#JS.'fs.symlinkSync(src.str, dest.str)'
}

pub fun chdir(dir string) {
	#JS.'process.chdir(dir.str)'
}

pub fun home_dir() string {
	return from_js_string(#JS.'os.homedir()')
}

pub fun dir(path string) string {
	return from_js_string(#JS.'js_path.dirname(path.str)')
}

pub fun is_dir(path string) bool {
	return #JS.'fs.lstatSync(path.str).isDirectory()' as bool
}

pub fun mkdir(dir string) {
	#JS.'fs.mkdirSync(dir.str)'
}

pub fun mkdir_all(dir string) {
	#JS.'fs.mkdirSync(dir.str, { recursive: true })'
}

pub fun rm(path string) {
	#JS.'fs.rmSync(path.str)'
}

pub fun rmdir(dir string) {
	#JS.'fs.rmdirSync(dir.str)'
}

pub fun rmdir_all(dir string) {
	#JS.'fs.rmdirSync(dir.str, { recursive: true })'
}

pub fun read_file(path string) string {
	return from_js_string(#JS.'fs.readFileSync(path.str).toString()')
}

pub fun read_lines(path string) []string {
	text := read_file(path)
	return text.split_lines()
}

pub fun write_file(path string, text string) {
	#JS.'fs.writeFileSync(path.str, text.str)'
}

pub fun getwd() string {
	return from_js_string(#JS.'process.cwd()')
}

pub fun join_path(base string, dirs []string) string {
	js_dirs := dirs.to_js_arr()
	return from_js_string(#JS.'js_path.join(base.str, ...js_dirs)')
}

pub fun executable() string {
	return from_js_string(#JS.'__filename')
}

pub fun abs_path(path string) string {
	return from_js_string(#JS.'js_path.resolve(getwd().str, path.str)')
}

pub fun resource_abs_path(path string) string {
	return join_path(from_js_string(#JS.'__dirname'), [path])
}

pub fun getenv(key string) string {
	if #JS.'process.env[key.str]' {
		return from_js_string(#JS.'process.env[key.str]')
	}
	return ''
}

pub fun setenv(key string, value string) {
	#JS.'process.env[key.str] = value.str'
}

pub fun arch() string {
	return from_js_string(#JS.'os.arch()')
}

struct Result {
	code i32
	stdout string
	stderr string
}

pub fun exec(cmd string) Result {
	mut res := Result{}
	#JS.'const commands = cmd.str.split(" ")
	const out = child_process.spawnSync(commands[0], commands.slice(1))
	res.code = out.status
	res.stdout = from_js_string(out.stdout.toString())
	res.stderr = from_js_string(out.stderr.toString())'
	return res
}

pub fun system(cmd string) i32 {
	#JS.'try {
		child_process.execSync(cmd.str, { stdio: "inherit" })
	} catch (e) {
		return e.status
	}'
	return 0
}
