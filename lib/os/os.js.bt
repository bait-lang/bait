// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package os

pub const ARGS := from_js_string_arr(#JS.process.argv)

pub const PATH_SEP := from_js_string(#JS.path.sep)

pub fun user_args() []string {
	return ARGS.slice(2, ARGS.length)
}

pub fun ls(dir string) []string {
	return from_js_string_arr(#JS.fs.readdirSync(dir.str))
}

pub fun walk_ext(dir string, ext string) []string {
	mut ext_files := []string
	all_files := ls(dir)
	for file in all_files {
		fpath := join_path(dir, [file])
		if is_dir(fpath) {
			ext_files.push_many(walk_ext(fpath, ext))
		} else if fpath.ends_with(ext) {
			ext_files.push(fpath)
		}
	}
	return ext_files
}

pub fun cp(src string, dest string) {
	#JS.'JS.fs.cpSync(src.str, dest.str, { recursive: true })'
}

pub fun exists(path string) bool {
	return #JS.fs.existsSync(path.str) as bool
}

pub fun file_name(path string) string {
	return from_js_string(#JS.path.basename(path.str))
}

pub fun file_mod_time(path string) i64 {
	return #JS.'JS.fs.lstatSync(path.str).mtimeMs' as i64
}

pub fun symlink(src string, dest string) {
	#JS.fs.symlinkSync(src.str, dest.str)
}

pub fun chdir(dir string) {
	#JS.process.chdir(dir.str)
}

pub fun home_dir() string {
	return from_js_string(#JS.os.homedir())
}

pub fun tmp_dir() string {
	return from_js_string(#JS.os.tmpdir())
}

pub fun dir(path string) string {
	mut other_sep := '\\'
	if PATH_SEP != '/' {
		other_sep = '/'
	}
	p := path.replace(other_sep, PATH_SEP)

	pos := p.last_index(PATH_SEP)
	if pos == -1 {
		return '.'
	}

	if pos == 0 and PATH_SEP == '/' {
		return '/'
	}

	return path.substr(0, pos)
}

// Returns whether a given path exists and is a directory.
pub fun exists_dir(path string) bool {
	return exists(path) and is_dir(path)
}

// Returns whether a given path is a directory.
// CAUTION: Crashes if path does not exist (safe alternative: `exists_dir`).
pub fun is_dir(path string) bool {
	return #JS.'JS.fs.lstatSync(path.str).isDirectory()' as bool
}

pub fun mkdir(dir string) {
	if exists(dir) {
		return
	}
	#JS.fs.mkdirSync(dir.str)
}

pub fun mkdir_all(dir string) {
	if exists(dir) {
		return
	}
	#JS.'JS.fs.mkdirSync(dir.str, { recursive: true })'
}

pub fun rm(path string) {
	#JS.fs.rmSync(path.str)
}

pub fun rmdir(dir string) {
	#JS.fs.rmdirSync(dir.str)
}

pub fun rmdir_all(dir string) {
	#JS.'JS.fs.rmdirSync(dir.str, { recursive: true })'
}

pub fun read_file(path string) string {
	return from_js_string(#JS.'JS.fs.readFileSync(path.str).toString()' as #JS.String)
}

pub fun read_lines(path string) []string {
	text := read_file(path).replace('\r\n', '\n')
	return text.split_lines()
}

pub fun write_file(path string, text string) {
	#JS.fs.writeFileSync(path.str, text.str)
}

pub fun getwd() string {
	return from_js_string(#JS.process.cwd())
}

pub fun join_path(base string, dirs []string) string {
	js_dirs := dirs.to_js_arr()
	return from_js_string(#JS.'JS.path.join(base.str, ...js_dirs)' as #JS.String)
}

pub fun executable() string {
	// TODO JS __filename constant
	return from_js_string(#JS.'__filename' as #JS.String)
}

pub fun abs_path(path string) string {
	wd := getwd()
	return from_js_string(#JS.path.resolve(wd.str, path.str))
}

pub fun resource_abs_path(path string) string {
	// TODO JS __dirname constant
	return join_path(from_js_string(#JS.'__dirname' as #JS.String), [path])
}

pub fun getenv(key string) string {
	if #JS.'JS.process.env[key.str]' as bool {
		return from_js_string(#JS.'JS.process.env[key.str]' as #JS.String)
	}
	return ''
}

pub fun setenv(key string, value string) {
	#JS.'JS.process.env[key.str] = value.str'
}

pub fun user_os() string {
	return from_js_string(#JS.'JS.process.platform' as #JS.String)
}

pub fun arch() string {
	return from_js_string(#JS.os.arch())
}

pub fun platform() string {
	return from_js_string(#JS.process.platform)
}

pub fun input(prompt string) string {
	#JS.'const fd = JS.fs.openSync("/dev/stdin", "rs")
	JS.process.stdout.write(prompt.str)
	const buf = Buffer.alloc(1024)
	const bytesRead = JS.fs.readSync(fd, buf, 0, buf.length)
	const input = buf.slice(0, bytesRead).toString()'
	return from_js_string(#JS.'input' as #JS.String)
}

pub struct Result {
pub:
	code i32
	stdout string
	stderr string
}

pub fun exec(cmd string) Result {
	mut res := Result{}
	#JS.'const out = JS.child_process.spawnSync(cmd.str, { shell: true })
	res.code = out.status
	res.stdout = from_js_string(out.stdout.toString())
	res.stderr = from_js_string(out.stderr.toString())'
	return res
}

pub fun system(cmd string) i32 {
	#JS.'try {
		JS.child_process.execSync(cmd.str, { stdio: "inherit" })
	} catch (e) {
		return e.status
	}'
	return 0
}
