// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package os

import strings

pub const ARGS := init_os_args(#C.'argc', #C.'argv' as &&u8)

fun init_os_args(argc i32, argv &&u8) []string {
	mut a := []string{length = argc}
	for i := 0; i < argc; i += 1 {
		a[i] = from_c_string(argv[i])
	}
	return a
}

pub const PATH_SEP := '/'

pub fun user_args() []string {
	return ARGS.slice(1, ARGS.length)
}

pub fun ls(dir string) []string {
	mut res := []string
	#C.'struct dirent *pDirent;
	DIR *pDir;

	pDir = opendir(dir.str);
	while((pDirent = readdir(pDir)) != NULL) {
		if (strcmp(pDirent->d_name, ".") != 0 && strcmp(pDirent->d_name, "..") != 0) {
			Array_push(&res, (string[]){from_c_string(pDirent->d_name)});
		}
	}
	closedir (pDir);'
	return res
}

pub fun file_name(path string) string {
	return path.all_after_last(PATH_SEP)
}

pub fun exists(path string) bool {
	return #C.access(path.str, 0) != -1
}

pub fun is_dir(path string) bool {
	#C.'struct stat path_stat;
    if (stat(path.str, &path_stat) != 0) {
        return false;
    }
    return S_ISDIR(path_stat.st_mode);'
	return false
}

pub fun read_bytes(path string) []u8 {
	mut size := 0 as i64
	#C.'FILE* fp;
	fp = fopen(path.str, "r");
	fseek(fp, 0, SEEK_END);
	size = ftell(fp);
	fseek(fp, 0, SEEK_SET);'
	mut res := []u8{length = size as i32}
	#C.'fread(res.data, 1, size, fp);
	fclose(fp);'
	return res
}

pub fun read_file(path string) string {
	bytes := read_bytes(path)
	return string{
		str = bytes.data as &u8
		length = bytes.length
	}
}

pub fun write_file(path string, text string) {
	#C.'FILE* fp;
	fp = fopen(path.str, "w");
	fprintf(fp, text.str);
	fclose(fp);'
}

pub fun join_path(base string, dirs []string) string {
	mut sb := strings.new_builder(base.length + dirs.length * 50)
	sb.write(base)
	for d in dirs {
		sb.write(PATH_SEP)
		sb.write(d)
	}
	return sb.str()
}

pub fun platform() string {
	return 'linux'
}

pub struct CmdRes {
	pub code i32
	pub stdout string
	pub stderr string
}

pub fun exec(cmd string) CmdRes {
	mut res := CmdRes{}

	#C.'FILE* f;
	size_t bytes_read;
	char buf[4096];

	f = popen(cmd.str, "r");

	bytes_read = fread(buf, 1, sizeof(buf) - 1, f);'
	#C."buf[bytes_read] = '\0';

	res.code = pclose(f);

	res.stdout = from_c_string(buf);
	res.stderr = res.stdout;"

	return res
}

pub fun system(cmd string) i32 {
	return #C.system(cmd.str)
}
