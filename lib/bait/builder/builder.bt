// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package builder

import os
import bait.ast
import bait.errors
import bait.parser
import bait.checker
import bait.gen.js as jsgen
import bait.preference
import bait.tokenizer


struct Builder {
	prefs preference.Prefs
	table ast.Table
}

// Returns the absolute paths to all bait files in a directory that should be compiled
fun (b Builder) collect_bait_files(dir string) []string {
	all_files := os.ls(dir)
	mut files := []string
	for f in all_files {
		if f.ends_with('_test.bt') {
			continue
		}
		if not f.ends_with('.bt') {
			continue
		}
		if b.prefs.backend == .js and f.ends_with('.c.bt') {
			continue
		}
		if b.prefs.backend == .c and f.ends_with('.js.bt') {
			continue
		}
		files.push(os.join_path(dir, [f]))
	}
	return files
}

fun (b Builder) get_user_files(path string) []string {
	if os.is_dir(path) {
		return b.collect_bait_files(path)
	}
	if os.exists(path) and path.ends_with('.bt') {
		return [path]
	}
	return []string
}

fun (b Builder) parse_source_file(path string) ast.File {
	text := os.read_file(path)
	tokens := tokenizer.tokenize(text, path)
	return parser.parse(tokens, path, b.table, b.prefs)
}

pub fun compile(prefs preference.Prefs) i32 {
	mut b := Builder{
		prefs: prefs
		table: ast.new_table()
	}

	mut paths := b.collect_bait_files(resolve_import('builtin'))
	paths = paths.concat(b.get_user_files(prefs.command))

	// Tokenize and parse all specified files
	mut files := []ast.File
	for p in paths {
		files.push(b.parse_source_file(p))
	}

	root_pkg := files[files.length - 1].pkg_decl.full_name

	// Get and parse all imports. Use classic for, as new elements are added to `files`
	for i:=0; i<files.length; i+=1 {
		f := files[i]
		for imp in f.imports {
			// Get all imported files and filter out already parsed ones
			// TODO possible perf improvement: prefilter against list of parsed packages before file collection
			import_dir := resolve_import(imp.name.replace('.', '/'))
			mut imp_paths := b.collect_bait_files(import_dir)
			imp_paths = imp_paths.filter(fun (p string) bool {
				return not paths.contains(p)
			})

			// Parse the imported files
			for p in imp_paths {
				paths.push(p)
				files.push(b.parse_source_file(p))
			}
		}
	}

	// TODO move whole depgraph build and resolve into pkg
	// TODO catch cyclic deps

	// Build a dependency map for each file
	mut deps := map[string][]string
	for f in files {
		pkg_name := f.pkg_decl.full_name
		// Everything implicitly imports builtin
		if pkg_name != 'builtin' {
			deps[pkg_name].push('builtin')
		}

		for imp in f.imports {
			deps[pkg_name].push(imp.name)
		}
	}

	// Sort the packages, so type checking works properly
	mut pkg_order := []string
	order_pkgs(pkg_order, root_pkg, deps)
	mut sorted_files := []ast.File
	for pkg in pkg_order {
		for f in files {
			if f.pkg_decl.full_name == pkg {
				sorted_files.push(f)
			}
		}
	}

	// Run the type resolver and checker
	if not checker.check_files(sorted_files, b.table) {
		return 1
	}

	// TODO properly select backend
	if b.prefs.backend != .js {
		errors.generic_error('Only the JS backend is supported right now.')
		return 1
	}

	// Run the code gen and write it to the outfile
	res := jsgen.gen(sorted_files, b.table, b.prefs) + '\n'
	ensure_dir_exists(os.dir(b.prefs.out_name))
	os.write_file(b.prefs.out_name, res)

	// Execute the resulting exe if required
	if b.prefs.should_run{
		run_res := os.system('node ${b.prefs.out_name}')
		return run_res
	}

	return 0
}

fun resolve_import(pkg string) string {
	// Usually the exe and lib have the same root dir
	dir := os.resource_abs_path(os.join_path("lib", [pkg]))
	if os.exists(dir) {
		return dir
	}

	// When running make, lib is in the working dir
	return os.join_path(os.getwd(), ["lib", pkg])
}

fun order_pkgs(ordered []string, pkg string, deps map[string][]string) {
	for d in deps[pkg] {
		order_pkgs(ordered, d, deps)
	}
	if not ordered.contains(pkg) {
		ordered.push(pkg)
	}
}

fun ensure_dir_exists(dir string) {
	if not os.exists(dir) {
		os.mkdir(dir)
	}
}
