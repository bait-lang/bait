// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.token

fun (mut c Checker) stmts(stmts []ast.Stmt){
	for mut stmt in stmts{
		c.stmt(mut stmt)
	}
}

fun (mut c Checker) stmt(mut stmt ast.Stmt){
	match stmt {
		ast.AssertStmt { c.assert_stmt(stmt) }
		ast.AssignStmt { c.assign_stmt(mut stmt) }
		ast.ConstDecl { c.const_decl(mut stmt) }
		ast.ExprStmt { c.expr_stmt(mut stmt) }
		ast.EnumDecl { c.enum_decl(stmt) }
		ast.ForLoop { c.for_loop(stmt) }
		ast.ForClassicLoop { c.for_classic_loop(stmt) }
		ast.ForInLoop { c.for_in_loop(mut stmt) }
		ast.FunDecl { c.fun_decl(mut stmt) }
		ast.StaticDecl { c.static_decl(mut stmt) }
		ast.IfMatch { c.if_match(mut stmt) }
		ast.InterfaceDecl { c.interface_decl(stmt) }
		ast.LoopControlStmt { c.loop_control_stmt(stmt) }
		ast.ReturnStmt { c.return_stmt(mut stmt) }
		ast.StructDecl { c.struct_decl(stmt) }
		ast.TypeDecl { c.type_decl(stmt) }
		else {
			s := stmt as ast.InvalidStmt
			c.error('unexpected stmt: ${s}', s.pos)
		}
	}

	c.expected_type = ast.VOID_TYPE
}

fun (mut c Checker) assert_stmt(node ast.AssertStmt){
	typ := c.expr(node.expr)
	if not c.check_types(typ, ast.BOOL_TYPE) {
		c.error('assert must be of type bool', node.pos)
	}
}

fun (mut c Checker) const_decl(mut node ast.ConstDecl) {
	if node.lang != .bait {
		return
	}

	node.typ = c.expr(node.expr)
	c.sema_ctx.scopes[c.pkg].update_type(node.name, node.typ)
}

fun (mut c Checker) expr_stmt(mut node ast.ExprStmt) {
	mut expr := node.expr
	node.typ = c.expr(mut expr)

	// Used are all exprs inside if/match expr and or blocks, functions calls, if/match stmt and HashExprs
	if c.is_if_match_expr or c.is_or_block or expr is ast.CallExpr or expr is ast.IfMatch or expr is ast.HashExpr {
		return
	}
	e := expr as ast.InvalidExpr
	c.error('expression evaluated but not used', e.pos)
}

fun (c Checker) enum_decl(node ast.EnumDecl) {
	if node.lang != .bait {
		return
	}

	if node.fields.length == 0 {
		c.error('enum cannot be empty', node.pos)
		return
	}

	mut cur_val := 0
	outer: for i, mut field in node.fields {
		for j := 0; j < i; j += 1 {
			if field.name == node.fields[j].name {
				c.error('duplicate field name ${field.name}', field.pos)
				continue outer
			}
		}

		if field.expr is ast.InvalidExpr {
			field.expr = ast.IntegerLiteral{ val = '${cur_val}' }
			cur_val += 1
			continue
		}

		if not (field.expr is ast.IntegerLiteral) {
			c.error('enum field value must be an integer', field.pos)
			continue
		}

		val := (field.expr as ast.IntegerLiteral).val.toI32()
		if val < cur_val {
			c.error('enum field value must be greater than previous field', field.pos)
			continue
		}

		cur_val = val + 1
	}
}

fun (c Checker) register_label(label string, pos token.Pos) {
	if label.length == 0 {
		return
	}

	if c.scope.is_known(label) {
		c.error('redefinition of "${label}"', pos)
		return
	}

	c.scope.register(label, ast.ScopeObject{
		kind = .label
	})
}

fun (mut c Checker) for_loop(node ast.ForLoop) {
	c.open_scope()
	c.register_label(node.label, node.pos)
	c.expr(node.cond)
	loop_safe := c.is_loop
	c.is_loop = true
	c.stmts(node.stmts)
	c.is_loop = loop_safe
	c.close_scope()
}

fun (mut c Checker) for_classic_loop(node ast.ForClassicLoop) {
	c.open_scope()
	c.register_label(node.label, node.pos)
	c.stmt(node.init)
	c.expr(node.cond)
	c.stmt(node.inc)
	loop_safe := c.is_loop
	c.is_loop = true
	c.stmts(node.stmts)
	c.is_loop = loop_safe
	c.close_scope()
}

fun (mut c Checker) for_in_loop(mut node ast.ForInLoop) {
	c.open_scope()
	c.register_label(node.label, node.pos)
	node.expr_type = c.expr(node.expr)
	sym := c.table.get_sym(node.expr_type)
	mut idx_type := ast.PLACEHOLDER_TYPE
	mut val_type := ast.PLACEHOLDER_TYPE
	if sym.kind == .array {
		idx_type = ast.I32_TYPE
		val_type = (sym.info as ast.ArrayInfo).elem_type
	} else if sym.kind == .map {
		info := sym.info as ast.MapInfo
		idx_type = info.key_type
		val_type = info.val_type
	} else if sym.kind == .string {
		idx_type = ast.I32_TYPE
		val_type = ast.U8_TYPE
	} else {
		c.error('cannot iterate over ${sym.name}', node.pos)
	}
	if node.idxvar is ast.Ident {
		idxvar := node.idxvar as ast.Ident
		c.scope.register(idxvar.name, ast.ScopeObject{typ = idx_type})
	}
	c.scope.register(node.valvar.name, ast.ScopeObject{
		typ = val_type
		is_mut = node.valvar.is_mut
	})
	loop_safe := c.is_loop
	c.is_loop = true
	c.stmts(node.stmts)
	c.is_loop = loop_safe
	c.close_scope()
}

fun (mut c Checker) static_decl(mut node ast.StaticDecl){
	node.typ = c.expr(node.expr)
	c.sema_ctx.scopes[c.pkg].update_type(node.name, node.typ)
}

fun (c Checker) interface_decl(node ast.InterfaceDecl){
	// Nothing to do
}

fun (c Checker) loop_control_stmt(node ast.LoopControlStmt) {
	if not c.is_loop {
		c.error('break and continue must be inside a loop', node.pos)
	}

	if node.label.length == 0 {
		return
	}

	obj := c.scope.get_parent(node.label)
	if obj.kind != .label {
		c.error('label "${node.label}" not found', node.pos)
	}
}

fun (c Checker) type_decl(node ast.TypeDecl) {
	// Nothing to do
}
