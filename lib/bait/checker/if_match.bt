// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast

fun (mut c Checker) if_match(mut node ast.IfMatch) ast.Type {
	save_is_if_match_expr := c.is_if_match_expr

	// Nested if/match expr. The parser does not have this information
	if c.is_if_match_expr {
		node.is_expr = true
	}

	if node.is_expr {
		c.is_if_match_expr = true
		node.typ = c.expected_type
	}

	mut cond_sym := ast.TypeSymbol{}
	mut sumtype_match := false
	if node.is_match {
		// Check at least one branch except `else` exists
		min_branches := if node.has_else { 2 } else { 1 }
		if node.branches.length < min_branches {
			c.error('match needs at least one non-else branch', node.pos)
			return ast.ERROR_TYPE
		}

		// Are we in a sumtype match?
		cond_type := c.expr((node.branches[0].cond as ast.InfixExpr).left)
		cond_sym = c.table.get_sym(cond_type)
		sumtype_match = cond_sym.kind == .sum_type
	}

	mut branch_exprs := []string
	mut nr_branches_return := 0
	for i, branch in node.branches {
		c.open_scope()

		// Condition
		c.is_sumtype_match = sumtype_match
		if not node.has_else or i < node.branches.length - 1 {
			if node.is_comptime {
				if c.comptime_if_condition(branch.cond) {
					node.ct_eval_branch = i
				} else {
					c.close_scope()
					continue
				}
			} else {
				cond_type := c.expr(branch.cond)

				if node.is_match {
					key := (branch.cond as ast.InfixExpr).right.repr()
					if branch_exprs.contains(key) {
						c.error('match case `${key}` is already handled', branch.pos)
					} else {
						branch_exprs.push(key)
					}
				}

				if not c.is_sumtype_match and cond_type != ast.BOOL_TYPE and cond_type != ast.ERROR_TYPE {
					c.error("expected `bool`, got `${c.table.type_name(cond_type)}`", node.pos)
				}
			}
		} else if node.is_comptime {
			node.ct_eval_branch = i
		}
		c.is_sumtype_match = false

		if node.is_expr {
			c.expected_type = node.typ
		}

		c.stmts(branch.stmts)
		c.close_scope()

		if node.is_expr {
			last := branch.stmts.last()
			if is_noreturn(last) {
				continue
			}

			if c.stmt_returns(last) {
				nr_branches_return += 1
			} else {
				c.error('branch does not return a value', branch.pos)
				continue
			}

			typ := (last as ast.ExprStmt).typ
			if node.typ == ast.VOID_TYPE {
				node.typ = typ
			} else if not c.check_types(typ, node.typ) {
				c.error('branch returns ${c.table.type_name(typ)}, expected ${c.table.type_name(node.typ)}', branch.pos)
			}
		} else if has_toplevel_return(branch.stmts) {
			nr_branches_return += 1
		}

		if node.is_comptime and node.ct_eval_branch >= 0 {
			break
		}
	}

	if node.is_match {
		c.check_exhaustive_match(cond_sym.info, branch_exprs, node)
	}

	c.returns = nr_branches_return == node.branches.length
	c.is_if_match_expr = save_is_if_match_expr

	return node.typ
}

fun (mut c Checker) check_exhaustive_match(info ast.TypeInfo, branch_exprs []string, node ast.IfMatch) {
	mut is_exhaustive := true
	mut unhandled := []string

	if info is ast.EnumInfo {
		for val in info.vals {
			if not branch_exprs.contains(val) {
				is_exhaustive = false
				unhandled.push(val)
			}
		}
	} else if info is ast.SumTypeInfo {
		for typ in info.variants {
			variant := c.table.type_name(typ)
			if not branch_exprs.contains(variant) {
				is_exhaustive = false
				unhandled.push(variant)
			}
		}
	} else {
		is_exhaustive = false
	}

	if is_exhaustive {
		if node.has_else {
			c.warn('match is exhaustive, else is unreachable', node.pos)
		}
	} else if not node.has_else {
		mut msg := 'match must be exhaustive'
		if unhandled.length > 0 {
			msg += ' (add `else {}` or branches for ${unhandled.join(", ")})'
		} else {
			msg += ' (add `else {}` branch)'
		}
		c.error(msg, node.pos)
	}
}
