// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.context
import bait.errors
import bait.preference
import bait.token

pub struct Checker{
	prefs preference.Prefs
	table ast.Table
	sema_ctx &context.SemanticContext
	pub mut gen_ctx &context.GenContext
	mut files []&ast.File
	mut file ast.File
	mut scope context.Scope
	mut path string
	mut pkg string
	mut pkg_alias string
	mut has_main_pkg_files bool
	mut has_main_fun bool
	mut cur_fun ast.FunDecl
	mut cur_concrete_types []ast.Type
	mut need_generic_resolve bool
	mut cur_generic_names []string
	mut expected_type ast.Type
	mut expecting_expr bool
	mut is_index bool
	mut is_lhs_assign bool
	mut is_if_match_expr bool
	mut is_sumtype_match bool
	mut is_or_block bool
	mut is_loop bool
	mut returns bool
	mut export_names []string
	pub mut infos []errors.Message
	pub mut warnings []errors.Message
	pub mut errors []errors.Message
}

pub fun (mut c Checker) check_files(mut files []ast.File) {
	c.files = files

	for mut f in files {
		c.check(f)

		f.infos = c.infos
		f.warnings = c.warnings
		f.errors = c.errors

		c.infos = []errors.Message
		c.warnings = []errors.Message
		c.errors = []errors.Message
	}

	mut resolve_runs := 0
	for c.need_generic_resolve and resolve_runs < 100 {
		c.need_generic_resolve = false

		for f in files {
			if f.generic_funs.length == 0 {
				continue
			}

			c.change_file(f)
			c.resolve_generics_funs()
		}

		resolve_runs += 1
	}

	// Test mode special checks
	if c.prefs.is_test {
		c.change_file(files.last())

		if c.gen_ctx.test_fun_names.length == 0 {
			c.generic_error("${c.path} contains no tests")
			return
		}

		return
	}

	// no main function needed for libraries, tests and script mode
	if c.prefs.is_library or c.prefs.is_script {
		return
	}

	// Main function checks
	if not c.has_main_pkg_files {
		c.generic_error('project must have a main package or be compiled as a library')
	} else if not c.has_main_fun {
		c.generic_error('main package has no main function')
	}
}

fun (mut c Checker) change_file(file ast.File) {
	c.file = file
	c.path = file.path
	c.pkg = file.pkg_name
	c.pkg_alias = file.pkg_name.all_after_last('.')

	c.scope = context.Scope{
		parent = c.sema_ctx.scopes[c.pkg]
	}
}

fun (mut c Checker) check(file ast.File) {
	c.change_file(file)

	if c.pkg == 'main' {
		c.has_main_pkg_files = true
		c.check_main_fun(file.stmts)
	}

	c.check_imports(file.imports)
	c.stmts(file.stmts)
}

fun (mut c Checker) check_imports(imports []ast.Import) {
	for imp in imports {
		if imp.lang != .bait and c.file.lang != imp.lang {
			c.warn("${imp.lang} imports should be in .${imp.lang.ext()}.bt files", imp.pos)
		}

		// C imports are aliased as `_`
		if imp.lang == .c {
			continue
		}

		// Register import to prevent shadowing them
		c.scope.register_unique(imp.alias, context.ScopeObject{
			kind = .package_
		})
	}

	c.check_scope_redefs(c.scope)
}

fun (mut c Checker) open_scope(){
	c.scope = context.Scope{
		parent = c.scope
	}
}

fun (mut c Checker) close_scope(){
	c.scope = c.scope.parent
}

fun (c Checker) find_in_scope(name string, pkg string) context.ScopeObject {
	// From imported package or FFI
	if pkg.length > 0 {
		return c.sema_ctx.scopes[pkg].get(name)
	}

	// From current file or package
	return c.scope.get_parent(name)
}

fun (c Checker) info(msg string, pos token.Pos){
	c.infos.push(errors.Message{
		kind = .info
		path = c.path
		pos = pos
		title = 'info'
		msg = msg
	})
}

fun (c Checker) warn(msg string, pos token.Pos){
	c.warnings.push(errors.Message{
		kind = .warning
		path = c.path
		pos = pos
		title = 'warning'
		msg = msg
	})
}

fun (c Checker) error(msg string, pos token.Pos){
	c.errors.push(errors.Message{
		kind = .error
		path = c.path
		pos = pos
		title = 'error'
		msg = msg
	})
}

fun (c Checker) generic_error(msg string){
	c.errors.push(errors.Message{
		kind = .error
		msg = msg
	})
}
