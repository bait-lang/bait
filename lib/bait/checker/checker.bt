// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package checker

import bait.ast
import bait.errors
import bait.preference
import bait.token

pub struct Checker{
	prefs preference.Prefs
	table ast.Table
mut:
	scope ast.Scope
	path string
	pkg string
	has_main_pkg_files bool
	has_main_fun bool
	is_js_file bool
	cur_fun ast.FunDecl
	expected_type ast.Type
	is_lhs_assign bool
	is_if_match_expr bool
	is_sumtype_match bool
	is_loop bool
	returns bool
	export_names []string
	redefined_funs []string
pub mut:
	infos []errors.Message
	warnings []errors.Message
	errors []errors.Message
}

pub fun (mut c Checker) check_files(files []ast.File) {
	for mut f in files {
		c.check(f)

		f.infos = c.infos
		f.warnings = c.warnings
		f.errors = c.errors

		c.infos = []errors.Message
		c.warnings = []errors.Message
		c.errors = []errors.Message
	}

	c.check_fun_redefinitions(files)
	c.check_struct_redefinitions(files)

	// no main function needed for libraries, tests and script mode
	if c.prefs.is_library or c.prefs.is_test or c.prefs.is_script {
		return
	}

	if not c.has_main_pkg_files {
		c.generic_error('project must have a main package or be compiled as a library')
	} else if not c.has_main_fun {
		c.generic_error('main package has no main function')
	}
}

fun (mut c Checker) check(file ast.File) {
	c.path = file.path
	c.is_js_file = c.path.contains('.js.')
	c.pkg = file.pkg_decl.full_name

	c.scope = ast.Scope{
		// TODO how to handle recursive sturct inits?
		parent = c.table.global_scope
	}

	if c.pkg == 'main' {
		c.has_main_pkg_files = true
		c.check_main_fun(file.stmts)
	}

	c.check_imports(file.imports)
	c.stmts(file.stmts)
}

fun (c Checker) check_imports(imports []ast.Import) {
	for imp in imports {
		// Register import to prevent shadowing them
		c.scope.register(imp.alias, ast.ScopeObject{
			kind = .package_
		})

		// TODO for c
		if not c.is_js_file and imp.lang == .js {
			c.warn('JS imports have to be in .js.bt files', imp.pos)
		}
	}

}

fun (mut c Checker) open_scope(){
	c.scope = ast.Scope{
		parent = c.scope
	}
}

fun (mut c Checker) close_scope(){
	c.scope = c.scope.parent
}

fun (c Checker) info(msg string, pos token.Pos){
	c.infos.push(errors.Message{
		kind = .info
		path = c.path
		pos = pos
		title = 'note'
		msg = msg
	})
}

fun (c Checker) warn(msg string, pos token.Pos){
	c.warnings.push(errors.Message{
		kind = .warning
		path = c.path
		pos = pos
		title = 'warning'
		msg = msg
	})
}

fun (c Checker) error(msg string, pos token.Pos){
	c.errors.push(errors.Message{
		kind = .error
		path = c.path
		pos = pos
		title = 'error'
		msg = msg
	})
}

fun (c Checker) generic_error(msg string){
	c.errors.push(errors.Message{
		kind = .error
		msg = msg
	})
}
