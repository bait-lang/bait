// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.errors
import bait.preference
import bait.token

struct Checker{
	pref preference.Prefs
	parsed_files []ast.File
	table ast.Table
	scope ast.Scope
	path string
	pkg string
	has_main_pkg_files bool
	has_main_fun bool
	is_js_file bool
	had_error bool
	cur_fun ast.FunDecl
	expected_type ast.Type
	is_lhs_assign bool
}

pub fun check_files(files []ast.File, table ast.Table, pref preference.Prefs) bool {
	mut c := Checker{
		pref: pref
		parsed_files: files
		table: table
		scope: ast.Scope{
			// TODO how to handle recursive sturct inits?
			parent: table.global_scope
		}
	}

	for f in c.parsed_files {
		c.check(f)
	}

	if c.has_main_pkg_files and not c.has_main_fun {
		c.generic_error('main package has no main function')
	}
	c.check_redefined_functions()

	return not c.had_error
}

fun (c Checker) check(file ast.File) {
	c.path = file.path
	c.is_js_file = c.path.ends_with('.js.bt')
	c.pkg = file.pkg_decl.full_name

	if c.pkg == 'main' and not c.pref.is_test and not c.pref.is_script {
		c.has_main_pkg_files = true
		c.check_main_fun(file.stmts)
	}

	c.check_imports(file.imports)
	c.stmts(file.stmts)
}

fun (c Checker) check_imports(imports []ast.Import) {
	for imp in imports {
		if not c.is_js_file and imp.lang == .js {
			c.warn('JS imports have to be in .js.bt files', imp.pos)
		}
	}
}

fun (c Checker) open_scope(){
	c.scope = ast.Scope{
		parent: c.scope
	}
}

fun (c Checker) close_scope(){
	c.scope = c.scope.parent
}

fun (c Checker) warn(msg string, pos token.Pos){
	errors.warn(c.path, pos, msg)
}

fun (c Checker) error(msg string, pos token.Pos){
	errors.error(c.path, pos, msg)
	c.had_error = true
}

fun (c Checker) generic_error(msg string){
	errors.generic_error(msg)
	c.had_error = true
}
