// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.errors
import bait.token

struct Checker{
	parsed_files []ast.File
	table ast.Table
	scope ast.Scope
	path string
	pkg string
	had_error bool
	cur_fun ast.FunDecl
	expected_type ast.Type
	is_lhs_assign bool
}

pub fun check_files(files []ast.File, table ast.Table) bool {
	mut c := Checker{
		parsed_files: files
		table: table
		scope: ast.Scope{
			// TODO how to handle recursive sturct inits?
			parent: 0 as any
		}
	}
	for f in c.parsed_files {
		c.check(f)
	}
	c.check_redefined_functions()
	return not c.had_error
}

fun (c Checker) check(file ast.File) {
	c.path = file.path
	c.pkg = file.pkg_decl.full_name
	c.stmts(file.stmts)
}

fun (c Checker) open_scope(){
	c.scope = ast.Scope{
		parent: c.scope
	}
}

fun (c Checker) close_scope(){
	c.scope = c.scope.parent
}

fun (c Checker) warn(msg string, pos token.Pos){
	errors.warn(c.path, pos, msg)
}

fun (c Checker) error(msg string, pos token.Pos){
	errors.error(c.path, pos, msg)
	c.had_error = true
}

fun (c Checker) generic_error(msg string){
	errors.generic_error(msg)
	c.had_error = true
}
