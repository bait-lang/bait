// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package checker

import bait.ast
import bait.errors
import bait.token

struct FunRedefinition {
	path string
	pos token.Pos
	name string
	signature string
}

struct StructRedefinition {
	path string
	pos token.Pos
	name string
}

fun (mut c Checker) check_fun_redefinitions(files []ast.File) {
	if c.redefined_funs.length == 0 {
		return
	}

	// Note: It is assumed that there are at most a few redefined functions.
	// Thus the performance impact of looping over all files and root stmts is ok.
	for name in c.redefined_funs {
		// Collect information about redefinitions
		mut redefinitions := []FunRedefinition
		for file in files {
			for stmt in file.stmts {
				if stmt is ast.FunDecl and stmt.name == name {
					redefinitions.push(FunRedefinition{
						path = file.path
						pos = stmt.pos
						name = name
						signature = c.fun_signature(stmt)
					})
				}
			}
		}

		// Add the error and show where redefinitions happened
		mut err := errors.Message{
			kind = .error
			msg = 'redfinition of function "${name}"'
		}
		for redef in redefinitions {
			err.infos.push(errors.Message{
				kind = .info
				path = redef.path
				pos = redef.pos
				title = 'conflict'
				msg = redef.signature

			})
		}
		c.errors.push(err)
	}
}

fun (c Checker) fun_signature(node ast.FunDecl) string {
	mut sig := 'fun ${node.name}('
	for i, p in node.params {
		type_name := c.table.get_sym(p.typ).name
		sig += '${p.name} ${type_name}'
		if i < node.params.length - 1 {
			sig += ', '
		}
	}
	sig += ')'
	return sig
}

fun (mut c Checker) check_struct_redefinitions(files []ast.File) {
	// Remove duplicates
	mut unique := []string
	for name in c.table.redefined_structs {
		if not unique.contains(name) {
			unique.push(name)
		}
	}

	// TODO share more logic with fun redefs
	for name in unique {
		mut redefinitions := []StructRedefinition
		for file in files {
			for stmt in file.stmts {
				if stmt is ast.StructDecl and stmt.name == name {
					redefinitions.push(StructRedefinition{
						path = file.path
						pos = stmt.pos
						name = name
					})
				}
			}
		}

		// Add the error and show where redefinitions happened
		mut err := errors.Message{
			kind = .error
			msg = 'redfinition of struct "${name}"'
		}
		for redef in redefinitions {
			err.infos.push(errors.Message{
				kind = .info
				path = redef.path
				pos = redef.pos
				title = 'conflict'
				msg = name

			})
		}
		c.errors.push(err)
	}
}
