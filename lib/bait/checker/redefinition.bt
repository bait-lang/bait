// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.context
import bait.errors
import bait.token

pub fun (mut c Checker) toplevel_redefinitions() {
	for pkg, scope in c.sema_ctx.scopes {
		c.pkg = pkg
		c.check_scope_redefs(scope)
	}
}

fun (mut c Checker) check_scope_redefs(scope context.Scope) {
	redefined_syms := scope.get_unique_redefinitions()

	for redef in redefined_syms {
		c.generic_error("redefinition of `${redef}`")
		c.add_conflicts(redef)
	}
}

fun (mut c Checker) add_conflicts(name string) {
	for file in c.files {
		// Only the same package and builtin symbols can conflict
		if file.pkg_name != c.pkg and file.pkg_name != "builtin" {
			continue
		}

		for imp in file.imports {
			if imp.lang != .c and imp.alias == name {
				c.conflict_err(file.path, imp.pos, "import ${imp.name}")
			}
		}

		for stmt in file.stmts {
			if is_redef(name, stmt) {
				c.conflict_err(file.path, (stmt as ast.InvalidStmt).pos, c.get_signature(stmt))
			}
		}
	}
}

fun (mut c Checker) conflict_err(path string, pos token.Pos, signature string) {
	c.errors.push(errors.Message{
		kind = .info
		path = path
		pos = pos
		title = "conflict"
		msg = signature
	})
}

// Signatue to display in the conflict message
fun (mut c Checker) get_signature(s ast.Stmt) string {
	mut stmt := s
	match stmt {
		ast.ConstDecl {
			c.const_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "const ${typ}"
		}
		ast.EnumDecl {
			return "enum"
		}
		ast.FunDecl {
			return c.table.fun_decl_signature(stmt)
		}
		ast.StaticDecl {
			c.static_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "static ${typ}"
		}
		ast.StructDecl {
			return "struct"
		}
		ast.TypeDecl {
			return c.table.type_decl_signature(stmt)
		}
		else { }
	}

	return ""
}

// Conditions for a redefinition. Usually the name matches
fun is_redef(name string, stmt ast.Stmt) bool {
	return match stmt {
		ast.ConstDecl { stmt.name == name }
		ast.EnumDecl { stmt.name == name }
		ast.FunDecl { stmt.lang == .bait and stmt.name == name }
		ast.StaticDecl { stmt.name == name }
		ast.StructDecl { stmt.name == name }
		ast.TypeDecl { stmt.name == name }
		else { false }
	}
}
