// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.errors
import bait.token

// TODO REDEF replace this by redefinitions2

struct Redefinition {
	path string
	pos token.Pos
	name string
	signature string
}

fun stmt_is_redef(stmt ast.Stmt, name string) bool {
	return (stmt is ast.EnumDecl or stmt is ast.InterfaceDecl) and stmt.name == name
}

fun (mut c Checker) check_redefinitions(redefs_list []string, files []ast.File) {
	if redefs_list.length == 0 {
		return
	}

	// Remove duplicates
	mut unique := []string
	for name in redefs_list {
		if not unique.contains(name) {
			unique.push(name)
		}
	}
	// Note: It is assumed that there are at most a few redefinitions.
	// Thus the performance impact of looping over all files and root stmts is ok.
	for name in unique {
		mut redefinitions := []Redefinition
		for file in files {
			for stmt in file.stmts {
				if stmt_is_redef(stmt, name) {
					redefinitions.push(Redefinition{
						path = file.path
						pos = (stmt as ast.InvalidStmt).pos
						name = name
						signature = c.stmt_signature(stmt)
					})
				}
			}
		}

		// Add the error and show where redefinitions happened
		mut err := errors.Message{
			kind = .error
			msg = 'redfinition of "${name}"'
		}
		for redef in redefinitions {
			err.infos.push(errors.Message{
				kind = .info
				path = redef.path
				pos = redef.pos
				title = 'conflict'
				msg = redef.signature

			})
		}
		c.errors.push(err)
	}
}

fun (mut c Checker) check_type_redefinitions(files []ast.File) {
	c.check_redefinitions(c.table.redefined_types, files)
}

fun (c Checker) stmt_signature(stmt ast.Stmt) string {
	return match stmt {
		ast.EnumDecl { 'enum' }
		ast.InterfaceDecl { 'interface' }
		else { '' }
	}
}
