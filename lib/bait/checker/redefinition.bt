// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.errors
import bait.token

pub fun (mut c Checker) check_redefinitions(files []ast.File) {
	for pkg, scope in c.sema_ctx.scopes {
		c.pkg = pkg

		redefined_syms := scope.get_unique_redefinitions()

		for redef in redefined_syms {
			c.generic_error("redefinition of `${redef}`")
			c.add_conflicts(redef, files)
		}
	}
}

fun (mut c Checker) add_conflicts(name string, files []ast.File) {
	for file in files {
		if file.pkg_name == c.pkg or file.pkg_name == "builtin" {
			for stmt in file.stmts {
				if is_redef(name, stmt) {
					c.errors.push(errors.Message{
						kind = .info
						path = file.path
						pos = (stmt as ast.InvalidStmt).pos
						title = "conflict"
						msg = c.get_signature(stmt)
					})
				}
			}
		}
	}
}

fun (mut c Checker) get_signature(s ast.Stmt) string {
	mut stmt := s
	match stmt {
		ast.ConstDecl {
			c.const_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "const ${typ}"
		}
		ast.EnumDecl {
			return "enum"
		}
		ast.FunDecl {
			return c.table.fun_decl_signature(stmt)
		}
		ast.StaticDecl {
			c.static_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "static ${typ}"
		}
		ast.StructDecl {
			return "struct"
		}
		ast.TypeDecl {
			return c.table.type_decl_signature(stmt)
		}
		else { }
	}

	return ""
}

fun is_redef(name string, stmt ast.Stmt) bool {
	return match stmt {
		ast.ConstDecl { stmt.name == name }
		ast.EnumDecl { stmt.name == name }
		ast.FunDecl { stmt.name == name }
		ast.StaticDecl { stmt.name == name }
		ast.StructDecl { stmt.name == name }
		ast.TypeDecl { stmt.name == name }
		else { false }
	}
}
