// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.token

fun (mut c Checker) infix_expr(mut node ast.InfixExpr) ast.Type {
	node.left_type = c.expr(node.left)
	if node.left_type == ast.PLACEHOLDER_TYPE {
		return ast.PLACEHOLDER_TYPE
	}

	c.table.needed_equality_funs.push(node.left_type)

	if c.is_sumtype_match and node.op == .eq {
		node.op = .key_is
	}
	if node.op == .key_is {
		return c.is_sumtype_variant_infix(mut node)
	}

	c.expected_type = node.left_type
	node.right_type = c.expr(node.right)
	if not c.check_types(node.right_type, node.left_type) {
		mut err_msg := ''
		if node.is_match {
			err_msg = 'cannot match ${c.table.type_name(node.right_type)} to ${c.table.type_name(node.left_type)}'
		} else {
			err_msg = 'infix expr: types ${c.table.type_name(node.left_type)} and ${c.table.type_name(node.right_type)} do not match'
		}
		c.error(err_msg, node.pos)
	}

	if node.left_type == ast.I64_TYPE or node.left_type == ast.U64_TYPE or node.left_type == ast.U32_TYPE {
		node.right = ast.AsCast{
			expr = node.right
			target = node.left_type
		}
	}

	if node.op.is_compare() {
		return ast.BOOL_TYPE
	}

	lsym := c.table.get_sym(node.left_type)
	if lsym.overloads.contains(node.op.js_repr()) {
		return lsym.overloads[node.op.js_repr()].return_type
	}

	return node.left_type
}

// x is Variant
fun (c Checker) is_sumtype_variant_infix(mut node ast.InfixExpr) ast.Type {
	// Smartcast variable
	if node.left is ast.Ident {
		mut right := node.right as ast.Ident
		if not right.mixed_name.contains('.') and right.pkg != 'main' {
			right.mixed_name = right.pkg + '.' + right.mixed_name
		}
		node.right_type = c.table.get_idx(right.mixed_name)
		left := node.left as ast.Ident
		c.scope.update_type(left.mixed_name, node.right_type)
		return ast.BOOL_TYPE
	}

	// Smartcast struct field
	if node.left is ast.SelectorExpr {
		mut right := node.right as ast.Ident
		if not right.mixed_name.contains('.') and right.pkg != 'main' {
			right.mixed_name = right.pkg + '.' + right.mixed_name
		}
		node.right_type = c.table.get_idx(right.mixed_name)
		left := node.left as ast.SelectorExpr
		mixed_name := (left.expr as ast.Ident).mixed_name + '.' + left.field_name
		c.scope.update_type(mixed_name, node.right_type)
		return ast.BOOL_TYPE
	}

	return ast.BOOL_TYPE
}
