// Copyright (c) 2023-present Lukas Neubert.
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.token

fun (mut c Checker) infix_expr(mut node ast.InfixExpr) ast.Type {
	node.left_type = c.expr(node.left)
	c.table.needed_equality_funs.push(node.left_type)

	if node.op == .key_is {
		return c.is_sumtype_variant_infix(node)
	}

	c.expected_type = node.left_type
	node.right_type = c.expr(node.right)
	if not c.check_types(node.right_type, node.left_type) {
		c.error('infix expr: types ${c.table.type_name(node.left_type)} and ${c.table.type_name(node.right_type)} do not match', node.pos)
	}

	if node.op.is_compare() {
		return ast.BOOL_TYPE
	}

	return node.left_type
}

// x is Variant
fun (c Checker) is_sumtype_variant_infix(mut node ast.InfixExpr) ast.Type {
	// Smartcast variable
	if node.left is ast.Ident {
		mut right := node.right as ast.Ident
		if not right.name.contains('.') and right.pkg != 'main' {
			right.name = right.pkg + '.' + right.name
		}
		node.right_type = c.table.get_idx(right.name)
		left := node.left as ast.Ident
		c.scope.update_type(left.name, node.right_type)
		return ast.BOOL_TYPE
	}

	// Smartcast struct field
	if node.left is ast.SelectorExpr {
		mut right := node.right as ast.Ident
		if not right.name.contains('.') and right.pkg != 'main' {
			right.name = right.pkg + '.' + right.name
		}
		node.right_type = c.table.get_idx(right.name)
		left := node.left as ast.SelectorExpr
		name := (left.expr as ast.Ident).name + '.' + left.field_name
		c.scope.update_type(name, node.right_type)
		return ast.BOOL_TYPE
	}

	return ast.BOOL_TYPE
}
