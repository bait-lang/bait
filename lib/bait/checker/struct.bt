// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package checker

import bait.ast
import bait.token


fun (mut c Checker) struct_decl(node ast.StructDecl) {
	// TODO error
	// TODO test

	// save current generic names and override them with the structs' generic names
	// so does_type_exist can detect nonexistent generic names
	prev_generic_names := c.cur_generic_names
	c.cur_generic_names = node.generic_names

	// TODO remove lowercase string struct
	if not node.name[0].is_upper() and node.name != 'string' {
		c.warn('struct name `${node.name}` must start with a capital letter', node.pos)
	}

	outer: for i, field in node.fields {
		mut should_continue := false
		for j := 0; j < i; j += 1 {
			if field.name == node.fields[j].name {
				c.error('duplicate field name ${field.name}', field.pos)
				continue outer
			}
		}

		c.check_struct_field_attrs(node)

		sym := c.table.get_sym(field.typ)
		if not c.does_type_exist(sym, field.pos) {
			continue
		}

		// Check the default value if present
		if field.expr is ast.EmptyExpr {
			continue
		}
		typ := c.expr(field.expr)
		if not c.check_types(typ, field.typ) {
			c.error('default value not matches field type ${c.table.type_name(field.typ)}', (field.expr as ast.EmptyExpr).pos)
		}
	}

	c.cur_generic_names = prev_generic_names
}

fun (mut c Checker) struct_init(mut node ast.StructInit) ast.Type {
	gen_sym := c.table.get_sym(node.typ)
	mut sym := c.table.unwrap_generic(gen_sym)
	if sym.kind == .placeholder {
		c.error('undefined struct ${node.name}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}
	if not sym.is_pub and sym.name.contains('.') and sym.pkg != c.pkg {
		c.error('struct ${sym.name} is private', node.pos)
		return ast.PLACEHOLDER_TYPE
	}

	c.check_init_field_values(node, sym.info as ast.StructInfo)


	node.name = sym.name
	for field in node.fields {
		def := sym.find_field(field.name, c.table)
		if def.name.length == 0 {
			c.error('struct ${sym.name} has no field ${field.name}', node.pos)
		}
		c.expected_type = def.typ
		expr_type := c.expr(field.expr)
		if def.typ == ast.PLACEHOLDER_TYPE {
			// Another error was already raised
			continue
		}
		if not c.check_types(expr_type, def.typ) {
			c.error('cannot assign to field ${field.name}: expected ${c.table.type_name(def.typ)}, got ${c.table.type_name(expr_type)} ', node.pos)
		}
	}
	return node.typ
}

fun (c Checker) check_init_field_values(init ast.StructInit, info ast.StructInfo) {
	for def_field in info.fields {
		// Field requires initialization if it's a sum type or has the attribute
		def_sym := c.table.get_sym(def_field.typ)
		mut is_required := def_sym.kind == .sum_type
		for attr in def_field.attrs {
			if attr.name == 'required' {
				is_required = true
			}
		}

		if not is_required {
			continue
		}

		if not (def_field.expr is ast.EmptyExpr) {
			continue
		}

		mut is_present := false
		for inited in init.fields {
			if inited.name == def_field.name {
				is_present = true
				break
			}
		}
		if not is_present {
			c.error('field "${init.name}.${def_field.name}" requires initialization', init.pos)
		}
	}
}
