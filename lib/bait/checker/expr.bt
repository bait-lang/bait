// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.token

fun (mut c Checker) expr(mut expr ast.Expr) ast.Type {
	expected_save := c.expected_type
	t := match expr {
		ast.AnonFun { c.anon_fun(expr) }
		ast.ArrayInit { c.array_init(mut expr) }
		ast.AsCast { c.as_cast(mut expr) }
		ast.BoolLiteral { ast.BOOL_TYPE }
		ast.CallExpr { c.call_expr(mut expr) }
		ast.CharLiteral { ast.U8_TYPE }
		ast.ComptimeVar { c.comptime_var(expr) }
		ast.EnumVal { c.enum_val(mut expr) }
		ast.FloatLiteral { ast.F64_TYPE }
		ast.HashExpr { c.hash_expr(expr) }
		ast.Ident { c.ident(mut expr) }
		ast.IfMatch { c.if_match(mut expr) }
		ast.IndexExpr { c.index_expr(mut expr) }
		ast.InfixExpr { c.infix_expr(mut expr) }
		ast.IntegerLiteral { c.integer_literal(expr) }
		ast.MapInit { c.map_init(mut expr) }
		ast.ParExpr { c.par_expr(expr) }
		ast.PrefixExpr { c.prefix_expr(expr) }
		ast.SelectorExpr { c.selector_expr(mut expr) }
		ast.StringLiteral { c.string_literal(expr) }
		ast.StringInterLiteral { c.string_inter_literal(expr) }
		ast.StructInit { c.struct_init(mut expr) }
		ast.TypeOf { c.type_of(mut expr) }
		ast.Void { ast.VOID_TYPE }
		ast.InvalidExpr { panic('unexpected InvalidExpr at ${expr.pos}') }
	}
	c.expected_type = expected_save
	return t
}

fun (mut c Checker) array_init(mut node ast.ArrayInit) ast.Type {
	// Type init
	if node.exprs.length == 0 {
		// Typeless array init
		if node.elem_type == ast.PLACEHOLDER_TYPE {
			if c.expected_type == ast.VOID_TYPE {
				c.error('cannot infer type of empty array', node.pos)
			}

			node.typ = c.expected_type
			return node.typ
		}

		// Validate fields if present
		if not (node.length_expr is ast.InvalidExpr) {
			typ := c.expr(node.length_expr)
			if not c.check_types(typ, ast.I32_TYPE) {
				c.error('expected i32, got ${c.table.type_name(typ)}', node.pos)
			}
		}
		if not (node.cap_expr is ast.InvalidExpr) {
			typ := c.expr(node.cap_expr)
			if not c.check_types(typ, ast.I32_TYPE) {
				c.error('expected i32, got ${c.table.type_name(typ)}', node.pos)
			}
		}

		return node.typ
	}

	// Expressions init
	for i, mut e in node.exprs {
		typ := c.expr(mut e)
		if i == 0 {
			node.elem_type = typ
			c.expected_type = typ
		}
		if not c.check_types(typ, node.elem_type) {
			pos := (e as ast.InvalidExpr).pos
			c.error('expected element type ${c.table.type_name(node.elem_type)}, got ${c.table.type_name(typ)}', pos)
		}
	}
	node.typ = c.table.find_or_register_array(node.elem_type)
	return node.typ
}

fun (mut c Checker) as_cast(mut node ast.AsCast) ast.Type {
	expr_type := c.expr(node.expr)
	node.expr_type = expr_type
	expr_sym := c.table.get_sym(expr_type)

	// Check the target exists
	target_sym := c.table.get_sym(node.target)
	if not c.does_type_exist(target_sym, node.pos) {
		return expr_type
	}

	// TODO check cast is possible (e.g. prevent string to i32, ...)

	// Pointer casts
	// TODO test
	if expr_type.get_nr_amp() >= 1 and node.target.get_nr_amp() == 0 {
		c.error('cannot cast to normal type from pointer', node.pos)
		return expr_type
	}

	// Smartcast sumtypes
	// TODO check if expr is part of target
	if expr_sym.kind == .sum_type and node.expr is ast.Ident {
		expr := node.expr as ast.Ident
		c.scope.update_type(expr.name, node.target)
	}

	return node.target
}

fun (mut c Checker) enum_val(mut node ast.EnumVal) ast.Type {
	if node.name.length == 0 {
		node.typ = c.expected_type
	} else {
		node.typ = c.table.get_idx(node.name)
	}
	sym := c.table.get_sym(node.typ)
	if sym.kind == .placeholder {
		c.error('undefined enum ${node.name}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}
	if sym.kind != .enum_ {
		c.error('expected type is not an enum, got ${sym.name}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}
	if not sym.is_pub and sym.name.contains('.') and sym.pkg != c.pkg {
		c.error('enum ${sym.name} is private', node.pos)
		return ast.PLACEHOLDER_TYPE
	}
	info := sym.info as ast.EnumInfo
	if not info.vals.contains(node.val) {
		c.error('enum ${sym.name} has no value ${node.val}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}
	node.name = sym.name
	return node.typ
}

fun (mut c Checker) hash_expr(node ast.HashExpr) ast.Type {
	if node.lang == .js and not c.is_js_file {
		c.warn('JS code can only be used in .js.bt files', node.pos)
	}
	return ast.VOID_TYPE
}

// TODO SCOPES cleanup and add comments
// TODO SCOPES reduce lookups if node is from imported pkg / FFI
fun (mut c Checker) ident(mut node ast.Ident) ast.Type {
	mut obj := c.scope.get(node.name)

	if node.lang != .bait {
		obj = c.table.ffi_scope.get(node.name)
	}

	if obj.typ == ast.PLACEHOLDER_TYPE {
		obj = c.table.scopes[c.pkg].get(node.name)
	}

	// TMP
	if obj.typ == ast.PLACEHOLDER_TYPE and node.name.contains(".") {
		pkg_part := node.name.all_before_last(".")
		name_part := node.name.all_after_last(".")
		obj = c.table.scopes[pkg_part].get(name_part)
	}

	if obj.kind == .constant and not obj.is_pub and obj.pkg != c.pkg {
		c.error('const ${node.name} is private', node.pos)
	}

	// unresolved constant
	if obj.typ == ast.VOID_TYPE {
		obj.typ = c.expr(obj.expr)
	}

	if obj.kind == .constant or obj.kind == .static_ {
		if not node.name.contains('.') {
			if obj.pkg == "" {
				node.name = c.pkg + '.' + node.name
			} else {
				node.name = obj.pkg + '.' + node.name
			}
		}
	}

	if obj.typ == ast.PLACEHOLDER_TYPE {
		c.error('undefined identifier ${node.name}', node.pos)
	}

	node.is_mut = obj.is_mut
	return obj.typ
}

fun (mut c Checker) index_expr(mut node ast.IndexExpr) ast.Type {
	node.left_type = c.expr(node.left)
	c.expr(node.index)
	sym := c.table.get_sym(node.left_type)
	if sym.kind == .array {
		info := sym.info as ast.ArrayInfo
		return info.elem_type
	}
	if sym.kind == .map {
		info := sym.info as ast.MapInfo
		return info.val_type
	}
	if sym.kind == .string {
		if c.is_lhs_assign{
			c.error('cannot assign to string index', node.pos)
			return ast.VOID_TYPE
		}
		return ast.U8_TYPE
	}
	return node.left_type
}

fun (mut c Checker) integer_literal(node ast.IntegerLiteral) ast.Type {
	if c.expected_type.is_int() {
		return c.expected_type
	}

	return ast.I32_TYPE
}

fun (mut c Checker) map_init(mut node ast.MapInit) ast.Type {
	// Empty init
	if node.keys.length == 0 {
		sym := c.table.get_sym(node.typ)
		info := sym.info as ast.MapInfo
		node.key_type = info.key_type
		node.val_type = info.val_type
		return node.typ
	}

	// Literal init
	for i, mut key in node.keys {
		key_type := c.expr(mut key)
		if i >= 1 {
			c.expected_type = node.val_type
		}
		val_type := c.expr(node.vals[i])

		if i == 0 {
			node.key_type = key_type
			node.val_type = val_type
		} else {
			if not c.check_types(key_type, node.key_type) {
				key_expr := key as ast.InvalidExpr
				c.error('expected key type ${c.table.type_name(node.key_type)}, got ${c.table.type_name(key_type)}', key_expr.pos)
			}
			if not c.check_types(val_type, node.val_type) {
				val_expr := node.vals[i] as ast.InvalidExpr
				c.error('expected value type ${c.table.type_name(node.val_type)}, got ${c.table.type_name(val_type)}', val_expr.pos)
			}
		}
	}
	node.typ = c.table.find_or_register_map(node.key_type, node.val_type)
	return node.typ
}

fun (mut c Checker) par_expr(node ast.ParExpr) ast.Type {
	return c.expr(node.expr)
}

fun (mut c Checker) prefix_expr(node ast.PrefixExpr) ast.Type {
	typ := c.expr(node.right)
	sym := c.table.get_sym(typ)

	// TODO disallow on unsigned numbers too
	if node.op == .minus and sym.kind != .number {
		c.error('cannot negate ${c.table.type_name(typ)}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}

	if node.op == .key_not and typ != ast.BOOL_TYPE {
		c.error('cannot use `not` on ${c.table.type_name(typ)}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}

	if node.op == .mul {
		if typ.get_nr_amp() == 0 {
			c.error('cannot dereference ${c.table.type_name(typ)}', node.pos)
			return ast.PLACEHOLDER_TYPE
		}

		return typ.set_nr_amp(typ.get_nr_amp() - 1)
	}

	return typ
}

fun (mut c Checker) selector_expr(mut node ast.SelectorExpr) ast.Type {
	if node.expr is ast.IndexExpr {
		mut expr := node.expr as ast.IndexExpr
		expr.is_selector = true
	}
	node.expr_type = c.expr(node.expr)

	gen_sym := c.table.get_sym(node.expr_type)
	sym := c.table.get_final_sym(c.table.unwrap_generic(gen_sym))

	if [ast.TypeKind.struct_, .interface_, .array, .string, .map].contains(sym.kind) {
		field := sym.find_field(node.field_name, c.table)
		if field.name.length == 0 {
			c.error('${sym.name} has no field ${node.field_name}', node.pos)
			return ast.PLACEHOLDER_TYPE
		}

		if not field.is_pub and sym.pkg != c.pkg {
			c.error('field ${sym.name}.${node.field_name} is private', node.pos)
		}

		fsym := c.table.get_sym(field.typ)
		if fsym.kind == .generic {
			gen_info := gen_sym.info as ast.GenericInst
			info := sym.info as ast.StructInfo
			return gen_info.concrete_types[info.generic_names.index(fsym.name)]
		}

		return field.typ
	}

	if sym.kind == .sum_type {
		// TODO check if field is present on all variants (with same type)
		c.error('cast to the variant before accessing field of sumtype ${sym.name}', node.pos)
		return ast.VOID_TYPE
	}

	c.error('cannot select from ${c.table.type_name(node.expr_type)}', node.pos)
	return ast.PLACEHOLDER_TYPE
}

fun (c Checker) string_literal(node ast.StringLiteral) ast.Type {
	return ast.STRING_TYPE
}

// FIXME node should be mut
fun (mut c Checker) string_inter_literal(node ast.StringInterLiteral) ast.Type {
	for mut e in node.exprs {
		typ := c.expr(mut e)
		node.expr_types.push(typ)
	}
	return ast.STRING_TYPE
}

fun (mut c Checker) type_of(mut node ast.TypeOf) ast.Type {
	typ := c.expr(node.expr)
	node.typ = typ
	return ast.STRING_TYPE
}
