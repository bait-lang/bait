// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.errors

enum AttrValue {
	none
	optional
	required
}

fun build_known_attrs() map[string]AttrValue {
	mut attrs := map[string]AttrValue
	attrs['deprecated'] = AttrValue.optional
	attrs['deprecated_after'] = AttrValue.required
	return attrs
}

const KNOWN_ATTRS := build_known_attrs()

fun (c Checker) check_attributes(attrs []ast.Attribute){
	for attr in attrs {
		if not KNOWN_ATTRS.contains(attr.name) {
			c.error('unknown attribute "${attr.name}"', attr.pos)
			continue
		}
		val_req := KNOWN_ATTRS[attr.name]
		if val_req == AttrValue.none and attr.value.length > 0 {
			c.error('attribute "${attr.name}" does not take a value', attr.pos)
			continue
		}
		if val_req == AttrValue.required and attr.value.length == 0 {
			c.error('attribute "${attr.name}" requires a value', attr.pos)
			continue
		}
	}
}
