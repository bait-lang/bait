// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast

enum AttrValue {
	none
	optional
	required
}

fun build_fun_attrs() map[string]AttrValue {
	mut attrs := map[string]AttrValue
	attrs['deprecated'] = .optional
	attrs['deprecated_after'] = .required
	attrs['export'] = .required
	attrs['overload'] = .required
	return attrs
}

fun build_struct_field_attrs() map[string]AttrValue {
	mut attrs := map[string]AttrValue
	attrs['required'] = .none
	return attrs
}

const FUN_ATTRS := build_fun_attrs()
const STRUCT_FIELD_ATTRS := build_struct_field_attrs()

fun (c Checker) check_attribute(attr ast.Attribute, known_list map[string]AttrValue) bool {
	// Check attribute is implemented
	if not known_list.contains(attr.name) {
		c.warn('unknown attribute "${attr.name}"', attr.pos)
		return false
	}

	// Check value requirements are met
	val_req := known_list[attr.name]
	if val_req == .none and attr.value.length > 0 {
		c.error('attribute "${attr.name}" does not take a value', attr.pos)
		return false
	}
	if val_req == .required and attr.value.length == 0 {
		c.error('attribute "${attr.name}" requires a value', attr.pos)
		return false
	}

	return true
}

fun (c Checker) check_fun_attrs(node ast.FunDecl){
	for attr in node.attrs {
		if not c.check_attribute(attr, FUN_ATTRS) {
			continue
		}

		if attr.name == 'overload' {
			c.attr_overload(node, attr)
		} else if attr.name == 'export' {
			c.attr_export(attr)
		}
	}
}

fun (c Checker) attr_overload(node ast.FunDecl, attr ast.Attribute) {
	if not node.is_method {
		c.warn('operator overloading can only be used on methods', attr.pos)
		return
	}

	// Check the operator can be overloaded
	if ['!=', '>', '<=', '>='].contains(attr.value) {
		c.error('cannot overload "!=", ">", "<=" and ">=" as they are generated from "==" and "<"', attr.pos)
		return
	}
	if not ['+', '-', '*', '/', '%', '==', '<'].contains(attr.value) {
		c.error('cannot overload "${attr.value}"', attr.pos)
		return
	}

	// Check for duplicate overload
	rec_sym := c.table.get_sym(node.params[0].typ)
	if rec_sym.overloads.contains(attr.value) {
		// TODO print positions of all overloads
		c.error('"${attr.value}" was overloaded twice for type "${rec_sym.name}"', attr.pos)
		return
	}

	// Register overload method
	rec_sym.overloads[attr.value] = node
}

fun (c Checker) attr_export(attr ast.Attribute) {
	// TODO handle this error like fun redefinition and show all places where the name is used
	if c.export_names.contains(attr.value) {
		c.error('@export name "${attr.value}" is already used', attr.pos)
		return
	}
	c.export_names.push(attr.value)
}

fun (c Checker) check_fun_attrs_on_call(call ast.CallExpr, def ast.FunDecl) {
	mut is_deprecated := false
	mut depr_attr := ast.Attribute{}
	mut depr_date_attr := ast.Attribute{}

	for attr in def.attrs {
		if attr.name == 'deprecated_after' {
			depr_date_attr = attr
			is_deprecated = true
		}
		if attr.name == 'deprecated' {
			depr_attr = attr
			is_deprecated = true
		}
	}

	if is_deprecated {
		mut depr_message := 'function "${call.name}" '
		if depr_date_attr.name.length > 0 {
			depr_message += 'will be deprecated after ${depr_date_attr.value}'
		} else {
			depr_message += 'is deprecated'
		}
		if depr_attr.value.length > 0 {
			depr_message += '; ${depr_attr.value}'
		}
		c.info(depr_message, call.pos)
		// TODO check deprecation date and warn if passed
	}
}

fun (c Checker) check_struct_field_attrs(node ast.StructDecl){
	for field in node.fields {
		for attr in field.attrs {
			if not c.check_attribute(attr, STRUCT_FIELD_ATTRS) {
				continue
			}

			if attr.name == 'required' and not field.expr is ast.EmptyExpr {
				c.error('@required on field with default value is redundant', attr.pos)
			}
		}
	}
}

// See struct.bt for checks on initialization
