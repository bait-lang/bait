// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.errors
import bait.token

fun is_redef(name string, stmt ast.Stmt) bool {
	return match stmt {
		ast.ConstDecl { stmt.name == name }
		ast.FunDecl { stmt.name == name }
		ast.StaticDecl { stmt.name == name }
		ast.StructDecl { stmt.name == name }
		ast.TypeDecl { stmt.name == name }
		else { false }
	}
}

fun (mut c Checker) get_signature(s ast.Stmt) string {
	mut stmt := s
	match stmt {
		ast.ConstDecl {
			c.const_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "const ${typ}"
		}
		ast.FunDecl {
			return c.fun_signature(stmt)
		}
		ast.StaticDecl {
			c.static_decl(mut stmt)
			typ := c.table.type_name(stmt.typ)
			return "static ${typ}"
		}
		ast.StructDecl {
			return "struct"
		}
		ast.TypeDecl {
			return c.type_decl_signature(stmt)
		}
		else { }
	}

	return ""
}

// TODO REDEF generic funs
fun (c Checker) fun_signature(node ast.FunDecl) string {
	mut sig := 'fun ('
	for i, p in node.params {
		type_name := c.table.get_sym(p.typ).name
		sig += '${p.name} ${type_name}'
		if i < node.params.length - 1 {
			sig += ', '
		}
	}
	sig += ')'
	if node.return_type != ast.VOID_TYPE {
		sig += ' ${c.table.type_name(node.return_type)}'
	}
	return sig
}

fun (c Checker) type_decl_signature(node ast.TypeDecl) string {
	sym := c.table.get_sym(node.typ)
	if sym.kind == .alias_type {
		return "type ${c.table.type_name(sym.parent)}"
	}

	if sym.kind == .sum_type {
		info := sym.info as ast.SumTypeInfo
		mut var_strs := []string{ length = info.variants.length }
		for i, var in info.variants {
			var_strs[i] = c.table.type_name(var)
		}
		return "type " + var_strs.join(" | ")
	}

	if sym.kind == .fun_ {
		info := sym.info as ast.FunInfo
		mut param_strs := []string{ length = info.param_types.length }
		for i, p in info.param_types {
			param_strs[i] = c.table.type_name(p)
		}
		ret := c.table.type_name(info.return_type)
		return "fun (" + param_strs.join(", ") + ") " + ret
	}

	return "type"
}

pub fun (mut c Checker) check_redefinitions2(files []ast.File) {
	for pkg, scope in c.sema_ctx.scopes {
		c.pkg = pkg

		redefined_syms := scope.get_unique_redefinitions()

		for redef in redefined_syms {
			err := errors.Message{
				kind = .error
				msg = "redefinition of `${redef}`"
				infos = c.get_conflicts(redef, files)
			}
			c.errors.push(err)
		}
	}
}

fun (mut c Checker) get_conflicts(name string, files []ast.File) []errors.Message {
	mut conflicts := []errors.Message
	for file in files {
		if file.pkg_name == c.pkg or file.pkg_name == "builtin" {
			for stmt in file.stmts {
				if is_redef(name, stmt) {
					conflicts.push(errors.Message{
						kind = .info
						path = file.path
						pos = (stmt as ast.InvalidStmt).pos
						title = "conflict"
						msg = c.get_signature(stmt)
					})
				}
			}
		}
	}

	return conflicts
}
