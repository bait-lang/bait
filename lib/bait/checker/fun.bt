// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package checker

import bait.ast
import bait.token

fun (mut c Checker) anon_fun(node ast.AnonFun) ast.Type {
	root_fun_decl := c.cur_fun
	c.cur_fun = node.decl
	c.open_scope()
	c.fun_params(node.decl.params)
	c.stmts(node.decl.stmts)
	c.close_scope()
	c.cur_fun = root_fun_decl
	return node.typ
}

fun (mut c Checker) fun_decl(mut node ast.FunDecl) {
	if node.lang != .bait {
		return
	}

	if node.is_method {
		sym := c.table.get_sym(node.params[0].typ)
		if sym.info is ast.StructInfo {
			field := sym.find_field(node.name, c.table)
			if field.name.length > 0 {
				if c.table.get_sym(field.typ).kind == .fun_ {
					c.error('struct has a field and method named ${node.name}', node.pos)
				}
			}
		}
	} else {
		def := c.scope.get(node.name)
		if def.kind == .function {
			c.redefined_funs.push(node.name)
		} else if def.kind != .unknown {
			c.error('redefinition of ${node.name}', node.pos)
		}

		mut param_types := []ast.Type
		for param in node.params {
			param_types.push(param.typ)
		}
		c.scope.register(node.name, ast.ScopeObject{
			typ = c.table.find_or_register_fun(param_types, node.return_type, false)
			kind = .function
		})
	}

	if node.generic_names.length > 0 and c.cur_concrete_types.length == 0 {
		c.file.generic_funs.push(node)
		c.need_generic_resolve = true
		return
	}

	c.fun_instance(mut node)
}

fun (mut c Checker) fun_instance(mut node ast.FunDecl) {
	c.returns = false
	c.cur_fun = node
	c.check_fun_attrs(mut node) // FIXME this should error because node is not mut

	// save current generic names in outer scope and override them with
	// the funs' generic names (so does_type_exist can detect nonexistent generic names)
	prev_generic_names := c.cur_generic_names
	c.cur_generic_names = node.generic_names
	c.open_scope()
	c.fun_params(node.params)
	c.stmts(node.stmts)
	c.close_scope()
	c.cur_generic_names = prev_generic_names

	ret_sym := c.table.get_sym(node.return_type)
	is_void := node.return_type == ast.VOID_TYPE or ret_sym.parent == ast.VOID_TYPE
	has_top_return := has_toplevel_return(node.stmts)
	if not node.noreturn and not is_void and not c.returns and not has_top_return {
		c.error('missing return statement', node.pos)
	}

	// Void result: add default return for the generated code to work
	if ret_sym.kind == .result and ret_sym.parent == ast.VOID_TYPE and not has_top_return {
		node.stmts.push(ast.ReturnStmt{
			expr = ast.StructInit{
				name = 'Result'
			}
		})
	}

	c.cur_fun = ast.FunDecl{
		return_type = ast.VOID_TYPE
	}
}

fun (c Checker) fun_params(params []ast.Param){
	for p in params {
		if c.scope.is_known(p.name) {
			obj := c.scope.get(p.name)
			msg := if obj.kind == .package_ {
				'cannot shadow import "${p.name}"'
			} else {
				'redefinition of ${p.name}'
			}
			c.error(msg, p.pos)
			continue
		}

		sym := c.table.get_sym(p.typ)
		if not c.does_type_exist(sym, p.pos) {
			continue
		}

		if sym.kind == .fun_ {
			info := sym.info as ast.FunInfo
			c.table.fun_decls[p.name] = ast.FunDecl{
				pkg = c.pkg
				return_type = info.return_type
				params = info.to_params()
			}
			c.scope.register(p.name, ast.ScopeObject{
				typ = p.typ
				kind = .function
			})
		} else {
			c.scope.register(p.name, ast.ScopeObject{
				typ = p.typ
				is_mut = p.is_mut
				kind = .variable
			})
		}
	}
}

fun (mut c Checker) check_main_fun(stmts []ast.Stmt) {
	for stmt in stmts {
		if stmt is ast.FunDecl and stmt.is_main() {
			c.has_main_fun = true
		}
	}
}

fun (mut c Checker) call_expr(mut node ast.CallExpr) ast.Type {
	if node.is_method{
		return c.method_call(mut node)
	}

	return c.fun_call(mut node)
}

fun (mut c Checker) fun_call(mut node ast.CallExpr) ast.Type {
	mut found := c.table.fun_decls.contains(node.name)
	if not found and not node.name.contains('.') and node.pkg != 'builtin' {
		full_name := node.pkg + '.' + node.name
		if c.table.fun_decls.contains(full_name) {
			node.name = full_name
			found = true
		}
	}
	if not found {
		obj := c.scope.get(node.name)
		if obj.kind == .function {
			found = true
		}
	}
	if not found {
		c.error('unknown function ${node.name}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}

	mut def := c.table.fun_decls[node.name]
	if not def.is_pub and def.pkg != c.pkg {
		c.error('function ${def.name} is private', node.pos)
	}

	node.noreturn = def.noreturn
	node.return_type = def.return_type

	c.check_fun_attrs_on_call(node, def)

	// Check argument count
	if node.args.length != def.params.length {
		c.error('expected ${def.params.length} arguments but got ${node.args.length}', node.pos)
		return node.return_type
	}

	// Handle special builtin functions
	if node.name == 'println' or node.name == 'eprintln' or node.name == 'print' or node.name == 'eprint' {
		node.args[0].typ = c.expr(node.args[0].expr)
		return ast.VOID_TYPE
	}

	// Check argument types
	c.call_args(def, mut node, 0)

	c.or_block(mut node)

	c.set_conc_types(mut node, mut def)

	if node.name == 'error' {
		node.return_type = c.cur_fun.return_type
	}

	return node.return_type
}

fun (mut c Checker) method_call(mut node ast.CallExpr) ast.Type {
	left_expr_type := c.expr(node.left)

	if left_expr_type == ast.PLACEHOLDER_TYPE {
		// Another error was already raised
		return ast.PLACEHOLDER_TYPE
	}

	left_sym := c.table.get_sym(left_expr_type)
	final_sym := c.table.get_final_sym(left_sym)

	mut arg_offset := 1
	mut def := c.table.get_method(left_sym, node.name)
	if def.name.length == 0 {
		if left_sym.kind == .struct_ {
			field := left_sym.find_field(node.name, c.table)
			if field.name.length > 0 {
				field_sym := c.table.get_sym(field.typ)
				info := field_sym.info as ast.FunInfo
				arg_offset = 0
				node.is_field = true
				def = ast.FunDecl{
					name = field.name
					params = info.to_params()
					return_type = info.return_type
				}
			}
		}
	}

	if def.name.length == 0 {
		// Autogenerated str method
		if node.name == 'str' {
			if node.args.length > 0 {
				c.error('expected 0 arguments but got ${node.args.length}', node.pos)
				return ast.STRING_TYPE
			}

			c.table.needed_str_funs.push(left_expr_type)
			node.return_type = ast.STRING_TYPE
			node.left_type = left_expr_type
			return node.return_type
		}

		c.error('method ${node.name} not found on type ${left_sym.name}', node.pos)
		return ast.PLACEHOLDER_TYPE
	}

	if not def.is_pub and left_sym.pkg != c.pkg {
		c.error('method ${def.name} is private', node.pos)
	}

	node.lang = def.lang
	node.noreturn = def.noreturn
	node.return_type = def.return_type
	node.left_type = left_expr_type

	if not node.is_field {
		// Check if the receiver is and should be mutable
		if def.params[0].is_mut {
			if node.left is ast.Ident and not (node.left as ast.Ident).is_mut {
				c.error('method requires an mutable receiver', node.pos)
				return node.return_type
			}
		}

		// The following is required for some builtin array and map methods
		node.left_type = def.params[0].typ
		if final_sym.kind == .array and ['push', 'push_many_with_len', 'push_many'].contains(node.name) {
			node.left_type = left_expr_type
		}

		// Auto cast receiver, if the method expects a pointer
		if left_expr_type.get_nr_amp() < def.params[0].typ.get_nr_amp() {
			node.left = ast.PrefixExpr{
				op = .amp
				right = node.left
			}
			node.left_type = node.left_type.set_nr_amp(1)
		}
		// Auto deref receiver, if method expects no pointer
		else if def.params[0].typ.get_nr_amp() < left_expr_type.get_nr_amp() {
			node.left = ast.PrefixExpr{
				op = .mul
				right = node.left
			}
			node.left_type = node.left_type.set_nr_amp(0)
		}
	}

	c.check_fun_attrs_on_call(node, def)

	// Check argument count
	if node.args.length + arg_offset != def.params.length {
		c.error('expected ${def.params.length - arg_offset} arguments but got ${node.args.length}', node.pos)
		return node.return_type
	}

	// Array methods with one argument of `any` type, expecting the element
	if final_sym.kind == .array and ['push', 'push_many_with_len'].contains(node.name) {
		mut arg := node.args[0]
		info := final_sym.info as ast.ArrayInfo
		c.expected_type = info.elem_type
		arg.typ = c.expr(arg.expr)
		if not c.check_types(arg.typ, info.elem_type) {
			c.error('type ${c.table.type_name(arg.typ)} not matches ${c.table.type_name(info.elem_type)} in argument 1', node.pos)
		}
		return node.return_type
	}
	// Array methods with one argument of `array` type, expecting the specific array type
	if final_sym.kind == .array and ['concat', 'push_many'].contains(node.name) {
		mut arg := node.args[0]
		c.expected_type = left_expr_type
		arg.typ = c.expr(arg.expr)
		if not c.check_types(arg.typ, left_expr_type) {
			c.error('type ${c.table.type_name(arg.typ)} not matches ${c.table.type_name(left_expr_type)} in argument 1', node.pos)
		}
		return node.return_type
	}

	// Check argument types
	c.call_args(def, mut node, arg_offset)

	// Array methods with return type `array`
	if left_sym.kind == .array and ['filter', 'reverse', 'slice', 'copy', 'from_js_arr'].contains(node.name) {
		return left_expr_type
	}

	// Array methods with return type `any`
	if left_sym.kind == .array and ['last'].contains(node.name) {
		return (left_sym.info as ast.ArrayInfo).elem_type
	}

	c.or_block(mut node)

	c.set_conc_types(mut node, mut def)

	return node.return_type
}

fun (mut c Checker) set_conc_types(mut node ast.CallExpr, mut def ast.FunDecl) {
	if node.concrete_types.length == 0 {
		return
	}

	c.need_generic_resolve = c.table.register_concrete(def.key(), node.concrete_types) or c.need_generic_resolve

	ret_sym := c.table.get_sym(node.return_type)
	if ret_sym.kind == .generic {
		idx := def.generic_names.index(ret_sym.name)
		node.return_type = node.concrete_types[idx]
	}
}

fun (mut c Checker) call_args(def ast.FunDecl, mut node ast.CallExpr, poffset i32) {
	should_resolve_generics := def.generic_names.length != node.concrete_types.length
	mut save_as_concrete := false

	for i, mut arg in node.args {
		param := def.params[i + poffset]
		mut param_type := param.typ
		psym := c.table.get_sym(param_type)

		if should_resolve_generics and psym.kind == .generic {
			gi := def.generic_names.index(psym.name)
			if gi < node.concrete_types.length {
				param_type = node.concrete_types[gi]
			} else if gi < c.cur_concrete_types.length {
				node.concrete_types.push(c.cur_concrete_types[gi])
			} else {
				save_as_concrete = true
			}
		}

		c.expected_type = param_type
		arg.typ = c.expr(arg.expr)
		if arg.typ == ast.VOID_TYPE and not (arg.expr is ast.CallExpr) {
			// Another error was already raised
			continue
		}

		if save_as_concrete {
			node.concrete_types.push(arg.typ)
			save_as_concrete = false
		}

		if not c.check_types(arg.typ, param_type) {
			c.error('type ${c.table.type_name(arg.typ)} not matches ${c.table.type_name(param_type)} in argument ${i + 1}', node.pos)
		}

		if arg.expr is ast.Ident {
			expr := arg.expr as ast.Ident

			if arg.is_mut {
				if not param.is_mut {
					c.error('unnecessary `mut` for argument `${expr.name}`', expr.pos)
				}
				if not expr.is_mut {
					c.error('`${expr.name}` is not declared as mutable', expr.pos)
				}
			} else if param.is_mut {
				c.error('add `mut` to argument for parameter `${param.name}`', expr.pos)
			}
		}
	}
}

fun (mut c Checker) or_block(mut node ast.CallExpr) {
	ret_sym := c.table.get_sym(node.return_type)
	if ret_sym.kind != .result {
		if node.or_block.kind != .none {
			c.error('${node.name} does not return a result, it cannot have an `or {}` block or `!` at the end', node.pos)
		}
		return
	}

	if node.or_block.kind == .none {
		c.error('${node.name} returns a result, it must have an `or {}` block or propagation `!` at the end', node.pos)
		return
	}

	node.return_type = ret_sym.parent

	if node.or_block.kind == .prop {
		cur_fun_ret_sym := c.table.get_sym(c.cur_fun.return_type)
		if cur_fun_ret_sym.kind != .result and not c.cur_fun.is_main() {
			c.error('`${c.cur_fun.name}` must return a result to use propagation', node.pos)
		}
		return
	}

	c.is_or_block = true
	c.scope.register('err', ast.ScopeObject{
		kind = .variable
		typ = ast.STRING_TYPE
	})
	c.stmts(node.or_block.stmts)
	c.is_or_block = false

	if ret_sym.parent != ast.VOID_TYPE {
		if not c.stmt_returns(node.or_block.stmts.last()) and not has_toplevel_return(node.or_block.stmts) {
			c.error('or block does not return a value', node.pos)
		}
	}
}

fun (mut c Checker) resolve_generics_funs() {
	for mut fn in c.file.generic_funs {
		gtypes := c.table.generic_fun_types[fn.key()]
		for concrete in gtypes {
			c.cur_concrete_types = concrete
			c.fun_instance(mut fn)
		}
	}
}
