// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.errors
import bait.token

fun (c Checker) fun_decl(node ast.FunDecl) {
	c.cur_fun = node
	c.check_attributes(node.attrs)
	c.open_scope()
	c.fun_params(node.params)
	c.stmts(node.stmts)
	c.close_scope()
}

fun (c Checker) fun_params(params []ast.Param){
	for p in params {
		sym := c.table.get_sym(p.typ)
		if sym.kind == ast.TypeKind.fun_ {
			c.scope.register(p.name, ast.ScopeObject{
				typ: p.typ
				kind: ast.ObjectKind.function
			})
		} else {
			c.scope.register(p.name, ast.ScopeObject{typ: p.typ})
		}
	}
}


fun (c Checker) return_stmt(node ast.ReturnStmt) {
	if node.expr is ast.EmptyExpr {
		if c.cur_fun.return_type != ast.VOID_TYPE {
			c.error('expected return value of type ${c.table.type_name(c.cur_fun.return_type)}', node.pos)
		}
	} else {
		c.expected_type = c.cur_fun.return_type
		c.expr(node.expr)
	}
}

fun (c Checker) fun_signature(node ast.FunDecl) string {
	mut sig := 'fun ${node.name}('
	for i, p in node.params {
		type_name := c.table.get_sym(p.typ).name
		sig += '${p.name} ${type_name}'
		if i < node.params.length - 1 {
			sig += ', '
		}
	}
	sig += ')'
	return sig
}

struct FunRedefinition {
	path string
	pos token.Pos
	name string
	signature string
}

fun (c Checker) check_redefined_functions() {
	// Note: It is assumed that there are at most a few redefined functions.
	// Thus the performance impact of looping over all files and root stmts is negligible.

	// Remove duplicates that happen in case of a tripple redefinition
	mut unique_redefs := []string
	for name in c.table.redefined_funs {
		if not unique_redefs.contains(name) {
			unique_redefs.push(name)
		}
	}

	for name in unique_redefs {
		// Collect information about redefinitions
		mut redefinitions := []FunRedefinition
		for file in c.parsed_files {
			for stmt in file.stmts {
				if stmt is ast.FunDecl and stmt.name == name {
					redefinitions.push(FunRedefinition{
						path: file.path
						pos: stmt.pos
						name: name
						signature: c.fun_signature(stmt)
					})
				}
			}
		}

		// Raise the error and show where redefinitions happened
		c.generic_error('redfinition of function "${name}"', )
		for redef in redefinitions {
			errors.notice('conflict', redef.path, redef.pos, redef.signature)
		}
	}
}
