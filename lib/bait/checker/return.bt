// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package checker

import bait.ast

fun (mut c Checker) return_stmt(mut node ast.ReturnStmt) {
	c.expected_type = c.table.unwrap_result(c.cur_fun.return_type)
	expr_type := c.expr(node.expr)

	if not c.check_types(expr_type, c.cur_fun.return_type) {
		mut msg := ''
		if c.cur_fun.return_type == ast.VOID_TYPE {
			msg = 'function ${c.cur_fun.name} does not return a value'
		} else {
			msg = 'expected return value of type ${c.table.type_name(c.cur_fun.return_type)}'
		}
		if expr_type != ast.VOID_TYPE {
			msg += ', got ${c.table.type_name(expr_type)}'
		}
		c.error(msg, node.pos)
	}

	return_sym := c.table.get_sym(c.cur_fun.return_type)
	if return_sym.kind == .result {
		expr_sym := c.table.get_sym(expr_type)
		if expr_sym.kind == .result {
			return
		}

		mut res_expr := ast.StructInit{
			name = 'Result'
		}

		if expr_type != ast.VOID_TYPE {
			res_expr.fields = [ast.StructInitField{
				name = 'data'
				expr = node.expr
			}]
		}

		node.expr = res_expr
	}
}

fun (c Checker) stmt_returns (stmt ast.Stmt) bool {
	if stmt is ast.ExprStmt {
		return stmt.typ != ast.VOID_TYPE
	}

	if stmt is ast.IfMatch {
		return c.returns
	}

	return false
}

fun has_toplevel_return(stmts []ast.Stmt) bool {
	for stmt in stmts {
		if stmt is ast.ReturnStmt or is_noreturn_call(stmt) {
			return true
		}
	}
	return false
}

fun is_noreturn_call(stmt ast.Stmt) bool {
	if stmt is ast.ExprStmt {
		if stmt.expr is ast.CallExpr {
			return (stmt.expr as ast.CallExpr).noreturn
		}
	}
	return false
}
