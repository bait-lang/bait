// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package checker

import bait.ast
import bait.token
fun (mut c Checker) assign_stmt(mut node ast.AssignStmt) {
	if node.op == .decl_assign {
		c.decl_assign(node)
		return
	}

	c.is_lhs_assign = true
	node.left_type = c.expr(node.left)
	c.is_lhs_assign = false

	c.expected_type = node.left_type
	node.right_type = c.expr(node.right)

	if node.right_type == ast.VOID_TYPE and not node.right is ast.CallExpr {
		// Another error was already raised
		return
	}

	if node.left is ast.Ident {
		left := node.left as ast.Ident
		if not left.is_mut {
			c.error('cannot assign to immutable variable "${left.name}"', left.pos)
			return
		}
	} else if node.left is ast.SelectorExpr {
		mut left := node.left as ast.SelectorExpr

		sym := c.table.get_sym(left.expr_type)
		field := sym.find_field(left.field_name, c.table)
		if (not field.is_mut or sym.pkg != c.pkg) and not field.is_global {
			c.error('field `${sym.name}.${left.field_name}` is immutable', node.pos)
			return
		}

		if left.expr is ast.Ident {
			lident := left.expr as ast.Ident
			if not lident.is_mut {
				c.error('cannot assign to field of immutable variable `${lident.name}`', node.pos)
				return
			}
		}
	}

	if not c.check_types(node.right_type, node.left_type) {
		c.error('cannot assign type ${c.table.type_name(node.right_type)} to ${c.table.type_name(node.left_type)}', node.pos)
	}
}

fun (mut c Checker) decl_assign(mut node ast.AssignStmt) {
	typ := c.expr(node.right)

	if not node.left is ast.Ident {
		c.error('cannot declare a variable with a non-identifier', node.pos)
		return
	}

	left := node.left as ast.Ident
	if c.scope.is_known(left.name) {
		c.error('redefinition of ${left.name}', node.pos)
		return
	}
	c.scope.register(left.name, ast.ScopeObject{
		kind = .variable
		typ = typ
		is_mut = left.is_mut
	})
	node.left_type = c.expr(node.left)
	node.right_type = node.left_type
}
