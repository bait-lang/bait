// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package checker

import bait.ast
import bait.token

fun (mut c Checker) decl_assign(mut node ast.AssignStmt) {
	typ := c.expr(node.right)

	if typ == ast.PLACEHOLDER_TYPE {
		// Another error was already raised
		return
	}

	if typ == ast.VOID_TYPE {
		c.error('cannot assign void to variable', node.pos)
		return
	}

	if not (node.left is ast.Ident) {
		c.error('cannot declare a variable with a non-identifier', node.pos)
		return
	}

	left := node.left as ast.Ident
	if c.scope.is_known(left.mixed_name) {
		obj := c.scope.get(left.mixed_name)
		msg := if obj.kind == .package_ {
			'cannot shadow import "${left.mixed_name}"'
		} else {
			'redefinition of ${left.mixed_name}'
		}
		c.error(msg, node.pos)
		return
	}

	c.scope.register(left.mixed_name, ast.ScopeObject{
		kind = .variable
		typ = typ
		is_mut = left.is_mut
	})
	c.expr(node.left)
	node.left_type = typ
	node.right_type = typ
}

fun (mut c Checker) assign_stmt(mut node ast.AssignStmt) {
	if node.op == .decl_assign {
		c.decl_assign(mut node)
		return
	}

	c.is_lhs_assign = true
	node.left_type = c.expr(node.left)
	c.is_lhs_assign = false

	c.expected_type = node.left_type
	node.right_type = c.expr(node.right)

	if node.left_type == ast.PLACEHOLDER_TYPE or (node.right_type == ast.VOID_TYPE and not (node.right is ast.CallExpr)) {
		// Another error was already raised
		return
	}

	if node.left is ast.Ident {
		left := node.left as ast.Ident
		if not left.is_mut {
			c.error('cannot assign to immutable variable "${left.mixed_name}"', left.pos)
			return
		}
	} else if node.left is ast.SelectorExpr {
		mut left := node.left as ast.SelectorExpr
		if not c.is_field_mutable(left) {
			return
		}

		for left.expr is ast.SelectorExpr {
			left = left.expr as ast.SelectorExpr
			if not c.is_field_mutable(left) {
				return
			}
		}

		if left.expr is ast.Ident {
			lident := left.expr as ast.Ident
			if not lident.is_mut {
				c.error('cannot assign to field of immutable variable `${lident.mixed_name}`', node.pos)
				return
			}
		}
	}

	if not c.check_types(node.right_type, node.left_type) {
		c.error('cannot assign type ${c.table.type_name(node.right_type)} to ${c.table.type_name(node.left_type)}', node.pos)
	}
}

fun (c Checker) is_field_mutable(left ast.SelectorExpr) bool {
	sym := c.table.get_sym(left.expr_type)
	field := sym.find_field(left.field_name, c.table)
	if (not field.is_mut or sym.pkg != c.pkg) and not field.is_global {
		c.error('field `${sym.name}.${left.field_name}` is immutable', left.pos)
		return false
	}
	return true
}
