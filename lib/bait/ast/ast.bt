// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package ast

import bait.token
import bait.errors

type Stmt := AssertStmt | AssignStmt | ConstDecl | EnumDecl | ExprStmt | ForLoop | ForClassicLoop | ForInLoop | FunDecl | GlobalDecl | InterfaceDecl | ReturnStmt | StructDecl | TypeDecl | LoopControlStmt | EmptyStmt | IfMatch

type Expr := AnonFun | ArrayInit | AsCast | BoolLiteral | CallExpr | CharLiteral | ComptimeVar | EnumVal | FloatLiteral | HashExpr | Ident | IfMatch | IndexExpr | InfixExpr | IntegerLiteral | MapInit | ParExpr | PrefixExpr | SelectorExpr | StringLiteral | StringInterLiteral | StructInit | TypeOf | Void | EmptyExpr

pub struct AssertStmt {
pub:
	expr Expr
	pos token.Pos
}

pub struct AssignStmt{
global:
	left_type Type
	right_type Type
pub:
	op token.Token
	left Expr
	right Expr
	pos token.Pos
}

pub struct ConstDecl{
pub:
	name string
	expr Expr
	pos token.Pos
	lang Language
global:
	typ Type
}

pub struct EnumDecl{
pub:
	lang Language
	name string
	fields []EnumField
	pos token.Pos
}

pub struct EnumField{
global:
	expr Expr
pub:
	name string
	pos token.Pos
}

pub struct ExprStmt{
pub:
	expr Expr
global:
	typ Type
}

pub struct ForLoop{
pub:
	label string
	cond Expr
	stmts []Stmt
	pos token.Pos
}

pub struct ForClassicLoop{
pub:
	label string
	init Stmt
	cond Expr
	inc Stmt
	stmts []Stmt
	pos token.Pos
}

pub struct ForInLoop{
global:
	expr_type Type
pub:
	label string
	idxvar string
	valvar Param
	expr Expr
	stmts []Stmt
	pos token.Pos
}

pub struct AnonFun{
pub:
	decl FunDecl
	typ Type
	pos token.Pos
}

pub struct FunDecl{
pub:
	is_pub bool
	lang Language
	name string
	pkg string
	params []Param
	return_type Type
	is_test bool
	attrs []Attribute
	pos token.Pos
global:
	is_method bool
	noreturn bool
	stmts []Stmt
	generic_names []string
}

pub struct Param{
pub:
	is_mut bool
	name string
	typ Type
	pos token.Pos
}

pub struct LoopControlStmt{
pub:
	kind token.Token
	label string
	pos token.Pos
}

pub struct GlobalDecl{
global:
	typ Type
pub:
	name string
	expr Expr
	pos token.Pos
}

pub struct InterfaceDecl {
pub:
	lang Language
	name string
	typ Type
	methods []FunDecl
	fields []StructField
	pos token.Pos
}

pub struct ReturnStmt{
global:
	expr Expr
pub:
	pos token.Pos
}

pub struct StructDecl{
pub:
	lang Language
	pkg_prefix string
	name string
	typ Type
	fields []StructField
	pos token.Pos
}

pub struct StructField{
pub:
	name string
	typ Type
	expr Expr := EmptyExpr{}
	pos token.Pos
	is_mut bool
	is_pub bool
	is_global bool
	attrs []Attribute
}

// SumType, Alias, Fun Type
pub struct TypeDecl {
pub:
	lang Language
	name string
	typ Type
	pos token.Pos
}

pub struct ArrayInit{
global:
	typ Type
	elem_type Type
pub:
	exprs []Expr
	length_expr Expr := EmptyExpr{}
	cap_expr Expr := EmptyExpr{}
	pos token.Pos
}

pub struct AsCast{
global:
	expr_type Type
pub:
	expr Expr
	target Type
	pos token.Pos
}

pub struct BoolLiteral{
pub:
	val bool
	pos token.Pos
}

pub struct CallExpr{
global:
	lang Language
	name string
	return_type Type
	left_type Type
	left Expr := EmptyExpr{}
	concrete_types []Type
	is_field bool
	noreturn bool
pub:
	args []CallArg
	or_block OrBlock
	is_method bool
	pkg string
	pos token.Pos
}

pub struct CallArg {
global:
	typ Type
pub:
	is_mut bool
	expr Expr
}

pub enum OrKind {
	none
	block
	prop
}

pub struct OrBlock {
pub:
	kind OrKind
	stmts []Stmt
}

pub struct CharLiteral{
pub:
	val string
	pos token.Pos
}

pub struct ComptimeVar{
pub:
	name string
	pos token.Pos
}

pub struct EnumVal {
global:
	name string
	typ Type
pub:
	val string
	pos token.Pos
}

pub struct FloatLiteral{
pub:
	val string
	pos token.Pos
}

pub struct HashExpr{
pub:
	lang Language
	val string
	pos token.Pos
}

pub struct Ident{
global:
	name string
	is_mut bool
pub:
	pkg string
	pos token.Pos
	lang Language
}

pub struct IfMatch{
global:
	typ Type := VOID_TYPE
	is_expr bool
	ct_eval_branch i32 := -1
pub:
	is_comptime bool
	is_match bool // Note: match cannot be comptime
	has_else bool
	branches []IfBranch
	pos token.Pos
}

pub struct IfBranch{
pub:
	cond Expr
	stmts []Stmt
	pos token.Pos
}

pub struct IndexExpr{
global:
	is_selector bool
	left_type Type
pub:
	left Expr
	index Expr
	pos token.Pos
}

pub struct InfixExpr{
global:
	left_type Type
	right_type Type
	op token.Token
pub:
	is_match bool
	left Expr
	right Expr
	pos token.Pos
}

pub struct IntegerLiteral{
pub:
	val string
	pos token.Pos
}

pub struct MapInit{
global:
	typ Type
	key_type Type
	val_type Type
pub:
	keys []Expr
	vals []Expr
	pos token.Pos
}

pub struct ParExpr {
pub:
	expr Expr
	pos token.Pos
}

pub struct PrefixExpr{
pub:
	op token.Token
	right Expr
	pos token.Pos
}

pub struct SelectorExpr{
global:
	expr_type Type
pub:
	expr Expr
	field_name string
	pos token.Pos
}

pub struct StringLiteral{
pub:
	lang Language
	val string
	pos token.Pos
}

pub struct StringInterLiteral{
pub:
	vals []string
	exprs []Expr
	expr_types []Type
	pos token.Pos
}

pub struct StructInit{
pub:
	typ Type
	pos token.Pos
global:
	name string
	fields []StructInitField
	concrete_types []Type
}

pub struct StructInitField{
pub:
	name string
	expr Expr
	pos token.Pos
}

pub struct TypeOf {
global:
	typ Type
pub:
	expr Expr
	pos token.Pos
}

pub struct Void {}

pub struct EmptyExpr{
pub:
	pos token.Pos
}

pub fun empty_expr() Expr {
	return EmptyExpr{}
}

pub struct EmptyStmt{
pub:
	pos token.Pos
}

pub struct Import{
pub:
	name string // Full import name
	alias string // Custom alias or the part after the last dot
	lang Language
	pos token.Pos
}

pub struct File{
global:
	infos []errors.Message
	warnings []errors.Message
	errors []errors.Message
	generic_funs []FunDecl
pub:
	path string
	pkg_name string // Full package name
	imports []Import
	stmts []Stmt
}

pub fun (fn FunDecl) is_main() bool {
	return not fn.is_method and fn.name == 'main'
}
