// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package ast

pub struct Table {
pub mut:
	global_scope Scope
	fun_decls map[string]FunDecl
	type_idxs map[string]Type
	type_symbols []TypeSymbol
	redefined_types []string
	needed_equality_funs []Type
	needed_str_funs []Type
	generic_fun_types map[string][][]Type // Array of concrete types used for each generic fun
}

pub fun new_table() Table {
	mut t := Table{
		global_scope = Scope{
			parent = 0 as any
		}
	}
	t.register_builtins()
	return t
}

pub fun (t Table) get_idx(name string) Type {
	return t.type_idxs[name]
}

pub fun (t Table) get_sym(typ Type) TypeSymbol {
	return t.type_symbols[typ.idx()]
}

pub fun (t Table) type_exists(name string) bool {
	idx := t.get_idx(name)
	if idx as i32 == 0 {
		return false
	}

	sym := t.get_sym(idx)
	return sym.kind != .placeholder
}

pub fun (t Table) unwrap_result(typ Type) Type {
	sym := t.get_sym(typ)
	return if sym.kind == .result { sym.parent } else { typ }
}

pub fun (t Table) get_final_sym(sym TypeSymbol) TypeSymbol {
	mut s := sym
	for s.kind == .alias_type {
		s = t.get_sym(s.parent)
	}
	return s
}

pub fun (t Table) unwrap_generic(sym TypeSymbol) TypeSymbol {
	if sym.kind == .generic_inst {
		return t.get_sym(sym.parent)
	}
	return sym
}

pub fun (mut t Table) register_concrete(key string, concrete []Type) bool {
	if t.generic_fun_types[key].contains(concrete) {
		return false
	}

	t.generic_fun_types[key].push(concrete)
	return true
}

pub fun (t Table) type_name(typ Type) string {
	amps := '&'.repeat(typ.get_nr_amp())
	return amps + t.get_sym(typ).name
}

pub fun (t Table) register_sym(sym TypeSymbol) Type {
	idx := t.get_idx(sym.name)
	if idx > 0 as Type {
		cur_sym := t.get_sym(idx)
		if cur_sym.kind == .placeholder {
			mut new_sym := sym
			new_sym.methods = cur_sym.methods
			t.type_symbols[idx] = new_sym
			return idx
		}

		if cur_sym.kind == .result {
			return idx
		}

		if BUILTIN_STRUCT_TYPES.contains(idx) {
			mut new_sym := sym
			new_sym.kind = cur_sym.kind
			new_sym.methods = cur_sym.methods
			t.type_symbols[idx] = new_sym
			return idx
		}
	}

	new_idx := t.type_symbols.length as Type
	t.type_symbols.push(sym)
	t.type_idxs[sym.name] = new_idx
	return new_idx
}

pub fun (t Table) find_or_register_array(elem_type Type) Type {
	elem_sym := t.get_sym(elem_type)
	name := '[]' + elem_sym.name
	idx := t.get_idx(name)
	if idx > 0 as Type {
		return idx
	}

	return t.register_sym(TypeSymbol{
		kind = .array
		name = name
		pkg = elem_sym.pkg
		parent = ARRAY_TYPE
		info = ArrayInfo{
			elem_type = elem_type
		}
	})
}

pub fun (t Table) find_or_register_map(key_type Type, val_type Type) Type {
	key_sym := t.get_sym(key_type)
	val_sym := t.get_sym(val_type)
	name := 'map[${key_sym.name}]${val_sym.name}'
	idx := t.get_idx(name)
	if idx > 0 as Type {
		return idx
	}
	return t.register_sym(TypeSymbol{
		kind = .map
		name = name
		parent = MAP_TYPE
		info = MapInfo{
			key_type = key_type
			val_type = val_type
		}
	})
}

pub fun (t Table) find_or_register_fun(param_types []Type, return_type Type) Type {
	name := 'fun_' + t.fun_type_signature(param_types, return_type)
	idx := t.get_idx(name)
	if idx > 0 as Type {
		return idx
	}
	return t.register_sym(TypeSymbol{
		kind = .fun_
		name = name
		info = FunInfo{
			param_types = param_types
			return_type = return_type
		}
	})
}

pub fun (t Table) fun_type_signature(param_types []Type, return_type Type) string {
	mut sig := ''
	for param in param_types {
		sig += t.get_sym(param).name + '_'
	}
	sig += '_' + t.get_sym(return_type).name
	return sig
}

pub fun (t Table) find_type_or_add_placeholder(name string, pkg string) Type {
	idx := t.get_idx(name)
	if idx > 0 as Type {
		return idx
	}
	return t.register_sym(TypeSymbol{
		kind = .placeholder
		name = name
		pkg = pkg
	})
}

// Get the method of a type symbol or any of its parents.
pub fun (t Table) get_method(sym TypeSymbol, name string) FunDecl {
	mut s := sym
	for true {
		for m in s.methods {
			if m.name == name {
				return m
			}
		}
		if s.parent == PLACEHOLDER_TYPE {
			break
		}
		s = t.get_sym(s.parent)
	}
	return FunDecl{}
}
