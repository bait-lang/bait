// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package ast

// Used for match branch checks
// TODO complete this or cut it down in size to what really is needed
pub fun (e Expr) repr() string {
	return match e {
		AnonFun { 'anon_fun'}
		ArrayInit { '[]XX' }
		AsCast { e.expr.repr() + ' as XX' }
		BoolLiteral { e.str() }
		CallExpr{ e.name + '()'}
		CharLiteral { e.val }
		ComptimeVar { e.kind.str() }
		EnumVal{ e.val }
		FloatLiteral { e.val }
		HashExpr { '#XX' }
		Ident { e.full_name() }
		IfMatch { 'if/match' }
		IndexExpr { e.left.repr() + '[' + e.index.repr() + ']' }
		InfixExpr { e.left.repr() + ' ' + e.op.js_repr() + ' ' + e.right.repr() }
		IntegerLiteral { e.val }
		MapInit { 'map[xx]yy'}
		ParExpr { '(' + e.expr.repr() + ')' }
		PrefixExpr { e.op.js_repr() + e.right.repr() }
		SelectorExpr { e.expr.repr() + '.' + e.field_name }
		StringLiteral { e.val }
		StringInterLiteral { 'string interpolation' }
		StructInit { e.name + '{..}'}
		TmpVar { "TmpVar" }
		TypeOf { 'typeof ' + e.expr.repr() }
		Void { 'void' }
		InvalidExpr { 'InvalidExpr' }
	}
}

pub fun (fn FunDecl) key() string {
	if fn.is_method {
		return '${fn.params[0].typ}.${fn.name}'
	}
	return fn.name
}
