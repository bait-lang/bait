// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code Form is subject to the terms of the Mozilla Public License 2.0.
package ast

pub struct Scope {
	parent Scope
	objects map[string]ScopeObject
}

pub struct ScopeObject{
	typ Type
	kind ObjectKind
	is_pub bool
	expr Expr // Only for constants. Allows resolving their type early
}

pub enum ObjectKind {
	variable
	constant
	function
	global_
}

pub fun (s Scope) register(name string, obj ScopeObject) {
	if s.objects.contains(name) {
		return
	}
	s.objects[name] = obj
}

pub fun (s Scope) get(name string) ScopeObject {
	if s.objects.contains(name) {
		return s.objects[name]
	}
	if s.parent != 0 as Scope {
		return s.parent.get(name)
	}
	return ScopeObject{
		typ: PLACEHOLDER_TYPE
	}
}

pub fun (s Scope) update_type(name string, typ Type) {
	s.objects[name].typ = typ
}

pub fun (s Scope) is_known(name string) bool {
	obj := s.get(name)
	return obj.typ != PLACEHOLDER_TYPE
}
