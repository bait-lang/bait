// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package ast

pub struct Scope {
pub:
	parent Scope
	objects map[string]ScopeObject
}

pub struct ScopeObject{
global:
	typ Type
pub mut:
	kind ObjectKind
	is_pub bool
	is_mut bool
	pkg string
	expr Expr := EmptyExpr{} // Only for constants. Allows resolving their type early
}

pub enum ObjectKind {
	unknown
	variable
	constant
	function
	global_
	package_
	label
}

pub fun (s Scope) register(name string, obj ScopeObject) {
	if s.objects.contains(name) {
		return
	}
	s.objects[name] = obj
}

pub fun (s Scope) get(name string) ScopeObject {
	if s.objects.contains(name) {
		return s.objects[name]
	}
	if s.parent != 0 as Scope {
		return s.parent.get(name)
	}
	return ScopeObject{
		kind = .unknown
	}
}

pub fun (s Scope) update_type(name string, typ Type) {
	mut obj := s.get(name)
	// FIXME `obj` should be a copy on js backend and below code not modify the original
	// obj.typ = typ
	// s.objects[name] = obj
	s.objects[name] = ScopeObject{
		typ = typ
		kind = obj.kind
		is_pub = obj.is_pub
		is_mut = obj.is_mut
		pkg = obj.pkg
	}
}

pub fun (s Scope) is_known(name string) bool {
	obj := s.get(name)
	return obj.kind != .unknown
}
