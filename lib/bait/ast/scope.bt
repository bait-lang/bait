// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package ast

pub struct Scope {
	pub parent &Scope
	pub objects map[string]ScopeObject
}

pub struct ScopeObject{
	global typ Type
	pub mut kind ObjectKind
	pub mut is_pub bool
	pub mut is_mut bool
	pub mut pkg string // TODO SCOPES remove this
	pub mut expr Expr := InvalidExpr{} // Only for constants. Allows resolving their type early
}

pub enum ObjectKind {
	unknown
	variable
	constant
	function
	package_
	label
	static_
}

pub fun (mut t Table) create_scopes(pkg_name string) &Scope {
	builtin_scope := t.get_pkg_scope("builtin", 0 as any)
	pkg_scope := t.get_pkg_scope(pkg_name, builtin_scope)
	return pkg_scope
}

pub fun (mut t Table) get_pkg_scope(pkg string, parent &Scope) &Scope {
	// Existing scope
	if t.scopes.contains(pkg) {
		return t.scopes[pkg]
	}

	// Create new scope for pkg
	s := &Scope{
		parent = parent
	}
	t.scopes[pkg] = s
	return s
}

pub fun (s Scope) register(name string, obj ScopeObject) {
	if s.objects.contains(name) {
		return
	}
	s.objects[name] = obj
}

pub fun (s Scope) get(name string) ScopeObject {
	if s.objects.contains(name) {
		return s.objects[name]
	}
	if s.parent != 0 as Scope {
		return s.parent.get(name)
	}
	return ScopeObject{
		kind = .unknown
	}
}

pub fun (s Scope) update_type(name string, typ Type) {
	mut obj := s.get(name)
	// FIXME `obj` should be a copy on js backend and below code not modify the original
	// obj.typ = typ
	// s.objects[name] = obj
	s.objects[name] = ScopeObject{
		typ = typ
		kind = obj.kind
		is_pub = obj.is_pub
		is_mut = obj.is_mut
		pkg = obj.pkg
	}
}

pub fun (s Scope) is_known(name string) bool {
	obj := s.get(name)
	return obj.kind != .unknown
}
