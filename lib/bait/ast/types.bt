// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package ast

type Type := i32

pub const PLACEHOLDER_TYPE := new_type(0)
pub const VOID_TYPE := new_type(1)
pub const I8_TYPE := new_type(2)
pub const I16_TYPE := new_type(3)
pub const I32_TYPE := new_type(4)
pub const I64_TYPE := new_type(5)
pub const U8_TYPE := new_type(6)
pub const U16_TYPE := new_type(7)
pub const U32_TYPE := new_type(8)
pub const U64_TYPE := new_type(9)
pub const F32_TYPE := new_type(10)
pub const F64_TYPE := new_type(11)
pub const BOOL_TYPE := new_type(12)
pub const STRING_TYPE := new_type(13)
pub const ARRAY_TYPE := new_type(14)
pub const MAP_TYPE := new_type(15)
pub const ANY_TYPE := new_type(16)

pub fun new_type(t i32) Type {
	return t as Type
}

pub fun (t Type) idx() i32 {
	// TODO use bitwise operations
	return (t as i32) % 65536
}

pub fun (t Type) set_nr_amp(n i32) Type {
	// TODO use bitwise operations
	return new_type(t.idx() + (n * 65536))
}

pub fun (t Type) get_nr_amp() i32 {
	// TODO use bitwise operations
	return (t as i32 - t.idx()) / 65536
}


const BUILTIN_STRUCT_TYPES := [
	STRING_TYPE,
	ARRAY_TYPE,
	MAP_TYPE
]

pub enum TypeKind {
	other
	placeholder
	number
	string
	array
	map
	interface_
	struct_
	enum_
	alias_type
	sum_type
	fun_
	generic
	generic_inst
}

pub struct TypeSymbol{
pub mut:
	name string
	kind TypeKind
	methods []FunDecl
	parent Type
	overloads map[string]FunDecl
	is_pub bool
	pkg string
global:
	info TypeInfo := EmptyInfo{}
}

pub fun (sym TypeSymbol) find_field(name string, t Table) StructField {
	if sym.info is StructInfo {
		info := sym.info as StructInfo
		for f in info.fields {
			if f.name == name {
				return f
			}
		}
	}
	if BUILTIN_STRUCT_TYPES.contains(sym.parent) {
		parent_sym := t.get_sym(sym.parent)
		return parent_sym.find_field(name, t)
	}
	return StructField{}
}

pub fun (sym TypeSymbol) has_method(name string) bool {
	for m in sym.methods {
		if m.name == name {
			return true
		}
	}
	return false
}

pub fun (t Table) register_builtins(){
	// IMPORTANT: Order of registration must match the order of the constants above
	t.register_sym(TypeSymbol{
		name = '_'
		kind = .placeholder
		is_pub = true
	})
	t.register_sym(TypeSymbol{ name = 'void' })
	t.register_num('i8')
	t.register_num('i16')
	t.register_num('i32')
	t.register_num('i64')
	t.register_num('u8')
	t.register_num('u16')
	t.register_num('u32')
	t.register_num('u64')
	t.register_sym(TypeSymbol{ name = 'f32' })
	t.register_sym(TypeSymbol{ name = 'f64' })
	t.register_sym(TypeSymbol{ name = 'bool' })
	t.register_sym(TypeSymbol{
		name = 'string'
		kind = .string
	})
	t.register_sym(TypeSymbol{
		name = 'Array'
		kind = .array
	})
	t.register_sym(TypeSymbol{
		name = 'map'
		kind = .map
	})
	t.register_sym(TypeSymbol{ name = 'any'})
}

pub fun (t Table) register_num(name string) {
	t.register_sym(TypeSymbol{
		name = name
		kind = .number
		is_pub = true
	})
}
