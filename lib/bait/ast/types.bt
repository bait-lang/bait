// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code Form is subject to the terms of the Mozilla Public License 2.0.
package ast

pub type Type := i32

pub const PLACEHOLDER_TYPE := new_type(0)
pub const VOID_TYPE := new_type(1)
pub const I8_TYPE := new_type(2)
pub const I16_TYPE := new_type(3)
pub const I32_TYPE := new_type(4)
pub const I64_TYPE := new_type(5)
pub const U8_TYPE := new_type(6)
pub const U16_TYPE := new_type(7)
pub const U32_TYPE := new_type(8)
pub const U64_TYPE := new_type(9)
pub const F32_TYPE := new_type(10)
pub const F64_TYPE := new_type(11)
pub const BOOL_TYPE := new_type(12)
pub const STRING_TYPE := new_type(13)
pub const ARRAY_TYPE := new_type(14)
pub const MAP_TYPE := new_type(15)
pub const ANY_TYPE := new_type(16)

pub fun new_type(t i32) Type {
	return t as Type
}

pub fun (t Type) str() string {
	return (t as i32).str()
}

const BUILTIN_STRUCT_TYPES := [
	STRING_TYPE,
	ARRAY_TYPE,
	MAP_TYPE
]

pub enum TypeKind {
	other
	placeholder
	string
	array
	map
	interface_
	struct_
	enum_
	alias_type
	sum_type
	fun_
}

pub struct TypeSymbol{
	name string
	kind TypeKind
	info TypeInfo
	methods []FunDecl
	parent Type
	is_pub bool
	pkg string
}

pub fun (sym TypeSymbol) find_field(name string, t Table) StructField {
	if sym.info is StructInfo {
		info := sym.info as StructInfo
		for f in info.fields {
			if f.name == name {
				return f
			}
		}
	}
	if BUILTIN_STRUCT_TYPES.contains(sym.parent) {
		parent_sym := t.get_sym(sym.parent)
		return parent_sym.find_field(name, t)
	}
	return StructField{}
}

pub fun (sym TypeSymbol) has_method(name string) bool {
	for m in sym.methods {
		if m.name == name {
			return true
		}
	}
	return false
}

pub fun (t Table) register_builtins(){
	// IMPORTANT: Order of registration must match the order of the constants above
	t.register_sym(TypeSymbol{
		name: 'placeholder'
		kind: .placeholder
	})
	t.register_sym(TypeSymbol{ name: 'void' kind: .other })
	t.register_sym(TypeSymbol{ name: 'i8' kind: .other })
	t.register_sym(TypeSymbol{ name: 'i16' kind: .other })
	t.register_sym(TypeSymbol{ name: 'i32' kind: .other })
	t.register_sym(TypeSymbol{ name: 'i64' kind: .other })
	t.register_sym(TypeSymbol{ name: 'u8' kind: .other })
	t.register_sym(TypeSymbol{ name: 'u16' kind: .other })
	t.register_sym(TypeSymbol{ name: 'u32' kind: .other })
	t.register_sym(TypeSymbol{ name: 'u64' kind: .other })
	t.register_sym(TypeSymbol{ name: 'f32' kind: .other })
	t.register_sym(TypeSymbol{ name: 'f64' kind: .other })
	t.register_sym(TypeSymbol{ name: 'bool' kind: .other })
	t.register_sym(TypeSymbol{
		name: 'string'
		kind: .string
	})
	t.register_sym(TypeSymbol{
		name: 'array'
		kind: .array
	})
	t.register_sym(TypeSymbol{
		name: 'map'
		kind: .map
	})
	t.register_sym(TypeSymbol{ name: 'any' kind: .other })
}
