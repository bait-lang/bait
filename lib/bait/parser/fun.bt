// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package parser

import bait.ast

fun (mut p Parser) fun_decl() !ast.FunDecl{
	pos := p.pos
	is_pub := p.check_pub()
	p.check(.key_fun)!

	mut lang := ast.Language.bait
	mut is_method := false
	mut params := []ast.Param

	// Method receiver
	if p.tok == .lpar {
		is_method = true
		p.next()

		mut is_mut := false
		if p.tok == .key_mut {
			is_mut = true
			p.next()
		}

		// Pass mutable receiver as pointer
		rec_name := p.check_name()!
		lang = p.parse_lang()!

		mut rec_type := if lang == .bait { p.parse_type()! } else { p.parse_name_type(lang)! }
		if is_mut {
			rec_type = rec_type.set_nr_amp(1)
		}

		params.push(ast.Param{
			is_mut = is_mut
			name = rec_name
			typ = rec_type
		})
		p.check(.rpar)!
	}

	mut name := ''
	if p.tok == .hash {
		// language
		lang = p.parse_lang()!
		name = lang.prepend_to(name)

		// foreign package
		if lang == .js and p.peek() == .dot {
			name += p.check_name()! + '.'
			p.check(.dot)!
		}
	}

	// normal function name
	name += p.check_name()!
	is_test := name.starts_with('test_')
	if not is_method and lang == .bait {
		name = p.prepend_pkg(name)
	}

	// Generics
	generic_names := p.generic_type_names()!

	// Params
	p.check(.lpar)!
	params.push_many(p.fun_params()!)
	p.check(.rpar)!

	mut return_type := ast.VOID_TYPE
	if p.tok != .lcur and pos.line == p.pos.line {
		return_type = p.parse_type()!
	}

	mut node := ast.FunDecl{
		is_test = is_test
		is_pub = is_pub
		name = name
		pkg = p.pkg_name
		generic_names = generic_names
		params = params
		return_type = return_type
		noreturn = p.attributes.has('noreturn')
		attrs = p.attributes
		lang = lang
		pos = pos
	}
	p.attributes = []ast.Attribute

	if is_method {
		sym := p.table.get_sym(params[0].typ)
		// TODO move this error into checker
		if lang == .bait and sym.has_method(name) {
			p.error('Method "${name}" already exists on type "${sym.name}"')!
		}
		sym.methods.push(node)
	} else {
		p.table.fun_decls[name] = node
		mut param_types := []ast.Type
		for param in params {
			param_types.push(param.typ)
		}
		typ := p.table.find_or_register_fun(param_types, return_type, false)
	}

	if lang == .bait {
		node.stmts = p.parse_block()!
	}

	node.is_method = is_method
	return node
}

fun (mut p Parser) anon_fun() !ast.AnonFun{
	pos := p.pos
	p.check(.key_fun)!
	p.check(.lpar)!
	params := p.fun_params()!
	p.check(.rpar)!
	mut return_type := ast.VOID_TYPE
	if p.tok != .lcur {
		return_type = p.parse_type()!
	}
	mut param_types := []ast.Type
	for param in params {
		param_types.push(param.typ)
	}
	typ := p.table.find_or_register_fun(param_types, return_type, true)
	stmts := p.parse_block()!
	return ast.AnonFun{
		decl = ast.FunDecl{
			name = '_anon_${p.file_hash}_${p.lexer.offset()}'
			params = params
			return_type = return_type
			stmts = stmts
		}
		typ = typ
		pos = pos
	}
}

fun (mut p Parser) fun_params() ![]ast.Param{
	mut params := []ast.Param
	for p.tok != .rpar{
		pos := p.pos
		mut is_mut := false
		if p.tok == .key_mut {
			is_mut = true
			p.next()
		}
		param := ast.Param{
			is_mut = is_mut
			name = p.check_name()!
			typ = p.parse_type()!
			pos = pos
		}
		params.push(param)
		if p.tok != .rpar{
			p.check(.comma)!
		}
	}
	return params
}

fun (mut p Parser) fun_call(lang ast.Language) !ast.CallExpr{
	pos := p.pos
	name := p.prepend_expr_pkg(p.check_name()!)
	p.check(.lpar)!
	args := p.call_args()!
	p.check(.rpar)!

	or_block := p.or_block()!

	return ast.CallExpr{
		name = name
		args = args
		or_block = or_block
		pkg = p.pkg_name
		pos = pos
		lang = lang
	}
}

fun (mut p Parser) method_call(left ast.Expr) !ast.CallExpr {
	pos := p.pos
	name := p.check_name()!
	p.check(.lpar)!
	args := p.call_args()!
	p.check(.rpar)!

	or_block := p.or_block()!

	return ast.CallExpr{
		is_method = true
		left = left
		name = name
		args = args
		or_block = or_block
		pos = pos
	}
}

fun (mut p Parser) call_args() ![]ast.CallArg {
	mut args := []ast.CallArg
	for p.tok != .rpar {
		is_mut := p.tok == .key_mut
		args.push(ast.CallArg{
			is_mut = is_mut // FIXME: gen mixes up order of code here and puts result before
			expr = p.expr(.lowest)!
		})
		if p.tok != .rpar {
			if p.tok == .eof {
				break
			}
			p.check(.comma)!
		}
	}
	return args
}

fun (mut p Parser) or_block() !ast.OrBlock {
	// Propagation
	if p.tok == .excl {
		p.next()
		return ast.OrBlock{
			kind = .prop
		}
	}

	// Block `or {`
	if p.tok == .key_or and p.peek() == .lcur {
		p.next()
		stmts := p.parse_block()!

		return ast.OrBlock {
			kind = .block
			stmts = stmts
		}
	}

	// No block
	return ast.OrBlock{
		kind = .none
	}
}
