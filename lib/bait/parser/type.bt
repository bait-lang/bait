// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package parser

import bait.ast
import bait.token

fun (mut p Parser) parse_type() !ast.Type {
	// Result type
	if p.tok == .excl {
		p.next()
		if p.tok == .lcur {
			return p.table.register_sym(ast.TypeSymbol{
				kind = .result
				name = 'Result[void]'
				parent = ast.VOID_TYPE
			})
		}

		typ := p.parse_type()!
		tsym := p.table.get_sym(typ)
		return p.table.register_sym(ast.TypeSymbol{
			kind = .result
			name = 'Result[' + tsym.name + ']'
			parent = typ
		})
	}

	// Pointers
	mut nr_amp := 0
	for p.tok == .amp{
		p.next()
		nr_amp += 1
	}

	// Array type
	if p.tok == .lsqr{
		p.next()
		p.check(.rsqr)!
		elem_type := p.parse_type()!
		return p.table.find_or_register_array(elem_type)
	}

	// Function type
	if p.tok == .key_fun {
		return p.parse_fun_type()!
	}

	// Map type
	if p.val == 'map' {
		p.next()
		return p.parse_map_type()!
	}

	// Return placeholder or get name. Used for typeless array inits where type is known
	if p.tok == .semicolon {
		p.next()
		return ast.PLACEHOLDER_TYPE
	}

	lang := p.parse_lang()!
	mut typ := p.parse_name_type(lang)!
	if nr_amp > 0 {
		typ = typ.set_nr_amp(nr_amp)
	}
	return typ
}

fun (mut p Parser) parse_name_type(lang ast.Language) !ast.Type {
	if p.tok != .name {
		return ast.PLACEHOLDER_TYPE
	}

	mut name := lang.prepend_to(p.check_name()!)

	// Build full name and handle imported types
	if p.tok == .dot {
		if lang == .js {
			p.next()
			name += '.' + p.check_name()!
		} else {
			pkg := p.import_aliases[name]
			p.next()
			name = pkg + '.' + p.check_name()!
		}

	} else if p.expr_pkg.length > 0 {
		name = p.prepend_expr_pkg(name)
	} else if not name.contains('.') and not p.table.type_idxs.contains(name) {
		name = p.prepend_pkg(name)
	}

	// Primitive types
	return match name{
		'i8' { ast.I8_TYPE }
		'i16' { ast.I16_TYPE }
		'i32' { ast.I32_TYPE }
		'i64' { ast.I64_TYPE }
		'u8' { ast.U8_TYPE }
		'u16' { ast.U16_TYPE }
		'u32' { ast.U32_TYPE }
		'u64' { ast.U64_TYPE }
		'f32' { ast.F32_TYPE }
		'f64' { ast.F64_TYPE }
		'bool' { ast.BOOL_TYPE }
		'string' { ast.STRING_TYPE }
		'any' { ast.ANY_TYPE }
		else { p.table.find_type_or_add_placeholder(name, p.pkg_name) }
	}
}

fun (mut p Parser) parse_fun_type() !ast.Type {
	p.next()
	p.check(.lpar)!
	mut param_types := []ast.Type
	for p.tok != .rpar{
		typ := p.parse_type()!
		param_types.push(typ)
		if p.tok != .rpar{
			p.check(.comma)!
		}
	}
	par_line := p.pos.line
	p.check(.rpar)!
	mut return_type := ast.VOID_TYPE
	if p.pos.line == par_line {
		return_type = p.parse_type()!
	}
	return p.table.find_or_register_fun(param_types, return_type, true)
}

fun (mut p Parser) parse_map_type() !ast.Type {
	if p.tok == .rpar and p.pkg_name == 'builtin' {
		return ast.MAP_TYPE
	}
	p.check(.lsqr)!
	key_type := p.parse_type()!
	if key_type != ast.STRING_TYPE {
		p.error('map key type must be string')!
	}
	p.check(.rsqr)!
	val_type := p.parse_type()!
	return p.table.find_or_register_map(key_type, val_type)
}

fun (mut p Parser) generic_type_names() ![]string {
	if p.tok != .lsqr {
		return []
	}
	p.next()

	mut names := []string
	for true {
		name := p.check_name()!
		if name.length > 1 {
			p.error('generic types names have to be exactly one character')!
		}
		if not name[0].is_upper() {
			p.error('generic type names have to be capital letters')!
		}
		names.push(name)

		idx := p.table.get_idx(name)
		if idx == 0 {
			_ = p.table.register_sym(ast.TypeSymbol{
				name = name
				kind = .generic
				is_pub = true
			})
		}

		if p.tok == .rsqr {
			break
		}
		p.check(.comma)!
	}
	p.next()
	return names
}

fun (mut p Parser) concrete_types() ![]ast.Type {
	if p.tok != .lsqr {
		return []
	}
	p.next()

	mut types := []ast.Type
	for p.tok != .rsqr {
		types.push(p.parse_type()!)
		if p.tok != .rsqr {
			p.check(.comma) !
		}
	}
	p.next()
	return types
}
