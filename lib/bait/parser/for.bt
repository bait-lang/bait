// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package parser

import bait.ast

fun (mut p Parser) for_loop(label string)ast.Stmt{
	pos := p.tok.pos
	p.next()

	if p.next_tok.kind == .decl_assign {
		return p.for_classic_loop(label, pos)
	}

	if p.next_tok.kind == .key_in or p.next_tok.kind == .comma or p.tok.kind == .key_mut {
		return p.for_in_loop(label, pos)
	}

	p.is_struct_possible = false
	cond := p.expr(.lowest)
	p.is_struct_possible = true

	stmts := p.parse_block()

	return ast.ForLoop{
		label = label
		cond = cond
		stmts = stmts
		pos = pos
	}
}

fun (mut p Parser) for_classic_loop(label string, pos token.Pos) ast.ForClassicLoop {
	p.is_for_init = true
	init := p.assign_stmt()
	p.is_for_init = false
	p.check(.semicolon)
	cond := p.expr(.lowest)
	p.check(.semicolon)
	inc := p.stmt()

	stmts := p.parse_block()

	return ast.ForClassicLoop{
		label = label
		init = init
		cond = cond
		inc = inc
		stmts = stmts
		pos = pos
	}
}

fun (mut p Parser) for_in_loop(label string, pos token.Pos) ast.ForInLoop {
	mut idxvar := ''
	if p.next_tok.kind == .comma {
		idxvar = p.check_name()
		p.next()
	}

	mut is_mut := false
	if p.tok.kind == .key_mut {
		is_mut = true
		p.next()
	}
	mut valvar := ast.Param{
		pos = p.tok.pos
		name = p.check_name()
		is_mut = is_mut
	}

	p.check(.key_in)
	p.is_struct_possible = false
	expr := p.expr(.lowest)
	p.is_struct_possible = true

	stmts := p.parse_block()

	return ast.ForInLoop{
		label = label
		idxvar = idxvar
		valvar = valvar
		expr = expr
		stmts = stmts
		pos = pos
	}
}
