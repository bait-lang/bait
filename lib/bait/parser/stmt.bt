// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package parser

import bait.ast
import bait.token

fun (mut p Parser) toplevel_stmt() !ast.Stmt {
	return match p.tok {
		.key_pub{ p.pub_stmt()! }
		.hash { p.expr_stmt()! }
		.key_const{ p.const_decl()! }
		.key_enum{ p.enum_decl()! }
		.key_fun{ p.fun_decl()! }
		.key_interface{ p.interface_decl()! }
		.key_static { p.static_decl()! }
		.key_struct{ p.struct_decl()! }
		.key_type{ p.type_decl()! }
		else { p.script_mode_or_error()! }
	}
}

fun (mut p Parser) pub_stmt() !ast.Stmt {
	return match p.peek() {
		.key_const{ p.const_decl()! }
		.key_enum{ p.enum_decl()! }
		.key_fun{ p.fun_decl()! }
		.key_interface{ p.interface_decl()! }
		.key_struct{ p.struct_decl()! }
		else{
			p.error('cannot use pub keyword before ${p.peek()}')!
			ast.InvalidStmt{}
		}
	}
}

fun (mut p Parser) script_mode_or_error() !ast.Stmt {
	if p.pkg_name == 'main' {
		return p.script_mode_main()!
	}

	p.error('bad toplevel token: kind = ${p.tok}, val = ${p.val}')!
	return ast.InvalidStmt{}
}

fun (mut p Parser) script_mode_main() !ast.FunDecl {
	if not p.pref.is_script {
		p.warn('declare the main function or use the --script option')
	}

	mut stmts := []ast.Stmt
	for p.tok != .eof {
		stmts.push(p.stmt()!)
	}

	mut node := ast.FunDecl{
		name = 'main'
		return_type = ast.VOID_TYPE
	}
	p.table.fun_decls['main'] = node
	node.stmts = stmts
	return node
}

fun (mut p Parser) stmt() !ast.Stmt {
	return match p.tok {
		.name { p.stmt_with_name()! }
		.key_assert { p.assert_stmt()! }
		.key_break, .key_continue { p.loop_control_stmt()! }
		.key_for { p.for_loop('')! }
		.key_if { p.if_match(false)! }
		.key_match { p.match_as_if_expr(false)! }
		.key_mut { p.assign_stmt()! }
		.key_return { p.return_stmt()! }
		else{ p.expr_stmt()! }
	}
}

fun (mut p Parser) stmt_with_name() !ast.Stmt{
	// Loop label
	if p.peek() == .colon {
		label := p.val
		p.next()
		p.next()
		return p.for_loop(label)!
	}

	left := p.expr(.lowest)!
	if p.tok.is_assign() {
		return p.partial_assign_stmt(left)!
	}

	return ast.ExprStmt{expr = left}
}

fun (mut p Parser) assert_stmt() !ast.AssertStmt{
	p.next()
	pos := p.pos
	expr := p.expr(.lowest)!
	return ast.AssertStmt{
		expr = expr
		pos = pos
	}
}

fun (mut p Parser) assign_stmt() !ast.AssignStmt {
	left := p.expr(.lowest)!
	return p.partial_assign_stmt(left)!
}

fun (mut p Parser) partial_assign_stmt(left ast.Expr) !ast.AssignStmt {
	mut op := p.tok
	p.next()
	mut right := p.expr(.lowest)!

	return ast.AssignStmt{
		op = op
		left = left
		right = right
		pos = (left as ast.InvalidExpr).pos
	}
}

fun (mut p Parser) const_decl() !ast.ConstDecl{
	pos := p.pos
	is_pub := p.check_pub()
	p.next()

	lang := p.parse_lang()!
	mut name := ''

	// foreign package, e.g. `#JS.process.argv`
	if lang == .js and p.peek() == .dot {
		name = p.check_name()! + '.'
		p.next()
	}

	// actual const name
	name += p.check_name()!

	p.check(.decl_assign)!

	if lang != .bait {
		typ := p.parse_type()!

		// TODO SCOPES consider not prepending lang. Requires changes to p.hash_expr: do not set expr_pkg and all other FFI constructs
		p.table.ffi_scope.register(lang.prepend_to(name), ast.ScopeObject{
			kind = .constant
			typ = typ
			is_pub = true // TODO rethink ffi pub behaviour (pub by default + warn on pub keyword OR require pub keyword)
		})

		return ast.ConstDecl{
			name = name
			typ = typ
			pos = pos
			lang = lang
		}
	}

	expr := p.expr(.lowest)!

	// FIXME: gen of nested or blocks; use register_unique afterwards (also static)
	// TODO show all places of definition
	if p.pkg_scope.is_known(name) {
		p.error('redefinition of ${name}')!
	}
	p.pkg_scope.register(name, ast.ScopeObject{
		kind = .constant
		pkg = p.pkg_name
		is_pub = is_pub
		expr = expr
		typ = ast.VOID_TYPE
	})

	return ast.ConstDecl{
		name = name
		expr = expr
		pos = pos
		lang = lang
	}
}

fun (mut p Parser) loop_control_stmt() !ast.LoopControlStmt{
	pos := p.pos
	kind := p.tok
	p.next()

	label := if p.tok == .semicolon { '' } else { p.check_name()! }
	p.skip(.semicolon)

	return ast.LoopControlStmt{
		kind = kind
		label = label
		pos = pos
	}
}

fun (mut p Parser) expr_stmt() !ast.ExprStmt{
	expr := p.expr(.lowest)!
	return ast.ExprStmt{
		expr = expr
	}
}

fun (mut p Parser) enum_decl() !ast.EnumDecl{
	pos := p.pos
	is_pub := p.check_pub()
	p.next()

	lang := p.parse_lang()!
	mut name := p.check_name()!
	name = if lang == .bait { p.prepend_pkg(name) } else { lang.prepend_to(name) }

	p.check(.lcur)!
	mut variants := []string
	mut fields := []ast.EnumField
	for p.tok != .rcur {
		fpos := p.pos
		fname := p.check_name()!
		mut expr := ast.InvalidExpr{} as ast.Expr
		if p.tok == .decl_assign {
			p.next()

			expr = p.expr(.lowest)!
		}
		variants.push(fname)
		fields.push(ast.EnumField{
			name = fname
			expr = expr
			pos = fpos
		})
	}
	p.check(.rcur)!

	if p.table.type_exists(name) {
		p.table.redefined_types.push(name)
	}

	p.table.register_sym(ast.TypeSymbol{
		name = name
		is_pub = is_pub
		pkg = p.pkg_name
		kind = .enum_
		info = ast.EnumInfo{
			vals = variants
		}
	})

	return ast.EnumDecl{
		lang = lang
		name = name
		fields = fields
		pos = pos
	}
}

fun (mut p Parser) static_decl() !ast.StaticDecl{
	pos := p.pos
	p.check(.key_static)!
	name := p.check_name()!
	p.check(.decl_assign)!
	expr := p.expr(.lowest)!

	// FIXME: gen of nested or blocks; use register_unique afterwards (also const)
	// TODO show all places of definition
	if p.pkg_scope.is_known(name) {
		p.error('redefinition of ${name}')!
	}
	p.pkg_scope.register(name, ast.ScopeObject{
		kind = .static_
		is_mut = true
		expr = expr
		typ = ast.VOID_TYPE
	})

	return ast.StaticDecl{
		name = name
		expr = expr
		pos = pos
	}
}

fun (mut p Parser) interface_decl() !ast.InterfaceDecl{
	pos := p.pos
	is_pub := p.check_pub()
	p.check(.key_interface)!
	lang := p.parse_lang()!
	mut name := lang.prepend_to(p.check_name()!)
	if lang != .bait and p.tok == .dot {
		name += '.'
		p.next()
		name += p.check_name()!
	}

	if p.table.type_exists(name) {
		p.table.redefined_types.push(name)
	}

	// TODO investigate why registration of the sym after loop with methods as struct field does not work
	mut tsym := ast.TypeSymbol{
		kind = .interface_
		name = name
		is_pub = is_pub
		pkg = p.pkg_name
	}
	typ := p.table.register_sym(tsym)

	mut methods := []ast.FunDecl
	mut fields := []ast.StructField

	p.check(.lcur)!
	for p.tok != .rcur {
		f_is_pub := p.tok == .key_pub
		if f_is_pub {
			p.next()
		}
		f_is_mut := p.tok == .key_mut
		if f_is_mut {
			p.next()
		}
		f_is_global := p.tok == .key_global
		if f_is_global {
			if f_is_pub or f_is_mut {
				p.error('unexpected `global`')!
			}
			p.next()
		}

		fname := p.check_name()!
		if p.tok == .lpar {
			m := p.interface_method(fname, typ)!
			methods.push(m)
			tsym.methods.push(m)
			continue
		}

		fields.push(ast.StructField{
			name = fname
			typ = p.parse_type()!
			is_mut = f_is_mut or f_is_global
			is_pub = f_is_pub or f_is_global
			is_global = f_is_global
		})
	}
	p.next()

	tsym.info = ast.StructInfo {
		fields = fields
	}

	return ast.InterfaceDecl{
		lang = lang
		name = name
		typ = typ
		methods = methods
		fields = fields
		pos = pos
	}
}

fun (mut p Parser) interface_method(name string, rec_type ast.Type) !ast.FunDecl {
	p.check(.lpar)!
	// The first param is a fictional receiver in this case
	mut params := [ast.Param{
		name = '_'
		typ = rec_type
	}]
	params.push_many(p.fun_params()!)
	par_line := p.pos.line
	p.check(.rpar)!
	mut return_type := ast.VOID_TYPE
	if p.pos.line == par_line {
		return_type = p.parse_type()!
	}
	return ast.FunDecl{
		lang = .js
		name = name
		params = params
		return_type = return_type
		is_pub = true
		is_method = true
	}
}

fun (mut p Parser) return_stmt() !ast.ReturnStmt{
	pos := p.pos
	p.check(.key_return)!
	mut expr := ast.Void{} as ast.Expr
	if p.tok != .semicolon {
		expr = p.expr(.lowest)!
	}
	p.skip(.semicolon)
	return ast.ReturnStmt{
		expr = expr
		pos = pos
	}
}

fun (mut p Parser) type_decl() !ast.TypeDecl {
	pos := p.pos
	is_pub := p.check_pub()
	p.next()

	lang := p.parse_lang()!
	mut name := p.check_name()!
	if lang == .bait {
		name = p.prepend_pkg(name)
	} else {
		name = lang.prepend_to(name)
	}

	// Note: exception for builtin due to C backend type declarations
	if p.table.type_exists(name) and p.pkg_name != 'builtin' {
		p.table.redefined_types.push(name)
	}

	p.check(.decl_assign)!
	is_fun_type := p.tok == .key_fun
	mut variants := []ast.Type
	variants.push(p.parse_type()!)

	// Function type
	if is_fun_type {
		sym := p.table.get_sym(variants[0])
		typ := p.table.register_sym(ast.TypeSymbol{
			kind = .fun_
			name = name
			is_pub = is_pub
			pkg = p.pkg_name
			info = sym.info
		})
		return ast.TypeDecl{
			lang = lang
			name = name
			typ = typ
			pos = pos
		}
	}

	// Alias type
	if p.tok != .pipe {
		typ := p.table.register_sym(ast.TypeSymbol{
			kind = .alias_type
			name = name
			parent = variants[0]
			is_pub = is_pub
			pkg = p.pkg_name
		})
		return ast.TypeDecl{
			lang = lang
			name = name
			typ = typ
			pos = pos
		}
	}

	// Sum type
	for p.tok == .pipe {
		p.next()
		variants.push(p.parse_type()!)
	}
	typ := p.table.register_sym(ast.TypeSymbol{
		kind = .sum_type
		name = name
		is_pub = is_pub
		pkg = p.pkg_name
		info = ast.SumTypeInfo{
			variants = variants
		}
	})
	return ast.TypeDecl{
		lang = lang
		name = name
		typ = typ
		pos = pos
	}
}
