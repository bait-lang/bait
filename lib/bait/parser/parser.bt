// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package parser

import bait.preference
import bait.errors
import bait.ast
import bait.lexer
import bait.token

pub struct Parser {
	pref preference.Prefs
mut:
	path string // File path with slashes normalized to `/`
	eofs i32
	tok token.Token
	next_tok token.Token
	val string
	pos token.Pos
	expected_pkg string
	pkg_name string
	import_aliases map[string]string
	attributes []ast.Attribute
	expr_pkg string
	is_for_init bool
	is_struct_possible bool
pub mut:
	table ast.Table
	lexer lexer.Lexer
	infos []errors.Message
	warnings []errors.Message
	error errors.Message
}

pub fun new(table ast.Table, pref preference.Prefs) Parser {
	return Parser{
		table = table
		pref = pref
	}
}

pub fun (mut p Parser) init(text string, path string, expected_pkg string) {
	p.lexer.init(text, .discard)
	p.path = path.replace('\\', '/')
	p.expected_pkg = expected_pkg
	p.eofs = 0
	p.import_aliases = map[string]string
	p.expr_pkg = ''
	p.is_for_init = false
	p.is_struct_possible = true
	p.infos = []
	p.warnings = []
	p.next()
}

pub fun (mut p Parser) parse() ast.File {
	return p.parse_result() or {
		p.file_error()
	}
}

pub fun (mut p Parser) parse_result() !ast.File {
	p.parse_attributes()!
	p.pkg_name = p.package_decl()!

	// Package name did not match, stop parsing
	if p.pkg_name.length == 0 {
		return ast.File{
			infos = p.infos
		}
	}

	// Do not parse assert.bt outside of tests
	if not p.pref.is_test and p.pkg_name == 'builtin' and p.path.ends_with('assert.bt') {
		return ast.File{
			path = p.path
		}
	}

	imports := p.import_stmts()!

	mut stmts := []ast.Stmt
	for p.tok != .eof {
		p.parse_attributes()!
		ts := p.toplevel_stmt()!
		stmts.push(ts)
	}

	return ast.File{
		path = p.path
		pkg_name = p.pkg_name
		imports = imports
		stmts = stmts
		infos = p.infos
		warnings = p.warnings
	}
}

fun (mut p Parser) package_decl() !string {
	// Implicit main package
	if p.tok != .key_package {
		return 'main'
	}

	// Package declaration
	p.next()
	name := p.check_name()!

	p.attributes = []

	if p.expected_pkg.length == 0 {
		return name
	}

	// Validate that this files package matches the desired import
	if not p.expected_pkg.ends_with(name) {
		if p.attributes.has('silent_mismatch') {
			return ''
		}

		p.info('skipped due to package mismatch: expected `${p.expected_pkg}`, got `${name}`.\nUse `@silent_mismatch` to suppress this info.')
		return ''
	}

	return p.expected_pkg
}

// Parses one or more attributes
fun (mut p Parser) parse_attributes() ! {
	for p.tok == .attr {
		pos := p.pos
		name := p.val
		p.next()

		mut value := ''
		if p.tok == .lpar {
			p.next()
			value = p.val
			p.check(.string)!
			p.check(.rpar)!
		}

		p.attributes.push(ast.Attribute{
			name = name
			value = value
			pos = pos
		})
	}
}

fun (mut p Parser) parse_block() ![]ast.Stmt {
	p.check(.lcur)!
	mut bstmts := []ast.Stmt
	for not [token.Token.eof, .rcur].contains(p.tok) {
		bstmts.push(p.stmt()!)
	}
	p.check(.rcur)!
	return bstmts
}

fun (mut p Parser) skip(tok token.Token) {
	if p.tok == tok {
		p.next()
	}
}

fun (mut p Parser) check (expected token.Token) ! {
	if p.tok != expected {
		p.error('unexpected ${p.tok}, expecting ${expected}')!
	}
	p.next()
}

fun (mut p Parser) check_name() !string {
	val := p.val
	p.check(.name)!
	return val
}

fun (mut p Parser) check_pub() bool {
	if p.tok == .key_pub {
		p.next()
		return true
	}
	return false
}

fun (mut p Parser) parse_lang() !ast.Language {
	if p.tok != .hash {
		return .bait
	}
	lang := ast.prefix_to_lang(p.val)
	p.next()
	p.check(.dot)!
	return lang
}

fun (p Parser) prepend_pkg(val string) string {
	if p.pkg_name == 'builtin' or p.pkg_name == 'main' or p.pkg_name.length == 0{
		return val
	}
	return p.pkg_name + '.' + val
}

fun (mut p Parser) prepend_expr_pkg(val string) string {
	if p.expr_pkg.length == 0 or p.expr_pkg == p.pkg_name {
		return val
	}
	res := p.expr_pkg + '.' + val
	p.expr_pkg = ''
	return res
}

fun (mut p Parser) next() {
	if p.next_tok == .error {
		p.tok = p.lexer.next()
	} else {
		p.tok = p.next_tok
		p.next_tok = .error
	}

	p.val = p.lexer.val
	p.pos = p.lexer.get_pos()
}

fun (mut p Parser) peek() token.Token {
	if p.next_tok == .error {
		p.next_tok = p.lexer.next()
	}
	return p.next_tok
}

fun (p Parser) file_error() ast.File {
	return ast.File{
		path = p.path
		infos = p.infos
		warnings = p.warnings
		errors = [p.error]
	}
}

fun (mut p Parser) info(msg string) {
	p.infos.push(errors.Message{
		kind = .info
		path = p.path
		pos = p.pos
		title = 'info'
		msg = msg
	})
}

fun (mut p Parser) warn(msg string) {
	p.warnings.push(errors.Message{
		kind = .warning
		path = p.path
		pos = p.pos
		title = 'warning'
		msg = msg
	})
}

fun (mut p Parser) error(msg string) ! {
	p.error = errors.Message{
		kind = .error
		path = p.path
		pos = p.pos
		title = 'error'
		msg = msg
	}
	return error('')
}
