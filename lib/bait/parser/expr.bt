// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package parser

import bait.ast
import bait.token

fun (mut p Parser) expr(precedence token.Precedence) ast.Expr {
	mut node := p.single_expr()
	for precedence < p.tok.precedence() {
		if p.tok.kind == .dot {
			node = p.dot_expr(node)
		} else if p.tok.kind == .lbr {
			node = p.index_expr(node)
		} else if p.tok.kind == .key_as {
			node = p.as_cast(node)
		} else if p.tok.kind.is_infix() {
			node = p.infix_expr(node)
		} else {
			return node
		}
	}
	return node
}

fun (mut p Parser) single_expr() ast.Expr {
	match p.tok.kind {
		.hash {
			return p.hash_expr()
		}
		.char {
			return p.char_literal()
		}
		.dollar {
			return p.comp_time_var()
		}
		.dot {
			return p.enum_val(false)
		}
		.lbr {
			return p.array_init()
		}
		.lpar {
			return p.par_expr()
		}
		.name {
			return p.name_expr(.bait)
		}
		.number {
			return p.number_literal()
		}
		.string {
			return p.string_literal()
		}
		.key_fun {
			return p.anon_fun()
		}
		.key_false, .key_true {
			return p.bool_literal()
		}
		.key_if {
			return p.if_expr()
		}
		.key_match {
			return p.match_expr()
		}
		.key_mut {
			return p.ident(.bait)
		}
		.key_not, .minus, .caret {
			return p.prefix_expr()
		}
		.key_typeof {
			return p.typeof_expr()
		}
		.eof {
			p.should_abort = true
			return ast.EmptyExpr{} as ast.Expr
		}
		else {
			mut msg := 'invalid expression: kind = ${p.tok.kind}'
			if p.tok.val.length > 0 {
				msg += ', val = ${p.tok.val}'
			}
			p.error(msg)
			return ast.EmptyExpr{} as ast.Expr
		}
	}
}

fun (mut p Parser) expr_list() []ast.Expr{
	mut exprs := []ast.Expr
	for true {
		exprs.push(p.expr(.lowest))
		if p.tok.kind != .comma {
			break
		}
		p.check(.comma)
	}
	return exprs
}

fun (mut p Parser) array_init()ast.ArrayInit{
	pos := p.tok.pos
	p.check(.lbr)

	// Type init, e.g. `[]i32`
	if p.tok.kind == .rbr {
		p.next()
		elem_type := p.parse_type()
		typ := p.table.find_or_register_array(elem_type)

		// Optional parameters, e.g. `[]i32{ length = 10 cap = 20 }`
		mut length_expr := ast.EmptyExpr{} as ast.Expr
		mut cap_expr := ast.EmptyExpr{} as ast.Expr
		if p.tok.kind == .lcur {
			p.next()
			for p.tok.kind != .rcur {
				key := p.check_name()
				p.check(.assign)
				expr := p.expr(.lowest)

				if key == 'length' {
					length_expr = expr
				} else if key == 'cap' {
					cap_expr = expr
				} else {
					p.error('invalid array init field: ${key}')
				}
			}
			p.check(.rcur)
		}

		return ast.ArrayInit{
			typ = typ
			elem_type = elem_type
			length_expr = length_expr
			cap_expr = cap_expr
			pos = pos
		}
	}

	// Expressions init, e.g. `[1, 2, 3]`
	mut exprs := []ast.Expr
	for p.tok.kind != .rbr {
		exprs.push(p.expr(.lowest))
		if p.tok.kind == .comma {
			p.next()
		}
	}
	p.check(.rbr)
	return ast.ArrayInit{
		exprs = exprs
		pos = pos
	}
}

fun (mut p Parser) as_cast(left ast.Expr) ast.AsCast {
	pos := p.tok.pos
	p.check(.key_as)
	target := p.parse_type()
	return ast.AsCast{
		target = target
		expr = left
		pos = pos
	}
}

fun (mut p Parser) bool_literal()ast.BoolLiteral{
	pos := p.tok.pos
	val := p.tok.kind == .key_true
	p.next()
	return ast.BoolLiteral{
		val = val
		pos = pos
	}
}

fun (mut p Parser) char_literal()ast.CharLiteral{
	pos := p.tok.pos
	p.next()
	return ast.CharLiteral{
		val = p.prev_tok.val
		pos = pos
	}
}

fun (mut p Parser) comp_time_var() ast.CompTimeVar{
	pos := p.tok.pos
	p.next()
	name := p.check_name()
	return ast.CompTimeVar{
		name = name
		pos = pos
	}
}

fun (mut p Parser) dot_expr(left ast.Expr) ast.Expr {
	pos := p.tok.pos
	p.check(.dot)
	if p.next_tok.kind == .lpar {
		return p.method_call(left)
	}

	name := p.check_name()
	return ast.SelectorExpr{
		expr = left
		field_name = name
		pos = pos
	}
}

fun (mut p Parser) enum_val(has_name bool) ast.EnumVal{
	pos := p.tok.pos
	mut name := ''
	if has_name {
		name = p.check_name()
		if p.expr_pkg.length > 0 {
			name = p.prepend_expr_pkg(name)
		} else {
			name = p.prepend_pkg(name)
		}
	}
	p.check(.dot)
	val := p.check_name()
	return ast.EnumVal{
		name = name
		val = val
		pos = pos
	}
}

fun (mut p Parser) hash_expr()ast.Expr{
	lang := p.parse_lang()
	if p.tok.kind != .string {
		if lang == .js {
			p.expr_pkg = 'JS'
		} else if lang == .c {
			p.expr_pkg = 'C'
		}
		return p.name_expr(lang)
	}

	str_node := p.string_literal() as ast.StringLiteral
	return ast.HashExpr{
		lang = lang
		val = str_node.val
		pos = str_node.pos
	}
}

fun (mut p Parser) ident(lang ast.Language)ast.Ident{
	pos := p.tok.pos
	mut is_mut := p.tok.kind == .key_mut
	if is_mut {
		p.next()
	}
	if p.is_for_init {
		is_mut = true
	}
	name := p.prepend_expr_pkg(p.check_name())
	return ast.Ident{
		name = name
		is_mut = is_mut
		pkg = p.pkg_name
		pos = pos
		lang = lang
	}
}

fun (mut p Parser) index_expr(left ast.Expr)ast.IndexExpr {
	pos := p.tok.pos
	p.check(.lbr)
	index := p.expr(.lowest)
	p.check(.rbr)
	return ast.IndexExpr{
		left = left
		index = index
		pos = pos
	}
}

fun (mut p Parser) infix_expr(left ast.Expr)ast.InfixExpr{
	pos := p.tok.pos
	op_tok := p.tok
	p.next()
	right := p.expr(op_tok.precedence())
	return ast.InfixExpr{
		left = left
		right = right
		op = op_tok.kind
		pos = pos
	}
}

fun (mut p Parser) map_init() ast.MapInit{
	pos := p.tok.pos
	p.next()
	if p.tok.kind == .lbr{
		map_type := p.parse_map_type()
		return ast.MapInit{
			typ = map_type
			pos = pos
		}
	}
	mut keys := []ast.Expr
	mut vals := []ast.Expr
	p.check(.lcur)
	for p.tok.kind != .rcur {
		keys.push(p.expr(.lowest))
		p.check(.colon)
		vals.push(p.expr(.lowest))
	}
	p.next()
	return ast.MapInit{
		keys = keys
		vals = vals
		pos = pos
	}
}

fun (mut p Parser) name_expr(lang ast.Language) ast.Expr{
	if lang == .js and p.next_tok.kind == .dot {
		p.expr_pkg += '.' + p.check_name()
		p.check(.dot)
	} else if p.next_tok.kind == .dot and p.import_aliases.contains(p.tok.val) {
		p.expr_pkg = p.import_aliases[p.tok.val]
		p.next()
		p.next()
	}
	if p.tok.val == 'map' {
		return p.map_init()
	}
	if p.next_tok.kind == .lpar {
		return p.fun_call(lang)
	}
	if p.is_struct_possible and p.next_tok.kind == .lcur {
		return p.struct_init()
	}
	if p.next_tok.kind == .dot and p.tok.val[0].is_capital() and not p.tok.val.is_upper() {
		return p.enum_val(true)
	}
	return p.ident(lang)
}

fun (mut p Parser) number_literal() ast.Expr {
	pos := p.tok.pos
	p.next()

	if p.tok.kind != .dot {
		return ast.IntegerLiteral{
			val = p.prev_tok.val
			pos = pos
		}
	}

	mut val := p.prev_tok.val + '.'
	p.next()
	p.check(.number)
	val += p.prev_tok.val
	return ast.FloatLiteral{
		val = val
		pos = pos
	}
}

fun (mut p Parser) par_expr() ast.ParExpr {
	pos := p.tok.pos
	p.next()
	expr := p.expr(.lowest)
	p.check(.rpar)
	return ast.ParExpr{
		expr = expr
		pos = pos
	}
}

fun (mut p Parser) prefix_expr()ast.PrefixExpr{
	pos := p.tok.pos
	op := p.tok.kind
	p.next()
	right := p.expr(.prefix)
	return ast.PrefixExpr{
		op = op
		right = right
		pos = pos
	}
}

fun (mut p Parser) string_literal()ast.Expr{
	pos := p.tok.pos
	if p.next_tok.kind != .dollar {
		p.next()
		return ast.StringLiteral{
			val = p.prev_tok.val
			pos = pos
		}
	}
	mut vals := []string
	mut exprs := []ast.Expr
	for p.tok.kind == .string {
		vals.push(p.tok.val)
		p.next()
		if p.tok.kind != .dollar {
			break
		}
		p.next()
		p.check(.lcur)
		exprs.push(p.expr(.lowest))
	}
	return ast.StringInterLiteral{
		vals = vals
		exprs = exprs
		pos = pos
	}
}

fun (mut p Parser) typeof_expr() ast.TypeOf {
	pos := p.tok.pos
	p.check(.key_typeof)
	p.check(.lpar)
	expr := p.expr(.lowest)
	p.check(.rpar)
	return ast.TypeOf{
		expr = expr
		pos = pos
	}
}
