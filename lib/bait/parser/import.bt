// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package parser

import bait.ast
import bait.token

fun (p Parser) add_builtin_imports() []ast.Import {
	mut imports := []ast.Import

	// Everything implicitly imports builtin
	if p.pkg_name != 'builtin' {
		imports.push(ast.Import{
			name = 'builtin'
			alias = 'builtin'
		})
	}

	return imports
}

fun (p Parser) js_import() ast.Import {
	name := p.tok.val
	p.next()
	p.check(.key_as)

	mut alias := p.tok.val + '.'
	p.check(.hash)
	p.check(.dot)
	alias += p.check_name()

	return ast.Import{
		name = name
		alias = alias
		lang = .js
	}
}

fun (p Parser) bait_import() ast.Import {
	mut name_parts := []string
	name_parts.push(p.check_name())
	for p.tok.kind == .dot {
		p.next()
		name_parts.push(p.check_name())
	}
	name := name_parts.join('.')

	mut alias := name_parts[name_parts.length - 1]
	if p.tok.kind == .key_as {
		p.next()
		alias = p.check_name()
	}

	return ast.Import{
		name = name
		alias = alias
	}
}

fun (p Parser) import_stmts() [] ast.Import{
	mut imports := p.add_builtin_imports()
	for p.tok.kind == .key_import {
		pos := p.tok.pos
		p.next()

		mut imp := ast.Import{}
		if p.tok.kind == .string {
			imp = p.js_import()
		} else {
			imp = p.bait_import()
		}

		p.import_aliases[imp.alias] = imp.name

		imp.pos = pos
		imports.push(imp)
	}
	return imports
}
