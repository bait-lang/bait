// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package parser

import bait.ast
import bait.token

fun (p Parser) add_builtin_imports() []ast.Import {
	if p.pkg_name == 'builtin' {
		return []
	}

	// Everything implicitly imports builtin
	mut imports := []ast.Import
	imports.push(ast.Import{
		name = 'builtin'
		alias = 'builtin'
	})

	if p.pref.is_test and p.pkg_name != 'main' {
		imports.push(ast.Import{
			name = p.pkg_name
		})
	}

	return imports
}

fun (mut p Parser) foreign_import() !ast.Import {
	name := p.val
	p.next()
	p.check(.key_as)!

	lang := p.parse_lang()!

	mut alias := ''
	if lang == .js {
		alias = lang.prepend_to(p.check_name()!)
	} else if lang == .c {
		// TODO require _ := foo() too explicitly discard the return value
		p.check_name()! // just discard the name
	}

	return ast.Import{
		name = name
		alias = alias
		lang = lang
	}
}

fun (mut p Parser) bait_import() !ast.Import {
	mut name_parts := []string
	name_parts.push(p.check_name()!)
	for p.tok == .dot {
		p.next()
		name_parts.push(p.check_name()!)
	}
	name := name_parts.join('.')

	mut alias := name_parts[name_parts.length - 1]
	if p.tok == .key_as {
		p.next()
		alias = p.check_name()!
	}

	return ast.Import{
		name = name
		alias = alias
	}
}

fun (mut p Parser) import_stmts() ![]ast.Import{
	mut imports := p.add_builtin_imports()
	for p.tok == .key_import {
		pos := p.pos
		p.next()

		mut imp := ast.Import{}
		if p.tok == .string {
			imp = p.foreign_import()!
		} else {
			imp = p.bait_import()!
		}

		p.import_aliases[imp.alias] = imp.name

		imp.pos = pos
		imports.push(imp)
	}
	return imports
}
