// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package parser

import bait.ast
import bait.token

fun (mut p Parser) struct_decl() !ast.StructDecl{
	pos := p.pos
	is_pub := p.check_pub()
	p.check(.key_struct)!

	lang := p.parse_lang()!
	mut name := p.check_name()!
	if lang != .bait {
		name = lang.prepend_to(name)
	}

	generic_names := p.generic_type_names()!

	mut mut_idx := -1
	mut pub_idx := -1
	mut pub_mut_idx := -1
	mut global_idx := -1
	mut field_is_mut := false
	mut field_is_pub := false
	mut field_is_global := false
	mut fields := []ast.StructField

	p.check(.lcur)!
	for p.tok != .rcur {
		if p.tok == .key_mut {
			if mut_idx != -1 {
				p.error('redefinition of "mut" section')!
				return ast.StructDecl{}
			}
			p.next()
			p.check(.colon)!
			mut_idx = fields.length
			field_is_mut = true
			field_is_pub = false
			field_is_global = false
		} else if p.tok == .key_pub {
			p.next()
			if p.tok == .key_mut {
				if pub_mut_idx != -1 {
					p.error('redefinition of "pub mut" section')!
					return ast.StructDecl{}
				}
				p.next()
				pub_mut_idx = fields.length
				field_is_mut = true
				field_is_pub = true
				field_is_global = false
			} else {
				if pub_idx != -1 {
					p.error('redefinition of "pub" section')!
					return ast.StructDecl{}
				}
				pub_idx = fields.length
				field_is_mut = false
				field_is_pub = true
				field_is_global = false
			}
			p.check(.colon)!
		} else if p.tok == .key_global {
			if global_idx != -1 {
				p.error('redefinition of "global" section')!
				return ast.StructDecl{}
			}
			p.next()
			p.check(.colon)!
			global_idx = fields.length
			field_is_mut = true
			field_is_pub = true
			field_is_global = true
		}

		p.parse_attributes()!
		fields.push(p.struct_decl_field(field_is_mut, field_is_pub, field_is_global)!)
	}
	p.check(.rcur)!

	name_with_pkg := p.prepend_pkg(name)
	// Note: exception for builtin due to internal struct types (e.g. Array, Map, String)
	if p.table.type_exists(name_with_pkg) and p.pkg_name != 'builtin' {
		p.table.redefined_types.push(name_with_pkg)
	}

	tsym := ast.TypeSymbol{
		kind = .struct_
		name = name_with_pkg
		is_pub = is_pub
		pkg = p.pkg_name
		info = ast.StructInfo{
			fields = fields
			generic_names = generic_names
		}
	}
	typ := p.table.register_sym(tsym)

	return ast.StructDecl{
		lang = lang
		pkg_prefix = p.prepend_pkg('')
		name = name
		typ = typ
		fields = fields
		pos = pos
	}
}

fun (mut p Parser) struct_decl_field(is_mut bool, is_pub bool, is_global bool) !ast.StructField {
	pos := p.pos
	fname := p.check_name()!
	ftyp := p.parse_type()!
	mut expr := ast.EmptyExpr{} as ast.Expr
	if p.tok == .decl_assign {
		p.next()
		expr = p.expr(.lowest)!
	}
	field := ast.StructField{
		name = fname
		typ = ftyp
		expr = expr
		pos = pos
		is_mut = is_mut
		is_pub = is_pub
		is_global = is_global
		attrs = p.attributes
	}

	p.attributes = []ast.Attribute
	return field
}

fun (mut p Parser) struct_init() !ast.StructInit{
	pos := p.pos

	name := p.val
	mut typ := p.parse_type()!
	conc_types := p.concrete_types()!
	if conc_types.length > 0 {
		parent := p.table.get_sym(typ)
		typ = p.table.register_sym(ast.TypeSymbol{
			kind = .generic_inst
			parent = typ
			pkg = parent.pkg
			info = ast.GenericInst{
				concrete_types = conc_types
			}
		})
	}

	p.check(.lcur)!
	mut fields := []ast.StructInitField
	for p.tok != .rcur {
		fields.push(p.struct_init_field()!)
	}
	p.check(.rcur)!

	return ast.StructInit{
		name = name
		typ = typ
		fields = fields
		pos = pos
		concrete_types = conc_types
	}
}

fun (mut p Parser) struct_init_field() !ast.StructInitField{
	pos := p.pos

	name := p.check_name()!
	p.check(.assign)!
	expr := p.expr(.lowest)!

	return ast.StructInitField{
		name = name
		expr = expr
		pos = pos
	}
}
