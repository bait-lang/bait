// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package errors

import os
import bait.token
import term.color

pub enum Kind {
	info
	warning
	error
}

pub struct Message{
pub:
	kind Kind
	path string
	pos token.Pos
	title string
	msg string
}

pub fun (msg Message) print() {
	if msg.path.length == 0 {
		generic_error(msg.msg)
		return
	}
	message(msg.kind, msg.title, msg.path, msg.pos, msg.msg)
}

pub fun (msgs []Message) print_and_exit() {
	for msg in msgs {
		msg.print()
	}
	if msgs.length > 0 {
		exit(1)
	}
}

pub fun info(title string, path string, pos token.Pos, msg string) {
	message(.info, title, path, pos, msg)
}

pub fun warn(path string, pos token.Pos, msg string) {
	message(.warning, 'warning', path, pos, msg)
}

pub fun error(path string, pos token.Pos, msg string) {
	message(.error, 'error', path, pos, msg)
}

pub fun generic_error(msg string) {
	title := format_title(.error, "error")
	eprintln('${title}: ${msg}')
}

fun message(kind Kind, title string, path string, pos token.Pos, msg string) {
	file_line := bold('${path}:${pos.line}:${pos.col}')
	eprintln('${file_line} ${format_title(kind, title)}: ${msg}')
}

fun bold(s string) string {
	// TODO move check if color is supported into term.color
	if os.getenv('BAITCOLOR') == '0' {
		return s
	}
	return color.bold(s)
}

fun format_title(k Kind, title string) string {
	if os.getenv('BAITCOLOR') == '0' {
		return title
	}
	match k {
		.info { return color.magenta(title) }
		.warning { return color.yellow(title) }
		.error { return color.red(title) }
	}
}
