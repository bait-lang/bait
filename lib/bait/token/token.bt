// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package token

pub struct Token {
pub:
	kind TokenKind
	val string
	pos Pos
}

pub enum TokenKind {
	unknown
	eof
	attr
	name
	string
	char
	number
	dot
	colon
	comma
	semicolon
	plus
	minus
	mul
	div
	mod
	assign
	decl_assign
	plus_assign
	minus_assign
	mul_assign
	div_assign
	mod_assign
	eq
	ne
	lt
	gt
	le
	ge
	lpar
	rpar
	lsqr
	rsqr
	lcur
	rcur
	amp
	caret
	pipe
	dollar
	hash
	key_and
	key_as
	key_assert
	key_break
	key_const
	key_continue
	key_else
	key_enum
	key_false
	key_for
	key_fun
	key_global
	key_if
	key_import
	key_in
	key_interface
	key_is
	key_match
	key_mut
	key_not
	key_or
	key_package
	key_pub
	key_return
	key_struct
	key_true
	key_type
	key_typeof
}

pub fun kind_from_string(name string) TokenKind {
	return match name {
		'and' { .key_and }
		'as' { .key_as }
		'assert' { .key_assert }
		'break' { .key_break }
		'const' { .key_const }
		'continue' { .key_continue }
		'else' { .key_else }
		'enum' { .key_enum }
		'false' { .key_false }
		'for' { .key_for }
		'fun' { .key_fun }
		'global' { .key_global }
		'if' { .key_if }
		'import' { .key_import }
		'in' { .key_in }
		'interface' { .key_interface }
		'is' { .key_is }
		'match' { .key_match }
		'mut' { .key_mut }
		'not' { .key_not }
		'or' { .key_or }
		'package' { .key_package }
		'pub' { .key_pub }
		'return' { .key_return }
		'struct' { .key_struct }
		'true' { .key_true }
		'type' { .key_type }
		'typeof' { .key_typeof }
		else { .name }
	}
}

const COMPARE_KINDS := [TokenKind.eq, .ne, .lt, .gt, .le, .ge, .key_is]
const MATH_KINDS := [TokenKind.plus, .minus, .mul, .div, .mod]
const OTHER_INFIXES := [TokenKind.key_and, .key_or]

pub fun (kind TokenKind) is_compare() bool {
	return COMPARE_KINDS.contains(kind)
}

pub fun (kind TokenKind) is_infix() bool {
	return kind.is_compare() or MATH_KINDS.contains(kind) or OTHER_INFIXES.contains(kind)
}

const ASSIGN_KINDS := [TokenKind.decl_assign, .assign, .plus_assign, .minus_assign, .mul_assign, .div_assign, .mod_assign]

pub fun (kind TokenKind) is_assign() bool {
	return ASSIGN_KINDS.contains(kind)
}

pub fun (kind TokenKind) js_repr() string {
	return match kind {
		.key_break { "break" }
		.key_continue { "continue" }
		.key_is { "instanceof" }
		.mul { "*" }
		.div { "/" }
		.mod { "%" }
		.plus { "+" }
		.minus { "-" }
		.mul_assign { "*=" }
		.div_assign { "/=" }
		.mod_assign { "%=" }
		.plus_assign { "+=" }
		.minus_assign { "-=" }
		.decl_assign, .assign { "=" }
		.eq { "==" }
		.ne { "!=" }
		.lt { "<" }
		.gt { ">" }
		.le { "<=" }
		.ge { ">=" }
		.key_and { "&&" }
		.key_not { "!" }
		.key_or { "||" }
		else { '' }
	}
}

pub fun (kind TokenKind) c_repr() string {
	return match kind {
		.amp { '&' }
		.caret { '*' }
		else { kind.js_repr() }
	}
}

pub fun (kind TokenKind) str() string {
	return match kind {
		.unknown { 'unknown' }
		.eof { 'eof' }
		.attr { 'attr' }
		.name { 'name' }
		.string { 'string' }
		.char { 'char' }
		.number { 'number' }
		.dot { 'dot' }
		.colon { 'colon' }
		.comma { 'comma' }
		.semicolon { 'semicolon' }
		.plus { 'plus' }
		.minus { 'minus' }
		.mul { 'mul' }
		.div { 'div' }
		.mod { 'mod' }
		.assign { 'assign' }
		.decl_assign { 'decl_assign' }
		.plus_assign { 'plus_assign' }
		.minus_assign { 'minus_assign' }
		.mul_assign { 'mul_assign' }
		.div_assign { 'div_assign' }
		.mod_assign { 'mod_assign' }
		.eq { 'eq' }
		.ne { 'ne' }
		.lt { 'lt' }
		.gt { 'gt' }
		.le { 'le' }
		.ge { 'ge' }
		.lpar { 'lpar' }
		.rpar { 'rpar' }
		.lsqr { 'lsqr' }
		.rsqr { 'rsqr' }
		.lcur { 'lcur' }
		.rcur { 'rcur' }
		.amp { 'amp' }
		.caret { 'caret' }
		.pipe { 'pipe' }
		.dollar { 'dollar' }
		.hash { 'hash' }
		.key_and { 'key_and' }
		.key_as { 'key_as' }
		.key_assert { 'key_assert' }
		.key_break { 'key_break' }
		.key_const { 'key_const' }
		.key_continue { 'key_continue' }
		.key_else { 'key_else' }
		.key_enum { 'key_enum' }
		.key_false { 'key_false' }
		.key_for { 'key_for' }
		.key_fun { 'key_fun' }
		.key_global { 'key_global' }
		.key_if { 'key_if' }
		.key_import { 'key_import' }
		.key_in { 'key_in' }
		.key_interface { 'key_interface' }
		.key_is { 'key_is' }
		.key_match { 'key_match' }
		.key_mut { 'key_mut' }
		.key_not { 'key_not' }
		.key_or { 'key_or' }
		.key_package { 'key_package' }
		.key_pub { 'key_pub' }
		.key_return { 'key_return' }
		.key_struct { 'key_struct' }
		.key_true { 'key_true' }
		.key_type { 'key_type' }
		.key_typeof { 'key_typeof' }
	}
}
