// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package context

import bait.ast

pub struct Scope {
	pub parent &Scope
	pub objects map[string]ScopeObject
	pub redefined_syms []string
}

pub struct ScopeObject{
	pub mut kind ObjectKind
	global typ ast.Type
	pub mut is_pub bool
	pub mut is_mut bool
	pub mut pkg string // TODO SCOPES move this into Scope (requires multi return)
	pub mut expr ast.Expr := ast.Void{} // const / static: resolve type on use

	// Only for functions (Note: will be cleaned up in the refactor to use sumtypes)
	pub noreturn bool
	pub return_type ast.Type
	pub params []ast.Param
	pub attrs []ast.Attribute
	pub generic_names []string
}

pub enum ObjectKind {
	unknown
	variable
	constant
	function
	package_
	label
	static_
	type_
}

// Register an object in the selected scope
pub fun (s Scope) register(name string, obj ScopeObject) {
	s.objects[name] = obj
}

// Register an object but error for duplicates
pub fun (s Scope) register_unique(name string, obj ScopeObject) {
	if s.is_known(name) {
		s.redefined_syms.push(name)
		return
	}

	s.objects[name] = obj
}

pub fun (s Scope) get(name string) ScopeObject {
	if s.objects.contains(name) {
		return s.objects[name]
	}
	return ScopeObject{
		kind = .unknown
	}
}

pub fun (s Scope) get_parent(name string) ScopeObject {
	if s.objects.contains(name) {
		return s.objects[name]
	}
	if s.parent != 0 as Scope {
		return s.parent.get_parent(name)
	}
	return ScopeObject{
		kind = .unknown
	}
}

pub fun (mut s Scope) update_type(name string, typ ast.Type) {
	// FIXME `obj` should be a copy on js backend and below code not modify the original
	// obj.typ = typ
	// s.objects[name] = obj

	// Smarcasting requires search in parents but insert in current scope
	obj := s.get_parent(name)
	s.objects[name] = ScopeObject{
		typ = typ
		kind = obj.kind
		is_pub = obj.is_pub
		is_mut = obj.is_mut
		pkg = obj.pkg
	}
}

pub fun (s Scope) is_known(name string) bool {
	obj := s.get_parent(name)
	return obj.kind != .unknown
}

pub fun (s Scope) expect_unknown(name string) ! {
	obj := s.get_parent(name)

	if obj.kind == .unknown {
		return
	}

	if obj.kind == .package_ {
		return error("cannot shadow import `${name}`")
	}

	return error("redefinition of `${name}`")
}

pub fun (s Scope) get_unique_redefinitions() []string {
	mut unique_redefs := []string
	for name in s.redefined_syms {
		if not unique_redefs.contains(name) {
			unique_redefs.push(name)
		}
	}
	return unique_redefs
}
