// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package c

import bait.ast
import bait.errors
import bait.util.escape

fun (mut g Gen) expr(expr ast.Expr) {
	match expr {
		ast.AnonFun { g.anon_fun(expr) }
		ast.ArrayInit { g.array_init(expr) }
		ast.AsCast { g.as_cast(expr) }
		ast.BoolLiteral { g.bool_literal(expr) }
		ast.CallExpr { g.call_expr(expr) }
		ast.CharLiteral { g.char_literal(expr) }
		ast.ComptimeVar { g.comptime_var(expr) }
		ast.EnumVal { g.enum_val(expr) }
		ast.FloatLiteral { panic('floats not implemented') } // TODO
		ast.HashExpr { g.hash_expr(expr) }
		ast.Ident { g.ident(expr) }
		ast.IfMatch { g.if_match(expr) }
		ast.IndexExpr { g.index_expr(expr) }
		ast.InfixExpr { g.infix_expr(expr) }
		ast.IntegerLiteral { g.integer_literal(expr) }
		ast.MapInit { panic('maps not implemented') } // TODO
		ast.ParExpr { g.par_expr(expr) }
		ast.PrefixExpr { g.prefix_expr(expr)}
		ast.SelectorExpr { g.selector_expr(expr) }
		ast.StringLiteral { g.string_literal(expr) }
		ast.StringInterLiteral { g.string_inter_literal(expr) }
		ast.StructInit { g.struct_init(expr) }
		ast.TmpVar { g.tmp_var() }
		ast.TypeOf{ g.type_of(expr)}
		ast.Void {} // nothing to do
		ast.InvalidExpr { panic('unexpected InvalidExpr') }
	}
}

fun (mut g Gen) expr_string(expr ast.Expr) string {
	was_line_empty := g.empty_line
	start := g.out.length
	g.expr(expr)
	s := g.out.substr(start, g.out.length)
	g.out = g.out.substr(0, start)
	g.empty_line = was_line_empty
	return s.trim_space()
}

fun (mut g Gen) array_init(node ast.ArrayInit){
	elem_type := g.typ(node.elem_type)

	if node.exprs.length == 0 {
		g.write('new_array(')
		if node.length_expr is ast.InvalidExpr {
			g.write('0, ')
		} else {
			g.expr(node.length_expr)
			g.write(', ')
		}
		if node.cap_expr is ast.InvalidExpr {
			g.write('0, ')
		} else {
			g.expr(node.cap_expr)
			g.write(', ')
		}

		g.write('sizeof(${elem_type}))')
		return
	}

	len := node.exprs.length
	g.write('new_array_from_c(${len}, ${len}, sizeof(${elem_type}), (${elem_type}[${len}]){')
	g.indent += 1
	for expr in node.exprs {
		g.expr(expr)
		g.write(', ')
	}
	g.indent -= 1
	g.write('})')
}

fun (mut g Gen) as_cast(node ast.AsCast) {
	type_str := g.typ(node.target)
	g.write('(${type_str})(')
	g.expr(node.expr)
	g.write(')')
}

fun (mut g Gen) bool_literal(node ast.BoolLiteral) {
	if node.val {
		g.write('true')
	} else {
		g.write('false')
	}
}

fun (mut g Gen) char_literal(node ast.CharLiteral) {
	val := escape.char(node.val, `'`)
	g.write("'${val}'")
}

fun (mut g Gen) enum_val(node ast.EnumVal) {
	g.write(c_esc(node.val))
}

fun (mut g Gen) hash_expr(node ast.HashExpr) {
	g.write(node.val)
}

fun (mut g Gen) ident(node ast.Ident) {
	if node.lang != .bait {
		g.write(node.name)
		return
	}

	g.write(c_esc(node.full_name()))
}

fun (mut g Gen) index_expr(node ast.IndexExpr) {
	sym := g.table.get_sym(node.left_type)
	if sym.kind == .map {
		info := sym.info as ast.MapInfo
		val_type_str := g.typ(info.val_type)
		if g.is_lhs_assign and not node.is_selector {
			g.is_array_map_set = true
			g.write('map_set((map*)&')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(', (${val_type_str}[])')
		} else {
			g.write('(*(${val_type_str}*)(map_get(&')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(')))')
		}
		return
	}

	if sym.kind == .array {
		info := sym.info as ast.ArrayInfo
		elem_type_str := g.typ(info.elem_type)
		if g.is_lhs_assign and not node.is_selector {
			g.is_array_map_set = true
			g.write('Array_set(&')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(', (${elem_type_str}[])')
		} else {
			g.write('(*(${elem_type_str}*)(Array_get(')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(')))')
		}
		return
	}

	if sym.kind == .string {
		g.write('string_get(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.index)
		g.write(')')
		return
	}

	g.expr(node.left)
	g.write('[')
	g.expr(node.index)
	g.write(']')
}

fun (mut g Gen) infix_expr(node ast.InfixExpr) {
	// Overloading
	lsym := g.concrete_sym(node.left_type)
	if lsym.overloads.contains(node.op.c_repr()) {
		overload := lsym.overloads[node.op.c_repr()]
		if node.op == .ne {
			g.write('!')
		}
		g.write(c_esc(lsym.name + '_' + overload.name))
		g.write('(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.right)
		g.write(')')
		return
	}

	// Normal cases
	g.expr(node.left)
	g.write(' ')
	g.write(node.op.c_repr())
	g.write(' ')
	g.expr(node.right)
}

fun (mut g Gen) integer_literal(node ast.IntegerLiteral) {
	g.write(node.val)
}

fun (mut g Gen) par_expr(node ast.ParExpr) {
	g.write('(')
	g.expr(node.expr)
	g.write(')')
}

fun (mut g Gen) prefix_expr(node ast.PrefixExpr) {
	g.write(node.op.c_repr())
	g.expr(node.right)
}

fun (mut g Gen) selector_expr(node ast.SelectorExpr) {
	g.expr(node.expr)
	if node.expr_type.get_nr_amp() > 0 {
		g.write('->')
	} else {
		g.write('.')
	}
	g.write(node.field_name)
}

fun (mut g Gen) string_literal(node ast.StringLiteral) {
	val := escape.char(node.val.replace('\n', '\\n'), `\"`)
	g.write('from_c_string("')
	g.write(val)
	g.write('")')
}

fun (mut g Gen) string_inter_literal(node ast.StringInterLiteral) {
	len := node.vals.length + node.exprs.length
	g.write('interpolate(new_array_from_c(${len}, ${len}, sizeof(string), (string[${len}]){')
	for i, val in node.vals {
		esc_val := escape.char(val.replace('\n', '\\n'), `\"`)
		g.write('from_c_string("${esc_val}")')
		g.write(', ')
		if i < node.exprs.length {
			g.expr_to_string(node.exprs[i], node.expr_types[i])
			g.write(', ')
		}
	}
	g.write('}))')
}

fun (mut g Gen) struct_init(node ast.StructInit) {
	type_str := g.typ(node.typ)
	g.write('(${type_str}){')

	mut inited_fields := []string
	for field in node.fields {
		inited_fields.push(field.name)
	}

	info := g.table.get_sym(node.typ).info as ast.StructInfo
	for i, field in info.fields {
		name := c_esc(field.name)
		g.write('.${name} = ')
		init_idx := inited_fields.index(field.name)
		if init_idx == -1 {
			g.write('0')
		} else {
			g.expr(node.fields[init_idx].expr)
		}
		if i < info.fields.length - 1 {
			g.write(', ')
		}
	}

	if info.fields.length == 0 {
		g.write('0')
	}

	g.write('}')
}

fun (mut g Gen) type_of(node ast.TypeOf){
	sym := g.concrete_sym(node.typ)
	amp := '*'.repeat(node.typ.get_nr_amp())
	g.write('from_c_string("' + amp + sym.name + '")')
}

fun (mut g Gen) expr_to_string(expr ast.Expr, typ ast.Type) {
	sym := g.table.get_sym(typ)
	if sym.kind == .string {
		g.expr(expr)
		return
	}

	str_def := g.table.get_method(sym, 'str')
	if str_def.name.length > 0 {
		final_sym := g.table.get_sym(str_def.params[0].typ)
		mut name := c_esc(final_sym.name)
		g.write('${name}_str(')
		g.expr(expr)
		g.write(')')
		return
	}

	if sym.kind == .generic {
		g.expr_to_string(expr, g.cur_concrete_types[sym.name])
		return
	}

	name := g.get_str_fun(typ)
	g.write('${name}(')
	g.expr(expr)
	g.write(')')
}
