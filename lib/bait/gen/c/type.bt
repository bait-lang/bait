// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package c

import bait.ast

fun (g Gen) concrete_sym(typ ast.Type) ast.TypeSymbol {
	sym := g.table.get_sym(typ)
	if sym.kind != .generic or g.cur_concrete_types.length == 0 {
		return sym
	}

	return g.table.get_sym(g.cur_concrete_types[sym.mix_name])
}

fun (g Gen) typ(typ ast.Type) string {
	sym := g.concrete_sym(typ)

	name := sym.mix_name.replace('[]', 'Array_').replace('C.', '').replace('.', '__')
	ptrs := '*'.repeat(typ.get_nr_amp())
	prefix := if sym.kind == .enum_ { 'enum ' } else { '' }
	return prefix + name + ptrs
}

fun (mut g Gen) write_types() {
	for sym in g.table.type_symbols {
		if sym.mix_name.starts_with('C.') {
			continue
		}

		cname := c_esc(sym.mix_name)
		if sym.info is ast.StructInfo {
			info := sym.info as ast.StructInfo
			g.type_defs_out += 'typedef struct ${cname} ${cname};\n'
			g.type_impls_out += 'struct ${cname} {\n'
			for field in info.fields {
				type_str := g.typ(field.typ)
				field_name := c_esc(field.name)
				g.type_impls_out += '\t${type_str} ${field_name};\n'
			}
			g.type_impls_out += '};\n'
		} else if sym.info is ast.ArrayInfo {
			g.type_defs_out += 'typedef Array ${cname};\n'
		} else if sym.kind == .fun_ {
			info := sym.info as ast.FunInfo
			if not info.is_alias {
				continue
			}

			ccname := cname.replace(" ", "_").replace("(", "_").replace(")", "_").replace(",", "")
			g.type_defs_out += 'typedef ${g.typ(info.return_type)} (*${ccname})('
			for i, param in info.param_types {
				g.type_defs_out += g.typ(param)
				if i < info.param_types.length - 1 {
					g.type_defs_out += ', '
				}
			}
			g.type_defs_out += ');\n'
		}
		 else if sym.kind == .alias_type or sym.kind == .number {
			g.type_defs_out += 'typedef ${g.typ(sym.parent)} ${cname};\n'
		} else if sym.kind == .enum_ {
			info := sym.info as ast.EnumInfo
			g.type_defs_out += 'enum ${cname} {\n'
			for val in info.vals {
				g.type_defs_out += '\t${c_esc(val)},\n'
			}
			g.type_defs_out += '};\n'
		}
	}
}
