// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package c

import bait.ast

fun (g Gen) typ(typ ast.Type) string {
	sym := g.table.get_sym(typ)
	ptrs := '*'.repeat(typ.get_nr_amp())
	return sym.name + ptrs
}

fun (g Gen) ctyp(typ ast.Type) string {
	return g.typ(typ).replace('C.', '')
}

fun (g Gen) write_types() {
	for sym in g.table.type_symbols {
		cname := c_name(sym.name)
		match sym.kind {
			.alias_type {
				g.type_defs_out += 'typedef ${g.ctyp(sym.parent)} ${cname};\n'
			}
			.struct_, .string {
				info := sym.info as ast.StructInfo
				g.type_defs_out += 'typedef struct ${cname} ${cname};\n'
				g.type_impls_out += 'struct ${cname} {\n'
				for field in info.fields {
					type_str := g.typ(field.typ)
					field_name := c_name(field.name)
					g.type_impls_out += '\t${type_str} ${field_name};\n'
				}
				g.type_impls_out += '};\n'
			}
		}
	}
}
