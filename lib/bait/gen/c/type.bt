// Copyright (c) 2023-present Lukas Neubert.
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package c

import bait.ast

fun (g Gen) concrete_sym(typ ast.Type) ast.TypeSymbol {
	sym := g.table.get_sym(typ)
	if g.cur_concrete_types.length == 0 {
		return sym
	}

	return g.table.get_sym(g.cur_concrete_types[sym.name])
}

fun (g Gen) typ(typ ast.Type) string {
	sym := g.table.get_sym(typ)
	if sym.kind == .generic {
		return g.typ(g.cur_concrete_types[sym.name])
	}

	name := sym.name.replace('[]', 'array_').replace('C.', '').replace('.', '__')
	ptrs := '*'.repeat(typ.get_nr_amp())
	return name + ptrs
}

fun (mut g Gen) write_types() {
	for sym in g.table.type_symbols {
		if sym.name.starts_with('C.') {
			continue
		}

		cname := c_name(sym.name)
		if sym.info is ast.StructInfo {
			info := sym.info as ast.StructInfo
			g.type_defs_out += 'typedef struct ${cname} ${cname};\n'
			g.type_impls_out += 'struct ${cname} {\n'
			for field in info.fields {
				type_str := g.typ(field.typ)
				field_name := c_name(field.name)
				g.type_impls_out += '\t${type_str} ${field_name};\n'
			}
			g.type_impls_out += '};\n'
		} else if sym.info is ast.ArrayInfo {
			g.type_defs_out += 'typedef array ${cname};\n'
		} else {
			match sym.kind {
				.alias_type {
					g.type_defs_out += 'typedef ${g.typ(sym.parent)} ${cname};\n'
				}
			}
		}
	}
}
