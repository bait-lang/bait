// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package c

import bait.preference
import bait.ast

// Reserved keywords and "main"
// See https://www.ibm.com/docs/en/developer-for-zos/14.2?topic=programs-c-reserved-keywords
const C_RESERVED := ['auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'inline', 'int', 'long', 'register', 'restrict', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while', 'main']

struct Gen {
	pref preference.Prefs
	table ast.Table
mut:
	path string
	pkg string
	type_defs_out string
	fun_decls_out string
	type_impls_out string
	out string
	indent i32 := -1
	empty_line bool := true
	foreign_imports []string // C header files
	generated_eq_funs []ast.Type
	is_lhs_assign bool
	is_array_map_set bool
	is_for_loop_head bool
}

pub fun gen(files []ast.File, table ast.Table, pref preference.Prefs) string {
	mut g := Gen{
		pref = pref
		table = table
	}
	g.write_types()
	g.gen_equality_funs()
	for file in files {
		g.path = file.path
		g.pkg = file.pkg_decl.full_name

		g.process_imports(file.imports)
		g.stmts(file.stmts)
		g.out += "\n"
	}
	if not g.pref.is_library {
		g.c_main()
	}
	return g.headers() + g.type_defs_out + g.fun_decls_out + g.type_impls_out + '\n' + g.out
}

fun (g Gen) process_imports(imports []ast.Import) {
	for imp in imports {
		// TODO handle alias clash
		if imp.lang == .bait or g.foreign_imports.contains(imp.name) {
			continue
		}
		g.foreign_imports.push(imp.name)
	}
}

fun (g Gen) headers() string {
	mut headers := ''
	for name in g.foreign_imports {
		headers += '#include <${name}>\n'
	}
	return headers + '\n'
}

fun (g Gen) c_main() {
	g.writeln('int main(int argc, char* argv[]) {')
	g.writeln('\tbait_main();')
	g.writeln('\treturn 0;')
	g.writeln('}')
}

fun (g Gen) write_indent() {
	if g.indent > 0 and g.empty_line {
		g.out += '\t'.repeat(g.indent)
	}
}

fun (g Gen) write(s string){
	g.write_indent()
	g.out += s
	g.empty_line = false
}

fun (g Gen) writeln (s string){
	g.write_indent()
	g.out += s + "\n"
	g.empty_line = true
}

fun c_name(n string) string {
	name := n.replace('.', '__')
	if C_RESERVED.contains(name) {
		return 'bait_${name}'
	}
	return name
}
