// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package c

import bait.preference
import bait.ast
import bait.errors

const C_RESERVED := [
	// C99 reserved keywords. See https://en.cppreference.com/w/c/keyword
	'auto', 'break', 'case', 'char', 'const', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'float', 'for', 'goto', 'if', 'inline', 'int', 'long', 'register', 'restrict', 'return', 'short', 'signed', 'sizeof', 'static', 'struct', 'switch', 'typedef', 'union', 'unsigned', 'void', 'volatile', 'while',
	// Builtin function and type names
	'main', 'exit', 'DIR',
]

struct Gen {
	pref preference.Prefs
	table ast.Table
	mut path string
	mut pkg string
	mut main_inits_out string
	mut type_defs_out string := '// Type definitions\n'
	mut fun_decls_out string := '// Function declarations\n'
	mut type_impls_out string := '// Type implementations\n'
	mut auto_funs_out string := '// Generated functions\n'
	mut globals_out string := '// Static variables\n'
	mut out string := '// Main code\n'
	mut indent i32 := -1
	mut empty_line bool := true
	mut stmt_offsets []i32
	mut foreign_imports []string // C header files
	mut generated_eq_funs []ast.Type
	mut generated_str_funs []ast.Type
	mut tmp_counter i32
	mut cur_concrete_types map[string]ast.Type
	mut cur_fun ast.FunDecl
	mut is_lhs_assign bool
	mut is_array_map_set bool
	mut is_for_loop_head bool
	// Cached comptime variables
	mut baitexe string
	mut baitdir string
	mut baithash string
}

pub fun gen(files []ast.File, table ast.Table, pref preference.Prefs) string {
	mut g := Gen{
		pref = pref
		table = table
	}

	g.write_types()
	g.gen_equality_funs()

	for file in files {
		g.path = file.path
		g.pkg = file.pkg_name

		g.process_imports(file.imports)
		g.stmts(file.stmts)
		g.out += "\n"
	}

	if not g.pref.is_library {
		g.c_main()
	}

	// Auto string functions
	for typ in g.table.needed_str_funs {
		g.generate_str_fun(typ)
	}

	// Join all parts
	return g.headers() + g.type_defs_out + g.fun_decls_out + g.type_impls_out + g.auto_funs_out + g.globals_out + '\n' + g.out
}

fun (g Gen) process_imports(imports []ast.Import) {
	for imp in imports {
		// TODO handle alias clash
		if imp.lang == .bait or g.foreign_imports.contains(imp.name) {
			continue
		}
		g.foreign_imports.push(imp.name)
	}
}

fun (g Gen) headers() string {
	mut headers := '// Headers and includes\n'
	for name in g.foreign_imports {
		headers += '#include <${name}>\n'
	}
	return headers + '\n'
}

fun (mut g Gen) c_main() {
	g.writeln('int main(int argc, char* argv[]) {')
	g.writeln(g.main_inits_out)
	g.writeln('\tbait_main();')
	g.writeln('\treturn 0;')
	g.writeln('}')
}


fun (g Gen) get_concrete_name(name string, concrete_types []ast.Type) string {
	mut full_name := name
	for t in concrete_types {
		full_name += '_' + g.table.get_sym(t).name
	}
	return c_esc(full_name)
}

fun (mut g Gen) tmp_var() {
	g.write("_t${g.tmp_counter}")
}

fun (mut g Gen) new_temp_var() string {
	g.tmp_counter += 1
	return '_t${g.tmp_counter}'
}

fun (mut g Gen) write_indent() {
	if g.indent > 0 and g.empty_line {
		g.out += '\t'.repeat(g.indent)
	}
}

fun (mut g Gen) write(s string){
	g.write_indent()
	g.out += s
	g.empty_line = false
}

fun (mut g Gen) writeln (s string){
	g.write_indent()
	g.out += s + "\n"
	g.empty_line = true
}

fun (mut g Gen) cut_before(to u8) string {
	for i := g.out.length - 1; i >= 0; i -= 1 {
		if g.out[i] == to {
			mut cut := g.out.substr(i + 1, g.out.length)
			g.out = g.out.substr(0, i)
			return cut
		}
	}
	return g.out
}

fun (mut g Gen) cut_before_any(chars string) string {
	for i := g.out.length - 1; i >= 0; i -= 1 {
		for c in chars {
			if g.out[i] == c {
				mut cut := g.out.substr(i + 1, g.out.length)
				g.out = g.out.substr(0, i)
				return cut
			}
		}
	}
	return g.out
}

fun (mut g Gen) cut_back_to(pos i32) string {
	cut := g.out.substr(pos, g.out.length)
	g.out = g.out.substr(0, pos)
	return cut
}

fun (mut g Gen) save_stmt_offset() {
	g.stmt_offsets.push(g.out.length)
}

// TODO evaluate where c_esc can be replaced by this (see also jsgen)
// TODO consider splitting this up even further for different places
fun c_name(n string) string {
	return n.replace('.', '__').replace('[]', 'Array_')
}

fun c_esc(n string) string {
	name := c_name(n)
	if C_RESERVED.contains(name) {
		return 'bait_${name}'
	}
	return name
}
