// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package c

import os
import bait.ast
import bait.token

fun (mut g Gen) comptime_var(node ast.ComptimeVar){
	g.write('from_c_string("')
	g.write(g.get_comptime_val(node.kind, node.pos))
	g.write('")')
}

fun (mut g Gen) get_comptime_val(kind token.ComptimeVar, pos token.Pos) string {
	return match kind {
		// Dynamic
		.pkg { g.pkg }
		.abs_file { os.abs_path(g.path).replace('\\', '\\\\') }
		.file { g.path.replace('\\', '\\\\') }
		.line { pos.line.str() }
		.file_line {
			file := g.get_comptime_val(.file, pos)
			line := g.get_comptime_val(.line, pos)
			'${file}:${line}'
		}
		.fun_ { g.cur_fun.name }

		// Cached
		.baitexe { g.comptime_baitexe() }
		.baitdir { g.comptime_baitdir() }
		.baithash { g.comptime_baithash() }

		// Error
		.unknown { panic('this should never happen') }
	}
}

fun (mut g Gen) comptime_baitexe() string {
	if g.baitexe.length == 0 {
		g.baitexe = os.executable().replace('\\', '\\\\')
	}
	return g.baitexe
}

fun (mut g Gen) comptime_baitdir() string {
	if g.baitdir.length == 0 {
		g.baitdir = os.dir(g.comptime_baitexe()).trim_right('\\')
	}
	return g.baitdir
}

fun (mut g Gen) comptime_baithash() string {
	if g.baithash.length == 0 {
		bd := g.comptime_baitdir()
		g.baithash = os.exec('git -C ${bd} rev-parse --short HEAD').stdout.trim_space()
	}
	return g.baithash
}
