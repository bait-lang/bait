// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package c

import bait.ast
import bait.errors

fun (mut g Gen) stmts(stmts []ast.Stmt) {
	g.save_stmt_offset()
	g.indent += 1
	for stmt in stmts {
		g.stmt(stmt)
	}
	g.indent -= 1
}

fun (mut g Gen) stmt(stmt ast.Stmt) {
	match stmt {
		ast.AssertStmt { g.assert_stmt(stmt) }
		ast.AssignStmt { g.assign_stmt(stmt) }
		ast.Block { g.block(stmt) }
		ast.ConstDecl { g.const_decl(stmt) }
		ast.EnumDecl {} // see write_types()
		ast.ExprStmt { g.expr_stmt(stmt) }
		ast.ForLoop { g.for_loop(stmt) }
		ast.ForClassicLoop { g.for_classic_loop(stmt) }
		ast.ForInLoop { g.for_in_loop(stmt) }
		ast.FunDecl { g.fun_decl(stmt) }
		ast.StaticDecl { g.static_decl(stmt) }
		ast.IfMatch { g.if_match(stmt) }
		ast.InterfaceDecl { g.interface_decl(stmt) }
		ast.LoopControlStmt { g.loop_control_stmt(stmt) }
		ast.ReturnStmt { g.return_stmt(stmt) }
		ast.StructDecl {} // see write_types()
		ast.TypeDecl {} // see write_types()
		ast.Void {}
		ast.InvalidStmt { panic('unexpected InvalidStmt') }
	}
}

fun (mut g Gen) assign_stmt(node ast.AssignStmt) {
	g.save_stmt_offset()
	if node.op == .decl_assign {
		type_str := g.typ(node.right_type)
		g.write('${type_str} ')
	} else if node.left_type.get_nr_amp() > 0 and node.left is ast.Ident {
		g.write('*')
	}

	g.is_lhs_assign = true
	g.expr(node.left)
	g.is_lhs_assign = false

	lsym := g.table.get_sym(node.left_type)
	if lsym.overloads.contains(node.op.c_repr()) {
		g.write(' = ')
		overload := lsym.overloads[node.op.c_repr()]
		g.write(c_esc(lsym.name + '_' + overload.mix_name))
		g.write('(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.right)
		g.writeln(');')
		return
	}

	if g.is_array_map_set {
		g.write('{')
		g.expr(node.right)
		g.writeln('});')
		g.is_array_map_set = false
		return
	}

	g.write(' ')
	g.write(node.op.c_repr())
	g.write(' ')
	g.expr(node.right)
	if not g.is_for_loop_head {
		g.writeln(';')
	}
}

fun (mut g Gen) block(node ast.Block) {
	g.save_stmt_offset()
	g.writeln('{')
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) const_decl(node ast.ConstDecl){
	pkg := c_name(g.pkg) // TODO optimize this by caching (also jsgen)
	name := c_name(node.name)
	full_name := pkg + '__' + name
	val := g.expr_string(node.expr)

	if node.expr is ast.ArrayInit or node.expr is ast.CallExpr or node.expr is ast.MapInit {
		typ := g.typ(node.typ)
		g.type_defs_out += '${typ} ${full_name};\n'
		g.main_inits_out += '\t${full_name} = ${val};\n'
	} else {
		g.type_impls_out += '#define ${full_name} ${val}\n'
	}
}

fun (mut g Gen) expr_stmt(node ast.ExprStmt) {
	g.save_stmt_offset()
	g.expr(node.expr)
	if not g.empty_line {
		g.writeln(";")
	}
}

fun (mut g Gen) write_label(label string){
	if label.length > 0 {
		g.writeln('${label}: ')
	}
}

fun (mut g Gen) for_loop(node ast.ForLoop) {
	g.write('while (')
	g.expr(node.cond)
	g.writeln(') {')
	g.stmts(node.stmts)
	g.writeln('}')

	g.write_label(node.label)
}

fun (mut g Gen) for_classic_loop(node ast.ForClassicLoop) {
	g.is_for_loop_head = true
	g.write('for (')
	g.stmt(node.init)
	g.write('; ')
	g.expr(node.cond)
	g.write('; ')
	g.stmt(node.inc)
	g.writeln(') {')
	g.is_for_loop_head = false
	g.stmts(node.stmts)
	g.writeln('}')

	g.write_label(node.label)
}

fun (mut g Gen) for_in_loop(node ast.ForInLoop){
	sym := g.table.get_sym(node.expr_type)
	i := g.expr_string(node.idxvar)
	container := g.expr_string(node.expr)
	g.writeln('for (i32 ${i} = 0; ${i} < ${container}.length; ${i}++) {')
	// TODO for in map
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) loop_control_stmt(node ast.LoopControlStmt){
	g.writeln(node.kind.c_repr() + ';')
}

fun (mut g Gen) static_decl(node ast.StaticDecl){
	name := c_name(node.name)
	pkg := c_name(g.pkg)
	expr := g.expr_string(node.expr)
	typ := g.typ(node.typ)
	g.globals_out += '${typ} ${pkg}__${name} = ${expr};\n'
}

fun (g Gen) interface_decl(node ast.InterfaceDecl){
	if node.lang != .bait {
		return
	}
	errors.error(g.path, node.pos, 'Bait interfaces are not yet supported')
	exit(1)
}

fun (mut g Gen) return_stmt(node ast.ReturnStmt){
	g.save_stmt_offset()
	g.write('return')
	if not (node.expr is ast.InvalidExpr) {
		g.write(" ")
		g.expr(node.expr)
	}
	g.writeln(';')
}
