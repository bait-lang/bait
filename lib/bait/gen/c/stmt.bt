// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package c

import bait.ast
import bait.errors

fun (g Gen) stmts(stmts []ast.Stmt) {
	g.indent += 1
	for stmt in stmts {
		g.stmt(stmt)
	}
	g.indent -= 1
}

fun (g Gen) stmt(stmt ast.Stmt) {
	match stmt {
		ast.AssignStmt { g.assign_stmt(stmt) }
		ast.ExprStmt { g.expr_stmt(stmt) }
		ast.ForLoop { g.for_loop(stmt) }
		ast.ForClassicLoop { g.for_classic_loop(stmt) }
		ast.FunDecl { g.fun_decl(stmt) }
		ast.InterfaceDecl { g.interface_decl(stmt) }
		ast.ReturnStmt { g.return_stmt(stmt) }
		ast.StructDecl {} // see write_types()
		ast.TypeDecl {} // see write_types()
		else {}
	}
}

fun (g Gen) assign_stmt(node ast.AssignStmt) {
	if node.op == .decl_assign {
		type_str := g.typ(node.right_type)
		g.write('${type_str} ')
	}

	g.is_lhs_assign = true
	g.expr(node.left)
	g.is_lhs_assign = false

	if g.is_array_map_set {
		g.write('{')
		g.expr(node.right)
		g.writeln('});')
		g.is_array_map_set = false
		return
	}
	g.write(' ')
	g.write(node.op.js_repr())
	g.write(' ')
	g.expr(node.right)
	if not g.is_for_loop_head {
		g.writeln(';')
	}
}

fun (g Gen) expr_stmt(node ast.ExprStmt) {
	g.expr(node.expr)
	if not g.empty_line {
		g.writeln(";")
	}
}

fun (g Gen) write_label(label string){
	if label.length > 0 {
		g.writeln('${label}: ')
	}
}

fun (g Gen) for_loop(node ast.ForLoop) {
	g.write('while (')
	g.expr(node.cond)
	g.writeln(') {')
	g.stmts(node.stmts)
	g.writeln('}')

	g.write_label(node.label)
}

fun (g Gen) for_classic_loop(node ast.ForClassicLoop) {
	g.is_for_loop_head = true
	g.write('for (')
	g.stmt(node.init)
	g.write('; ')
	g.expr(node.cond)
	g.write('; ')
	g.stmt(node.inc)
	g.writeln(') {')
	g.is_for_loop_head = false
	g.stmts(node.stmts)
	g.writeln('}')

	g.write_label(node.label)
}

fun (g Gen) fun_decl(node ast.FunDecl) {
	if node.lang != .bait {
		return
	}

	type_str := g.typ(node.return_type)
	mut name := c_name(node.name)
	if node.is_method {
		// TODO
	}
	s := '${type_str} ${name}('

	g.fun_decls_out += s
	g.write(s)
	g.fun_params(node.params)
	g.fun_decls_out += ');\n'
	g.writeln(') {')
	g.stmts(node.stmts)
	g.writeln('};\n')
}

fun (g Gen) fun_params(params []ast.Param){
	for i, p in params {
		type_str := g.typ(p.typ)
		s := '${type_str} ${c_name(p.name)}'

		g.fun_decls_out += s
		g.write(s)

		if i < params.length - 1 {
			g.fun_decls_out += ", "
			g.write(", ")
		}
	}
}

fun (g Gen) interface_decl(node ast.InterfaceDecl){
	if node.lang != .bait {
		return
	}
	errors.error(g.path, node.pos, 'Bait interfaces are not yet supported')
	exit(1)
}

fun (g Gen) return_stmt(node ast.ReturnStmt){
	g.write('return')
	if not node.expr is ast.EmptyExpr {
		g.write(" ")
		g.expr(node.expr)
	}
	g.writeln(';')
}
