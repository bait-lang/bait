// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package c

import bait.ast
import bait.errors

fun (g Gen) gen_equality_funs() {
	for typ in g.table.needed_equality_funs {
		_ = g.equality_fun(typ)
	}
}

fun (g Gen) equality_fun(typ ast.Type) string {
	sym := g.table.get_sym(typ)
	if sym.kind == .number or sym.kind == .other {
		// Simple builtin types have this type. They don't need an equality function
		return ''
	}

	// Enums can use normal == and !=
	if sym.kind == .enum_ {
		return ''
	}

	// Equality is manually defined as overload
	if sym.overloads.contains('==') {
		return ''
	}

	// Generics types don't need an equality function
	if sym.kind == .generic {
		return ''
	}

	errors.generic_error('cannot generate equality function for type ${sym.name}')
	exit(1)
}
