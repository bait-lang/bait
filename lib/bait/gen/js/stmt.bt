// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package js

import bait.ast
import bait.errors
import bait.token
import bait.util.escape

fun (mut g Gen) stmts(stmts []ast.Stmt) {
	g.save_stmt_offset()
	g.indent += 1
	for stmt in stmts {
		g.stmt(stmt)
	}
	g.indent -= 1
}

fun (mut g Gen) stmt(stmt ast.Stmt) {
	if stmt is ast.AssertStmt {
		g.assert_stmt(stmt)
	} else if stmt is ast.AssignStmt {
		g.assign_stmt(stmt)
	} else if stmt is ast.Block {
		g.block(stmt)
	} else if stmt is ast.ConstDecl {
		g.const_decl(stmt)
	} else if stmt is ast.ExprStmt {
		g.save_stmt_offset()
		g.expr(stmt.expr)
		if not g.empty_line {
			g.writeln("")
		}
	} else if stmt is ast.EnumDecl {
		g.enum_decl(stmt)
	} else if stmt is ast.ForLoop {
		g.for_loop(stmt)
	} else if stmt is ast.ForClassicLoop {
		g.for_classic_loop(stmt)
	} else if stmt is ast.ForInLoop {
		g.for_in_loop(stmt)
	} else if stmt is ast.FunDecl {
		g.fun_decl(stmt)
	} else if stmt is ast.StaticDecl {
		g.static_decl(stmt)
	} else if stmt is ast.IfMatch {
		g.if_match(stmt)
	} else if stmt is ast.InterfaceDecl {
		g.interface_decl(stmt)
	} else if stmt is ast.LoopControlStmt {
		g.loop_control_stmt(stmt)
	} else if stmt is ast.ReturnStmt {
		g.return_stmt(stmt)
	} else if stmt is ast.StructDecl {
		g.struct_decl(stmt)
	} else if stmt is ast.TypeDecl {
		g.type_decl(stmt)
	} else if stmt is ast.Void {
		// nothing to do
	} else {
		panic("cannot gen ${stmt}")
	}
}

fun (mut g Gen) assert_stmt(node ast.AssertStmt) {
	// Note: non-test assert is handled by transformer

	if node.expr is ast.InfixExpr {
		g.assert_infix(node)
		return
	}

	g.write('if (')
	g.expr(node.expr)
	g.writeln(') {')
	g.writeln('\tTestRunner_pass(builtin__test_runner)')
	g.writeln('} else {')
	g.write('\tTestRunner_fail(builtin__test_runner, ${node.pos.line}, from_js_string("assert ')
	g.assert_side_src(node.expr)
	g.writeln('"))')
	g.writeln('}')
}

fun (mut g Gen) assert_infix(node ast.AssertStmt) {
	expr := node.expr as ast.InfixExpr
	tmpl := g.new_temp_var()
	tmpr := g.new_temp_var()

	g.write("const ${tmpl} = ")
	g.expr(expr.left)
	g.writeln('')
	g.write("const ${tmpr} = ")
	g.expr(expr.right)
	g.writeln('')

	new_infix := ast.InfixExpr{
		left = ast.Ident{ name = tmpl }
		left_type = expr.left_type
		op = expr.op
		right = ast.Ident{ name = tmpr }
		right_type = expr.right_type
	}
	g.write('if (')
	g.expr(new_infix)
	g.writeln(') {')
	g.writeln('\tTestRunner_pass(builtin__test_runner)')
	g.writeln('} else {')
	g.write('\tTestRunner_fail_infix(builtin__test_runner, ${node.pos.line}, from_js_string("assert ')
	g.assert_side_src(expr.left)
	g.write(' ${expr.op.js_repr()} ')
	g.assert_side_src(expr.right)
	g.write('"), ')
	g.expr_to_string(new_infix.left, expr.left_type)
	g.write(', ')
	g.expr_to_string(new_infix.right, expr.right_type)
	g.writeln(')')
	g.writeln('}')
}

fun (mut g Gen) assert_side_src(node ast.Expr) {
	if node is ast.BoolLiteral {
		g.bool_literal(node)
	} else if node is ast.IntegerLiteral {
		g.integer_literal(node)
	} else if node is ast.StringLiteral {
		g.write("'")
		g.write(escape.linebreak(node.val))
		g.write("'")
	} else if node is ast.CharLiteral {
		g.write("`")
		g.write(node.val)
		g.write("`")
	} else if node is ast.ArrayInit {
		g.write('[')
		for i, expr in node.exprs {
			g.assert_side_src(expr)
			if i < node.exprs.length - 1 {
				g.write(', ')
			}
		}
		g.write(']')
	} else if node is ast.Ident {
		g.write(node.full_name())
	} else if node is ast.ArrayInit {
		g.write('[')
		for i, expr in node.exprs {
			g.assert_side_src(expr)
			if i < node.exprs.length - 1 {
				g.write(', ')
			}
		}
		g.write(']')
	} else if node is ast.IndexExpr {
		g.assert_side_src(node.left)
		g.write('[')
		g.assert_side_src(node.index)
		g.write(']')
	} else if node is ast.SelectorExpr {
		g.assert_side_src(node.expr)
		g.write('.${node.field_name}')
	} else if node is ast.ComptimeVar {
		g.write('$')
		g.write(node.kind.str())
	} else {
		g.write('UNHANDLED EXPR')
	}
}

fun (mut g Gen) assign_stmt(node ast.AssignStmt){
	g.save_stmt_offset()
	if node.op == .decl_assign {
		left := node.left as ast.Ident
		if left.is_mut {
			g.write('let ')
		} else {
			g.write('const ')
		}
	}

	g.is_lhs_assign = true
	g.expr(node.left)
	g.is_lhs_assign = false

	lsym := g.table.get_sym(node.left_type)
	if lsym.overloads.contains(node.op.js_repr()) {
		g.write(' = ')
		overload := lsym.overloads[node.op.js_repr()]
		g.write(js_esc(lsym.mix_name + '_' + overload.name))
		g.write('(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.right)
		g.writeln(')')
		return
	}

	if g.is_array_map_set {
		g.expr(node.right)
		g.writeln(')')
		g.is_array_map_set = false
		return
	}

	g.write(' ')
	g.write(node.op.js_repr())
	g.write(' ')
	g.expr(node.right)
	if not g.is_for_loop_head {
		g.writeln('')
	}
}

fun (mut g Gen) block(node ast.Block) {
	g.save_stmt_offset()
	g.writeln('{')
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) const_decl(node ast.ConstDecl){
	pkg := js_name(g.pkg) // TODO optimize this by caching (also cgen)
	name := js_name(node.name)

	g.save_stmt_offset()
	g.write('const ${pkg}__${name} = ')
	g.expr(node.expr)
	g.writeln('')
}

fun (mut g Gen) enum_decl(node ast.EnumDecl){
	if node.lang != .bait {
		return
	}

	g.writeln('const ' + js_esc(node.name) + ' = {')
	g.indent += 1
	for field in node.fields {
		g.write('${field.name}: ')
		g.expr(field.expr)
		g.writeln(',')
	}
	g.indent -= 1
	g.writeln('}')
}

fun (mut g Gen) loop_control_stmt(node ast.LoopControlStmt){
	g.write(node.kind.js_repr())
	if node.label.length > 0 {
		g.writeln(' ${node.label}')
	} else {
		g.writeln('')
	}
}

fun (mut g Gen) write_label(label string){
	if label.length > 0 {
		g.write('${label}: ')
	}
}

fun (mut g Gen) for_loop(node ast.ForLoop){
	g.write_label(node.label)

	g.write('while (')
	g.expr(node.cond)
	g.writeln(') {')
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) for_classic_loop(node ast.ForClassicLoop){
	g.write_label(node.label)

	g.is_for_loop_head = true
	g.write('for (')
	g.stmt(node.init)
	g.write('; ')
	g.expr(node.cond)
	g.write('; ')
	g.stmt(node.inc)
	g.writeln(') {')
	g.is_for_loop_head = false
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) for_in_loop(node ast.ForInLoop){
	g.write_label(node.label)

	sym := g.table.get_sym(node.expr_type)
	if sym.kind == .map {
		g.for_in_map(node)
		return
	}

	i := g.expr_string(node.idxvar)
	container := g.expr_string(node.expr)
	g.writeln('for (let ${i} = 0; ${i} < ${container}.length; ${i}++) {')
	val_name := js_esc(node.valvar.name)
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) for_in_map(node ast.ForInLoop){
	container := g.expr_string(node.expr)
	keys_var := g.new_temp_var()
	g.writeln('const ${keys_var} = Map_keys(${container})')
	i := g.new_temp_var()
	idxvar := g.expr_string(node.idxvar)
	g.writeln('for (let ${i} = 0; ${i} < ${keys_var}.length; ${i}++) {')
	g.writeln('\tconst ${idxvar} = Array_get(${keys_var}, ${i})')
	g.stmts(node.stmts)
	g.writeln('}')
}

fun (mut g Gen) static_decl(node ast.StaticDecl){
	name := js_name(node.name)
	pkg := js_name(g.pkg)
	expr := g.expr_string(node.expr)
	g.global_out += 'var ${pkg}__${name} = ${expr}\n'
}

fun (mut g Gen) interface_decl(node ast.InterfaceDecl){
	if node.lang != .bait {
		return
	}
	errors.err(g.path, node.pos, 'Bait interfaces are not yet supported')
	exit(1)
}

fun (mut g Gen) return_stmt(node ast.ReturnStmt){
	g.save_stmt_offset()

	g.write('return')
	if not (node.expr is ast.InvalidExpr) {
		g.write(" ")
		g.expr(node.expr)
	}
	g.writeln('')
}

fun (mut g Gen) type_decl(node ast.TypeDecl){
	sym := g.table.get_sym(node.typ)
	if sym.kind != .alias_type {
		return
	}

	g.write('function ')
	g.write(js_esc(node.name))
	g.writeln('(val) { return val }')
}
