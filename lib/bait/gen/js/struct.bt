// Copyright (c) 2023-present Lukas Neubert.
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package js

import bait.ast

fun (mut g Gen) struct_decl(node ast.StructDecl){
	if node.lang != .bait {
		return
	}

	g.write('function ')
	jsname := js_name(node.pkg_prefix + node.name)
	g.write(jsname)
	g.write('({ ')
	for i, field in node.fields {
		g.write('${field.name} = ')
		if node.typ == field.typ {
			g.write('this')
		} else if not (field.expr is ast.EmptyExpr) {
			g.expr(field.expr)
		} else {
			g.write_default_value(field.typ)
		}
		if i < node.fields.length - 1 {
			g.write(', ')
		}
	}
	if node.fields.length > 0 {
		g.write(' ')
	}
	g.writeln('}) {')
	g.indent += 1
	for field in node.fields {
		g.writeln('this.${field.name} = ${field.name}')
	}
	g.indent -= 1
	g.writeln('}')
}

fun (mut g Gen) struct_init(node ast.StructInit) {
	g.write('new ' + js_name(node.name) + '({')
	if node.fields.length == 0 {
		g.write('})')
		return
	}
	g.write(' ')
	for i, field in node.fields {
		g.write('${field.name}: ')
		g.expr(field.expr)
		if i < node.fields.length - 1 {
			g.write(', ')
		}
	}
	g.write(' })')
}
