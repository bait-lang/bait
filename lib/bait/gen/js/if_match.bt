// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package js

import bait.ast

fun (mut g Gen) if_match(node ast.IfMatch){
	tmp := g.new_temp_var()
	mut cut := ''
	if node.is_expr {
		cut = g.cut_back_to(g.stmt_offsets.last()).trim_left('\t')
		g.empty_line = true
		g.writeln('let ${tmp} = undefined')
	}

	for i, b in node.branches {
		if i > 0 {
			g.write("} else ")
		}
		if node.has_else and i == node.branches.length - 1 {
			g.writeln("{")
		} else {
			g.write("if (")
			g.expr(b.cond)
			g.writeln(") {")
		}

		branch_start := g.out.length
		g.stmts(b.stmts)

		if node.is_expr {
			if g.empty_line {
				g.cut_before(`\n`)
			}
			last_line_cut := g.cut_before(`\t`)

			branch_cut := g.cut_back_to(branch_start).trim_right('\n\t')
			if branch_cut.length > 0 {
				g.writeln(branch_cut)
			}

			g.writeln('\t${tmp} = ${last_line_cut}')
		}
	}
	g.writeln('}')

	if node.is_expr {
		g.write(cut)
		g.write(tmp)
	}
}
