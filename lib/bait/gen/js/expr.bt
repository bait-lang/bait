// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package js

import bait.ast
import bait.token
import bait.util
import bait.errors
import os

fun (mut g Gen) expr(expr ast.Expr) {
	match expr {
		ast.AnonFun { g.anon_fun(expr) }
		ast.ArrayInit { g.array_init(expr) }
		ast.AsCast { g.as_cast(expr) }
		ast.BoolLiteral { g.bool_literal(expr) }
		ast.CallExpr { g.call_expr(expr) }
		ast.CharLiteral { g.char_literal(expr) }
		ast.ComptimeVar { g.comptime_var(expr) }
		ast.EnumVal { g.enum_val(expr) }
		ast.FloatLiteral { g.float_literal(expr) }
		ast.HashExpr { g.hash_expr(expr) }
		ast.Ident { g.ident(expr) }
		ast.IfMatch { g.if_match(expr) }
		ast.IndexExpr { g.index_expr(expr) }
		ast.InfixExpr { g.infix_expr(expr) }
		ast.IntegerLiteral { g.integer_literal(expr) }
		ast.MapInit { g.map_init(expr) }
		ast.ParExpr { g.par_expr(expr) }
		ast.PrefixExpr { g.prefix_expr(expr)}
		ast.SelectorExpr { g.selector_expr(expr) }
		ast.StringLiteral { g.string_literal(expr) }
		ast.StringInterLiteral { g.string_inter_literal(expr) }
		ast.StructInit { g.struct_init(expr) }
		ast.TypeOf{ g.type_of(expr)}
		ast.Void {} // nothing to do
		ast.EmptyExpr { panic('unexpected EmptyExpr') }
	}
}

fun (mut g Gen) expr_string(expr ast.Expr) string {
	was_line_empty := g.empty_line
	start := g.out.length
	g.expr(expr)
	s := g.out.substr(start, g.out.length)
	g.out = g.out.substr(0, start)
	g.empty_line = was_line_empty
	return s.trim_space()
}

fun (mut g Gen) anon_fun(node ast.AnonFun) {
	g.write('function (')
	for i, param in node.decl.params {
		g.write(param.name)
		if i < node.decl.params.length - 1 {
			g.write(', ')
		}
	}
	g.writeln(') {')
	g.stmts(node.decl.stmts)
	g.write('}')
}

fun (mut g Gen) array_init(node ast.ArrayInit) {
	g.write('new bait_Array({ data: ')
	if node.length_expr is ast.EmptyExpr {
		g.write('[')
		for i, expr in node.exprs {
			g.expr(expr)
			if i < node.exprs.length - 1 {
				g.write(', ')
			}
		}
		g.write('], length: ${node.exprs.length} })')
		return
	}

	len := g.expr_string(node.length_expr)
	g.write('Array.from({ length: ${len} }, (v, i) => ')
	g.write_default_value(node.elem_type)
	g.write('), length: ${len} })')
}

fun (mut g Gen) as_cast(node ast.AsCast) {
	if node.target == ast.I64_TYPE or node.target == ast.U64_TYPE or node.target == ast.U32_TYPE {
		g.write('BigInt(')
		g.expr(node.expr)
		if node.expr is ast.IntegerLiteral {
			g.write('n')
		}
		g.write(')')
		return
	}

	if node.expr_type == ast.I64_TYPE or node.expr_type == ast.U64_TYPE or node.expr_type == ast.U32_TYPE {
		g.write('Number(')
		g.expr(node.expr)
		g.write(')')
		return
	}

	g.expr(node.expr)
}

fun (mut g Gen) bool_literal(node ast.BoolLiteral){
	if node.val {
		g.write('true')
	} else {
		g.write('false')
	}
}

fun (mut g Gen) char_literal(node ast.CharLiteral) {
	g.write('u8("')
	g.write(util.escape_char(node.val, `\"`))
	g.write('")')
}

fun (mut g Gen) enum_val(node ast.EnumVal) {
	g.write(js_name(node.name) + '.' + node.val)
}

fun (mut g Gen) float_literal(node ast.FloatLiteral){
	g.write(node.val)
}

fun (mut g Gen) hash_expr(node ast.HashExpr) {
	g.write(node.val)
}

fun (mut g Gen) ident(node ast.Ident) {
	if node.lang == .js {
		g.write(node.name)
		return
	}

	g.write(js_name(node.name))
}

fun (mut g Gen) integer_literal(node ast.IntegerLiteral){
	g.write(node.val)
}

fun (mut g Gen) index_expr(node ast.IndexExpr){
	sym := g.table.get_sym(node.left_type)
	if sym.kind == .map {
		if g.is_lhs_assign and not node.is_selector {
			g.is_array_map_set = true
			g.write('Map_set(')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(', ')
		} else {
			g.write('Map_get_set(')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(', ')
			info := sym.info as ast.MapInfo
			g.write_default_value(info.val_type)
			g.write(')')
		}
		return
	}

	if sym.kind == .array {
		if g.is_lhs_assign and not node.is_selector {
			g.is_array_map_set = true
			g.write('Array_set(')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(', ')
		} else {
			g.write('Array_get(')
			g.expr(node.left)
			g.write(', ')
			g.expr(node.index)
			g.write(')')
		}
		return
	}

	if sym.kind == .string {
		g.write('string_get(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.index)
		g.write(')')
		return
	}

	g.expr(node.left)
	g.write('[')
	g.expr(node.index)
	g.write(']')
}

fun (mut g Gen) infix_expr(node ast.InfixExpr){
	// TODO should overloading be recursive like methods too?
	lsym := g.concrete_sym(node.left_type)
	if lsym.overloads.contains(node.op.js_repr()) {
		overload := lsym.overloads[node.op.js_repr()]
		if node.op == .ne {
			g.write('!')
		}
		g.write(js_name(lsym.name + '_' + overload.name))
		g.write('(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.right)
		g.write(')')
		return
	}

	// Use builtin deep equal function
	if node.op == .eq or node.op == .ne {
		if node.op == .ne {
			g.write('!')
		}
		g.write('eq(')
		g.expr(node.left)
		g.write(', ')
		g.expr(node.right)
		g.write(')')
		return
	}

	// Normal cases
	if lsym.kind == .number {
		g.write('${lsym.name}(')
	}
	g.expr(node.left)
	g.write(' ')
	g.write(node.op.js_repr())
	g.write(' ')
	g.expr(node.right)
	if lsym.kind == .number {
		g.write(')')
	}
}

fun (mut g Gen) map_init(node ast.MapInit) {
	g.write('new bait_Map({ data: new Map([')
	for i, key in node.keys {
		g.write('[')
		g.expr_to_string(key, node.key_type)
		g.write('.str, ')
		g.expr(node.vals[i])
		g.write(']')
		if i < node.keys.length - 1 {
			g.write(', ')
		}
	}
	g.write(']), length: ${node.keys.length} })')
}

fun (mut g Gen) par_expr(node ast.ParExpr){
	g.write('(')
	g.expr(node.expr)
	g.write(')')
}

fun (mut g Gen) prefix_expr(node ast.PrefixExpr){
	if node.op != .mul and node.op != .amp {
		g.write(node.op.js_repr())
	}
	if node.right is ast.InfixExpr and (node.right as ast.InfixExpr).op == .key_is {
		g.write('(')
		g.expr(node.right)
		g.write(')')
		return
	}
	g.expr(node.right)
}

fun (mut g Gen) selector_expr(node ast.SelectorExpr) {
	g.expr(node.expr)
	g.write('.')
	g.write(node.field_name)
}

fun (mut g Gen) string_literal(node ast.StringLiteral) {
	val := util.escape_char(util.escape_linebreak(node.val), `\"`)

	if node.lang == .js {
		g.write('"')
		g.write(val)
		g.write('"')
	} else {
		g.write('from_js_string("')
		g.write(val)
		g.write('")')
	}
}

fun (mut g Gen) string_inter_literal(node ast.StringInterLiteral) {
	g.write('from_js_string(`')
	for i, val in node.vals {
		g.write(util.escape_char(val, `\``))
		if i < node.exprs.length {
			g.write('\${')
			g.expr_to_string(node.exprs[i], node.expr_types[i])
			g.write('.str}')
		}
	}
	g.write('`)')
}

fun (mut g Gen) type_of(node ast.TypeOf) {
	sym := g.concrete_sym(node.typ)
	amp := '*'.repeat(node.typ.get_nr_amp())
	g.write('from_js_string("' + amp + sym.name + '")')
}

fun (mut g Gen) expr_to_string(expr ast.Expr, typ ast.Type) {
	sym := g.table.get_sym(typ)
	if sym.kind == .string {
		g.expr(expr)
		return
	}

	str_def := g.table.get_method(sym, 'str')
	if str_def.name.length > 0 {
		final_sym := g.table.get_sym(str_def.params[0].typ)
		mut name := js_name(final_sym.name)
		g.write('${name}_str(')
		g.expr(expr)
		g.write(')')
		return
	}

	if sym.kind == .generic {
		g.expr_to_string(expr, g.cur_concrete_types[sym.name])
		return
	}

	name := g.get_str_fun(typ)
	g.write('${name}(')
	g.expr(expr)
	g.write(', 0)')
}
