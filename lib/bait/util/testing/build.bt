// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package testing

import os

pub struct BuildRunner{
	root string
pub mut:
	fails i32
global:
	cmd_options string
}

pub fun (mut runner BuildRunner) build_single(name string) {
	cmd := 'node ${$BAITEXE} ${runner.cmd_options} ${runner.root}/${name}'
	code := os.system(cmd)

	if code == 0 {
		println('OK ${name}')
		return
	}

	eprintln('FAIL ${name}')
	runner.fails += 1
}

pub fun (runner BuildRunner) build_all_in_root() {
	files := os.ls(runner.root)
	for file in files {
		if not file.ends_with('.bt') {
			continue
		}

		runner.build_single(file)
	}
}

@deprecated: 'use BuildRunner instead'
pub fun build_file(dir string, file string) i32 {
	mut r := BuildRunner{
		root = dir
	}
	r.build_single(file)
	return r.fails
}

@deprecated: 'use BuildRunner instead'
pub fun build_files_in_dir(dir string) {
	mut r := BuildRunner{
		root = dir
	}
	r.build_all_in_root()

	if r.fails > 0 {
		exit(1)
	}
}
