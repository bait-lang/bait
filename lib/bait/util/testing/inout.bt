// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package testing

import os

pub struct InOutRunner {
	root string // Root directory to search tests in
	check_stdout bool // Compare expected to stdout instead of stderr
global:
	cmd_options string // Additional cmd options for compiling the tests
}

pub fun (runner InOutRunner) test_dir(dir string) {
	if not os.is_dir(dir) {
		return
	}

	expected := read_out_file('${dir}/expected.in.bt')
	res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} run ${dir}')
	runner.check_result(res, expected)
}

pub fun (runner InOutRunner) test_subdirs(root string) {
	dirs := os.ls(root)
	for dir in dirs {
		in_dir := os.join_path(root, [dir])
		runner.test_dir(in_dir)
	}
}

fun (runner InOutRunner) check_result(res os.Result, expected string) {
	if runner.check_stdout {
		assert expected == res.stdout
	} else {
		assert expected == res.stderr
	}
}

pub fun in_out_runner(runner InOutRunner) {
	in_files := os.walk_ext(runner.root, '.bt')

	for file in in_files {
		// Warn if a file lacks the .in.bt extension. This might be a mistake
		if not file.ends_with('.in.bt') {
			eprintln('warning: file ${file} does not end with .in.bt')
			continue
		}

		name_ext := os.file_name(file)

		mut cmd := 'build'
		if runner.check_stdout {
			cmd = 'run'
		}
		if name_ext.contains('_test.') {
			cmd = 'test'
		}

		expected := read_out_file(file)
		res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} ${cmd} ${file}')
		runner.check_result(res, expected)
	}
}

fun read_out_file(in_file_path string) string {
	out_file := in_file_path.replace('.in.bt', '.out')
	if not os.exists(out_file) {
		eprintln('out file ${out_file} does not exist')
		assert false
		return ''
	}

	return os.read_file(out_file)
}
