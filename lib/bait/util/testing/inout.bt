// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package testing

import os

pub struct InOutRunner {
	fix_out_file bool // CAUTION: Overwrites out files with the actual output
	check_stdout bool // Compare expected to stdout instead of stderr
	global root string // Root directory to search tests in
	global cmd_options string // Additional cmd options for compiling the tests
	global skips []string
}

pub fun (runner InOutRunner) test_dir(dir string) {
	if runner.skips.contains(dir) {
		eprintln('skipping ${dir}')
		return
	}

	abs_dir := os.join_path(runner.root, [dir])
	if not os.exists_dir(abs_dir) {
		return
	}

	res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} run ${abs_dir}')
	if runner.check_stdout and res.code != 0 {
		eprintln('compilation failed: ${res.stderr}')
		assert false
		return
	}

	runner.check_result(res, '${abs_dir}/expected.out')
}

pub fun (runner InOutRunner) test_all_in_root() {
	dirs := os.ls(runner.root)
	for dir in dirs {
		runner.test_dir(dir)
	}
}

fun (runner InOutRunner) check_result(res os.CmdRes, out_path string) {
	// Fix mode: just overwrite the out file
	if runner.fix_out_file {
		if runner.check_stdout {
			os.write_file(out_path, res.stdout)
		} else {
			os.write_file(out_path, res.stderr)
		}
		return
	}

	// Read out file
	if not os.exists(out_path) {
		eprintln('out file ${out_path} does not exist')
		assert false
		return
	}
	expected := normalize(os.read_file(out_path))

	// Compare result
	if runner.check_stdout {
		text := normalize(res.stdout)
		assert text == expected
	} else {
		text := normalize(res.stderr)
		assert text == expected
	}
}

pub fun in_out_runner(runner InOutRunner) {
	in_files := os.walk_ext(runner.root, '.bt')

	for file in in_files {
		// Warn if a file lacks the .in.bt extension. This might be a mistake
		if not file.ends_with('.in.bt') {
			eprintln('warning: file ${file} does not end with .in.bt')
			continue
		}

		if runner.skips.contains(normalize(file)) {
			eprintln('skipping ${file}')
			continue
		}

		name_ext := os.file_name(file)

		mut cmd := 'build'
		if runner.check_stdout {
			cmd = 'run'
		}
		if name_ext.contains('_test.') {
			cmd = 'test'
		}

		res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} ${cmd} ${file}')

		runner.check_result(res, file.replace('.in.bt', '.out'))
	}
}

fun normalize(s string) string {
	return s.replace('\\', '/').replace('\r\n', '\n')
}
