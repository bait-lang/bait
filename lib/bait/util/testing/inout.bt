// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package testing

import os

pub struct InOutRunner {
	root string // Root directory to search tests in
	cmd_options string // Additional cmd options for compiling the tests
	check_stdout bool // Compare expected to stdout instead of stderr
}

fun (runner InOutRunner) check_result(res os.Result, expected string) {
	if runner.check_stdout {
		assert expected == res.stdout
	} else {
		assert expected == res.stderr
	}
}

pub fun in_out_runner(runner InOutRunner) {
	in_files := os.walk_ext(runner.root, '.in.bt')

	for file in in_files {
		mut in_path := file
		name_ext := os.file_name(file)
		name := name_ext.all_before('.in.bt')

		mut cmd := 'build'
		if runner.check_stdout {
			cmd = 'run'
		}
		is_test := name_ext.contains('_test.in.bt')
		if is_test {
			cmd = 'test'
			in_path = file.replace('.in', '')
			os.cp(file, in_path)
		}

		expected := read_out_file(runner.root, name)
		res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} ${cmd} ${in_path}')
		runner.check_result(res, expected)

		if is_test {
			os.rm(in_path)
		}
	}
}

pub fun in_out_dir_runner(runner InOutRunner) {
	dirs := os.ls(runner.root)
	for dir in dirs {
		in_dir := os.join_path(runner.root, [dir])
		if not os.is_dir(in_dir) {
			continue
		}

		expected := read_out_file(in_dir, 'expected')
		res := os.exec('node ${$BAITEXE} --nocolor ${runner.cmd_options} run ${in_dir}')
		runner.check_result(res, expected)
	}
}

fun read_out_file(dir string, name string) string {
	out_file := '${dir}/${name}.out'
	if not os.exists(out_file) {
		eprintln('out file ${out_file} does not exist')
		assert false
		return ''
	}

	return os.read_file(out_file)
}
