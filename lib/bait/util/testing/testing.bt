// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package testing

import os

pub fun build_files_in_dir(dir string) {
	mut fails := 0
	files := os.ls(dir)

	for file in files {
		if not file.ends_with('.bt') {
			continue
		}

		cmd := 'node ${$BAITEXE} ${dir}/${file}'
		res := os.exec(cmd)

		if res.code == 0 {
			println('OK ${file}')
		} else {
			eprintln('FAIL ${file}')
			eprintln(res.stderr)
			fails += 1
		}
	}

	if fails > 0 {
		exit(1)
	}
}

pub fun in_out_runner(dir string) {
	in_files := os.walk_ext(dir, '.in.bt')

	for file in in_files {
		mut in_path := file
		name_ext := os.file_name(file)
		name := name_ext.all_before('.in.bt')

		out_file := '${dir}/${name}.out'
		assert os.exists(out_file)

		mut cmd := 'build'
		is_test := name_ext.contains('_test.in.bt')
		if is_test {
			cmd = 'test'
			in_path = file.replace('.in', '')
			os.cp(file, in_path)
		}

		expected := os.read_file(out_file)
		res := os.exec('node ${$BAITEXE} --nocolor --script ${cmd} ${in_path}')
		assert expected == res.stderr

		if is_test {
			os.rm(in_path)
		}
	}
}
