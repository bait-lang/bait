// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package tools

import os
import bait.preference

// List of commands implemented as tool
const TOOLS := [
	'ast',
	'init',
	'self',
	'up',
	'symlink',
	'doctor',
	'help',
	'test-all',
	'build-examples',
	'build-tools',
	'check-md',
]

pub fun is_tool(name string) bool {
	return TOOLS.contains(name)
}

// TODO prepare for C backend (respect -b option)

pub fun launch(prefs preference.Prefs) i32 {
	base_path := os.join_path($BAITDIR, ['cli', 'tools', prefs.command])
	tool_source := find_tool_source(base_path)
	tool_exe := base_path + '.js'

	// Run Bait to compile the tool
	baitexe := os.executable()
	comp_res := os.exec('node ${baitexe} ${tool_source} -o ${tool_exe}')
	if comp_res.code != 0 {
		eprintln('Failed to compile tool "${prefs.command}" with error: ${comp_res.stderr}')
		return 1
	}

	// Execute
	args_string := prefs.build_options.join(' ')
	if prefs.is_verbose {
		println('launching tool')
		println('  source: ${tool_source}')
		println('  exe:    ${tool_exe}')
		println('  args:   ${args_string}')
	}
	return os.system('node ${tool_exe} ${args_string}')
}

fun find_tool_source(base string) string {
	if os.exists_dir(base) {
		return base
	}
	return base + '.bt'
}
