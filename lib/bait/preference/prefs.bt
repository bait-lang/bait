// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package preference

import os
import bait.errors

pub enum OperatingSystem {
	linux
	windows
}

pub struct Prefs {
	global command string
	global out_name string

	pub mut has_double_dash bool
	pub mut user_args []string

	global should_run bool
	pub mut is_verbose bool
	pub mut show_timings bool
	pub mut backend Backend
	pub mut os OperatingSystem

	// Compile mode
	pub mut compile bool
	pub mut is_test bool
	pub mut is_script bool
	pub mut is_library bool
	pub mut keep_exe bool
	pub mut cc string := 'cc'

	// Error related
	pub mut hide_warnings bool
	pub mut warn_is_error bool
}

pub fun parse_args(args []string) !Prefs {
	mut p := Prefs{
		backend = .js
		os = os_from_string(os.platform())
	}

	// Show help if no arguments are given
	if args.length == 0 {
		p.command = 'help'
		return p
	}

	mut other_args := []string

	// Parse options and commands
	for i := 0; i < args.length; i += 1{
		arg := args[i]
		match arg {
			'-b', '--backend' {
				i += 1
				p.backend = backend_from_string(args[i])
			}
			'-os', '--os' {
				i += 1
				p.os = os_from_string(args[i])
			}
			"-o", '--out' {
				i += 1
				p.out_name = args[i]
			}
			'-cc', '--cc' {
				i += 1
				p.cc = args[i]
			}
			'-v', '--verbose' {
				p.is_verbose = true
			}
			'-k', '--keep' {
				p.keep_exe = true
			}
			'--library' {
				p.is_library = true
			}
			'-w' {
				p.hide_warnings = true
			}
			'-W' {
				p.warn_is_error = true
			}
			'--nocolor' {
				os.setenv('BAITCOLOR', '0')
			}
			'--script' {
				p.is_script = true
			}
			'--timings' {
				p.show_timings = true
			}
			'--' {
				p.has_double_dash = true
				p.user_args = args.slice(i + 1, args.length)
				break
			}
			else{
				if p.command.length == 0 {
					p.command = arg
				} else {
					other_args.push(arg)
				}
			}
		}
	}

	if p.hide_warnings and p.warn_is_error {
		errors.generic_error('Cannot use -w and -W together.')
		exit(1)
	}

	// `build`, `run` and `test` are defined by various compile flags
	if p.command == 'build' {
		p.compile = true
	} else if p.command == 'run' {
		p.compile = true
		p.should_run = true
	} else if p.command == 'test' {
		p.compile = true
		p.should_run = true
		p.keep_exe = true
		p.is_test = true
	}

	if p.compile {
		if other_args.length == 0 {
			return error('${p.command}: missing argument <path>')
		}
		p.command = other_args[0]
	} else if not p.has_double_dash {
		p.user_args = other_args
	}

	// Set default out name if empty
	if p.out_name.length == 0 {
		mut ext := ''
		if p.backend == .js {
			ext = '.js'
		}

		if p.command.ends_with('.bt') {
			p.out_name = p.command.replace('.bt', ext)
		} else {
			p.out_name = os.abs_path(p.command).all_after_last(os.PATH_SEP) + ext
		}
	}

	return p
}

fun os_from_string(s string) OperatingSystem {
	return match s {
		'linux' { OperatingSystem.linux }
		'win', 'windows' { .windows }
		else { panic('Invalid OS: ${s}') }
	}
}
