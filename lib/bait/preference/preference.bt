// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package preference

import os
import bait.errors

pub enum Backend {
	js
	c
}

pub struct Prefs {
global:
	command string
	out_name string
	expected_pkg string

pub mut:
	args []string
	build_options []string

	should_run bool
	is_verbose bool
	backend Backend

	// Compile mode
	is_test bool
	is_script bool
	is_library bool
	keep_exe bool

	// Error related
	hide_warnings bool
	warn_is_error bool

	// Values for compile time pseudo variables
	baitexe string
	baitdir string
	baithash string
}

pub fun parse_args(args []string) Prefs {
	mut p := Prefs{
		backend = .js
	}
	// Default action in case of no arguments: help
	if args.length == 0 {
		p.command = 'help'
		return p
	}

	// Parse options and commands
	for i := 0; i < args.length; i += 1{
		arg := args[i]
		match arg {
			'-b', '--backend' {
				i += 1
				p.backend = backend_from_string(args[i])
			}
			"-o", '--out' {
				i += 1
				p.out_name = args[i]
				p.build_options.push(arg)
				p.build_options.push(p.out_name)
			}
			'-v', '--verbose' {
				p.is_verbose = true
				p.build_options.push(arg)
			}
			'-k', '--keep' {
				p.keep_exe = true
			}
			'--library' {
				p.is_library = true
			}
			'-w' {
				p.hide_warnings = true
				p.build_options.push(arg)
			}
			'-W' {
				p.warn_is_error = true
				p.build_options.push(arg)
			}
			'--nocolor' {
				os.setenv('BAITCOLOR', '0')
			}
			'--script' {
				p.is_script = true
			}
			else{
				if p.command.length == 0 {
					p.command = arg
				} else {
					p.args.push(arg)
				}
			}
		}
	}

	p.build_options.push_many(p.args)

	if p.hide_warnings and p.warn_is_error {
		errors.generic_error('Cannot use -w and -W together.')
		exit(1)
	}

	// `build` is just an optional alias and replaced with the filepath
	if p.command == 'build' {
		p.command = p.args[0]
	}
	// `run` is the same but with `should_run` set to true
	if p.command == 'run' {
		p.command = p.args[0]
		p.should_run = true
	}

	if p.command == 'test' {
		p.should_run = true
		p.is_test = true
	}

	// Set default out name if empty
	if p.out_name.length == 0 {
		mut ext := ''
		if p.backend == .js {
			ext = '.js'
		}

		if p.command.ends_with('.bt') {
			p.out_name = p.command.replace('.bt', ext)
		} else {
			p.out_name = p.command + ext
		}
	}

	return p
}

pub fun (mut p Prefs) set_comptime_vars() {
	p.baitexe = os.executable()
	p.baitdir = os.dir(p.baitexe)
	p.baithash = os.exec('git rev-parse --short HEAD').stdout.trim_space()
}

fun backend_from_string(s string) Backend {
	match s {
		'js' { return .js }
		'c' { return .c }
	}
	// TODO error
	return .js
}
