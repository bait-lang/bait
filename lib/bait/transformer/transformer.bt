// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package transformer

import bait.ast
import bait.context
import bait.preference

pub struct Transformer {
	prefs preference.Prefs
	gen_ctx &context.GenContext
	mut path string
}

pub fun (mut t Transformer) transform_files(mut files []ast.File) {
	for mut file in files {
		t.path = file.path

		t.stmts(mut file.stmts)
	}

	if t.prefs.is_test {
		files.push(t.gen_test_main())
	}
}

pub fun (mut t Transformer) stmts(mut stmts []ast.Stmt) {
	// TODO js: fix crash with InvalidExpr
	// for mut stmt in stmts {
	// 	stmt = t.stmt(mut stmt)
	// }

	for i := 0; i < stmts.length; i += 1 {
		stmts[i] = t.stmt(mut stmts[i])
	}
}

fun (mut t Transformer) stmt(mut stmt ast.Stmt) ast.Stmt {
	match stmt {
		ast.AssertStmt { return t.assert_stmt(mut stmt) }
		ast.AssignStmt { return t.assign_stmt(mut stmt) }
		ast.Block { t.stmts(mut stmt.stmts) }
		ast.ConstDecl { return t.const_decl(stmt) }
		ast.ExprStmt { _ = t.expr(mut stmt.expr) }
		ast.EnumDecl {}
		ast.ForLoop { t.for_loop(mut stmt) }
		ast.ForClassicLoop { t.for_classic_loop(mut stmt) }
		ast.ForInLoop { return t.for_in_loop(mut stmt) }
		ast.FunDecl { return t.fun_decl(mut stmt) }
		ast.StaticDecl {}
		ast.IfMatch { t.if_match(mut stmt)}
		ast.InterfaceDecl {}
		ast.LoopControlStmt {}
		ast.ReturnStmt { t.return_stmt(mut stmt) }
		ast.StructDecl {}
		ast.TypeDecl {}
		ast.Void {}
		ast.InvalidStmt {}
	}
	return stmt
}

fun (mut t Transformer) expr(mut expr ast.Expr) ast.Expr {
	match expr {
		ast.AnonFun {}
		ast.ArrayInit {}
		ast.AsCast {}
		ast.BlankIdent {}
		ast.BoolLiteral {}
		ast.CallExpr { t.call_expr(mut expr) }
		ast.CharLiteral {}
		ast.ComptimeVar {}
		ast.EnumVal {}
		ast.FloatLiteral {}
		ast.HashExpr {}
		ast.Ident {}
		ast.IfMatch {}
		ast.IndexExpr { return t.index_expr(expr) }
		ast.InfixExpr { t.infix_expr(mut expr) }
		ast.IntegerLiteral {}
		ast.MapInit {}
		ast.ParExpr {}
		ast.PrefixExpr {}
		ast.RangeExpr {}
		ast.SelectorExpr {}
		ast.StringLiteral {}
		ast.StringInterLiteral {}
		ast.StructInit {}
		ast.TmpVar {}
		ast.TypeOf {}
		ast.Void {}
		ast.InvalidExpr {}
	}
	return expr
}

fun (mut t Transformer) assert_stmt(mut node ast.AssertStmt) ast.Stmt {
	node.expr = t.expr(mut node.expr)

	if not t.prefs.is_test {
		// `if !expr { panic("assert failed") }`
		return ast.IfMatch{
			branches = [
				ast.IfBranch{
					cond = ast.PrefixExpr{
						op = .key_not
						right = node.expr
					}
					stmts = [
						ast.ExprStmt{
							expr = ast.CallExpr{
								name = "panic"
								args = [
									ast.CallArg{
										expr = ast.StringLiteral{ val = "assert failed" }
									}
								]
							}
						} as ast.Stmt
					]
				}
			]
		}
	}

	return node
}

fun (mut t Transformer) assign_stmt(mut node ast.AssignStmt) ast.Stmt {
	// JS: allow for correct integer rounding
	if t.prefs.backend == .js and node.op == .div_assign {
		node.op = .assign
		node.right = ast.InfixExpr{
			op = .div
			left_type = node.left_type
			left = node.left
			right = node.right
		}
	}

	node.left = t.expr(node.left)
	node.right = t.expr(node.right)

	if t.prefs.backend == .c and node.left is ast.BlankIdent {
		node.op = .decl_assign
		return ast.Block{
			stmts = [node as ast.Stmt]
		}
	}

	return node
}

fun (t Transformer) const_decl(node ast.ConstDecl) ast.Stmt {
	if node.lang != .bait {
		return ast.Void{}
	}

	return node
}

fun (mut t Transformer) for_loop(mut node ast.ForLoop) {
	t.stmts(node.stmts)
}

// FIXME for all this file: args must be marked mut (missing error)
fun (mut t Transformer) for_classic_loop(mut node ast.ForClassicLoop) {
	_ = t.stmt(node.init)
	_ = t.stmt(node.inc)
	t.stmts(node.stmts)
}

fun (mut t Transformer) for_in_loop(mut node ast.ForInLoop) ast.ForInLoop {
	// `val := container[i]`
	val_decl := ast.AssignStmt{
		op = .decl_assign
		right_type = node.val_type
		left = node.valvar
		right = ast.IndexExpr{
			left_type = node.expr_type
			left = node.expr
			index = node.idxvar
		}
	} as ast.Stmt
	node.stmts.insert(0, val_decl)

	t.stmts(node.stmts)

	return node
}

fun (mut t Transformer) fun_decl(mut node ast.FunDecl) ast.Stmt {
	if node.lang != .bait {
		return ast.Void{}
	}

	t.stmts(node.stmts)
	return node
}

fun (mut t Transformer) if_match(mut node ast.IfMatch) {
	for mut branch in node.branches {
		t.stmts(branch.stmts)
	}
}

fun (mut t Transformer) return_stmt(mut node ast.ReturnStmt) {
	_ = t.expr(node.expr)
}

fun (mut t Transformer) call_expr(mut node ast.CallExpr) {
	_ = t.expr(node.left)
	for mut arg in node.args {
		arg.expr = t.expr(arg.expr)
	}

	if node.or_block.kind == .block {
		// First line: Declare err variable
		//   `err := _t12.msg`
		err_decl := ast.AssignStmt{
			op = .decl_assign
			left = ast.Ident{ name = "err" }
			right = ast.SelectorExpr{
				expr = ast.Ident{ name = node.or_block.uid }
				field_name = "msg"
			}
		} as ast.Stmt
		node.or_block.stmts.insert(0, err_decl)

		// Last line: Set Result data
		//   `_t12.data = <expr>`
		if node.or_block.stmts.last() is ast.ExprStmt {
			idx := node.or_block.stmts.length - 1
			node.or_block.stmts[idx] = ast.AssignStmt{
				op = .assign
				left = ast.SelectorExpr{
					expr = ast.Ident{ name = node.or_block.uid }
					field_name = "data"
				}
				right = (node.or_block.stmts[idx] as ast.ExprStmt).expr
			}
		}

		t.stmts(node.or_block.stmts)
	}
}

fun (t Transformer) index_expr(node ast.IndexExpr) ast.Expr {
	if node.index is ast.RangeExpr {
		idx := t.range_expr_on_left(mut node.index as ast.RangeExpr, node.left)

		// `arr[from..to]` -> `arr.slice(from, to)`
		return ast.CallExpr{
			is_method = true
			left = node.left
			left_type = ast.ARRAY_TYPE
			return_type = ast.ARRAY_TYPE
			name = "slice"
			args = [
				ast.CallArg{
					expr = idx.low
					typ = ast.I32_TYPE
				},
				ast.CallArg{
					expr = idx.high
					typ = ast.I32_TYPE
				},
			]
		}
	}

	return node
}

fun (mut t Transformer) infix_expr(mut node ast.InfixExpr) {
	node.left = t.expr(mut node.left)
	node.right = t.expr(mut node.right)
}

fun (t Transformer) range_expr_on_left(mut node ast.RangeExpr, left ast.Expr) ast.RangeExpr {
	// `[..x]` -> `[0..x]`
	if node.low is ast.Void {
		node.low = ast.IntegerLiteral{ val = "0" }
	}

	// `[x..]` -> `[x..arr.length]`
	if node.high is ast.Void {
		node.high = ast.SelectorExpr{
			expr = left
			field_name = "length"
		}
	}

	return node
}
