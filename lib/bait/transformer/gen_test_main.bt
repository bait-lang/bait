// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package transformer

import bait.ast

fun (t Transformer) gen_test_main() &ast.File {
	mut test_main := ast.FunDecl{
		name = "main"
	}

	if t.gen_ctx.has_test_begin {
		test_main.stmts.push(ast.ExprStmt{
			expr = ast.CallExpr{
				name = "testsuite_begin"
			}
		})
	}

	// `test_runner.file = "path/to/file"`
	esc_path := t.path.replace("\\", "\\\\")
	test_main.stmts.push(ast.AssignStmt{
		op = .assign
		left = ast.SelectorExpr{
			expr = ast.Ident{
				name = "builtin__test_runner"
			}
			field_name = "file"
		}
		right = ast.StringLiteral{
			val = esc_path
		}
	})

	// `test_runner.fun_name = "main"`
	for name in t.gen_ctx.test_fun_names {
		test_main.stmts.push(ast.AssignStmt{
			op = .assign
			left = ast.SelectorExpr{
				expr = ast.Ident{
					name = "builtin__test_runner"
				}
				field_name = "fun_name"
			}
			right = ast.StringLiteral{
				val = name
			}
		})

		test_main.stmts.push(ast.ExprStmt{
			expr = ast.CallExpr{
				name = name
			}
		})
	}

	if t.gen_ctx.has_test_end {
		test_main.stmts.push(ast.ExprStmt{
			expr = ast.CallExpr{
				name = "testsuite_end"
			}
		})
	}

	// exit(test_runner.exit_code())
	test_main.stmts.push(ast.ExprStmt{
		expr = ast.CallExpr{
			name = "exit"
			args = [
				ast.CallArg{
					// TODO properly transform this (requires changes to method calls)
					expr = ast.HashExpr{
						val = "TestRunner_exit_code(builtin__test_runner)"
					}
				}
			]
		}
	})
	return ast.File{
		pkg_name = "main"
		stmts = [test_main as ast.Stmt]
	}
}
