// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package lexer

import bait.token

pub struct Lexer {
mut:
	text string
	start i32
	line_starts []i32
	pos i32
	insert_semi bool
	is_str_interpol bool
	str_quote u8
pub mut:
	val string
}

pub fun (mut l Lexer) init(text string) {
	l.text = text
	l.line_starts = [0]
}

pub fun (l Lexer) get_pos() token.Pos {
	return token.Pos{
		line = l.line_starts.length
		col = l.pos - l.line_starts.last()
	}
}

pub fun (mut l Lexer) next() token.TokenKind {
	l.skip_whitespace()

	if l.pos >= l.text.length {
		return .eof
	}

	c := l.text[l.pos]
	l.pos += 1
	l.insert_semi = false

	if is_name_start_char(c) {
		return l.name_or_key()
	}
	if is_digit(c) {
		return l.number()
	}

	match c {
		`\n` {
			l.line_starts.push(l.pos)
			return .semicolon
		}
		`'`, `"` {
			return l.string_val(c)
		}
		`\`` {
			return l.char_val()
		}
		`.` {
			return .dot
		}
		`,` {
			return .comma
		}
		`+` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .plus_assign
			}
			return .plus
		}
		`-` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .minus_assign
			}
			return .minus
		}
		`*` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .mul_assign
			}
			return .mul
		}
		`/` {
			c2 := l.text[l.pos]

			if c2 == `=` {
				l.pos += 1
				return .div_assign
			}

			if c2 == `/` {
				l.skip_line()
				return l.next()
			}

			return .div
		}
		`%` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .mod_assign
			}
			return .mod
		}
		`=` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .eq
			}
			return .assign
		}
		`:` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .decl_assign
			}
			return .colon
		}
		`;` {
			return .semicolon
		}
		`!` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .ne
			}
			return l.unknown(c)
		}
		`<` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .le
			}
			return .lt
		}
		`>` {
			if l.text[l.pos] == `=` {
				l.pos += 1
				return .ge
			}
			return .gt
		}
		`(` {
			return .lpar
		}
		`)` {
			return .rpar
		}
		`[` {
			return .lsqr
		}
		`]` {
			l.insert_semi = true
			return .rsqr
		}
		`{` {
			return .lcur
		}
		`}` {
			if l.is_str_interpol {
				l.is_str_interpol = false
				return l.string_val(l.str_quote)
			}
			return .rcur
		}
		`&` {
			return .amp
		}
		`|` {
			return .pipe
		}
		`^` {
			return .caret
		}
		`$` {
			return .dollar
		}
		`#` {
			l.pos += 1
			l.name_val()
			return .hash
		}
		`@` {
			l.pos += 1
			l.name_val()
			return .attr
		}
		else {
			return l.unknown(c)
		}
	}
}

fun (mut l Lexer) name_val() {
	l.start = l.pos - 1
	for l.pos < l.text.length and is_name_char(l.text[l.pos]) {
		l.pos += 1
	}
	l.val = l.text.substr(l.start, l.pos)
}

fun (mut l Lexer) name_or_key() token.TokenKind {
	l.name_val()
	tok := token.kind_from_string(l.val)
	if tok == .key_return {
		l.insert_semi = true
	}
	return tok
}

fun (mut l Lexer) number() token.TokenKind {
	l.start = l.pos - 1
	for l.pos < l.text.length and is_digit(l.text[l.pos]) {
		l.pos += 1
	}
	l.val = l.text.substr(l.start, l.pos)
	return .number
}

fun (mut l Lexer) string_val(quote u8) token.TokenKind {
	is_foreign := l.text[l.pos - 2] == `.` // E.g. #JS.'eval()'
	l.start = l.pos
	for l.pos < l.text.length {
		c := l.text[l.pos]
		l.pos += 1
		if c == quote {
			break
		}
		if c == `\n` {
			l.line_starts.push(l.pos)
		} else if c == `\\` {
			l.pos += 1
		} else if not is_foreign and c == `$` and l.text[l.pos] == `{` {
			l.is_str_interpol = true
			l.str_quote = quote

			l.pos -= 1
			l.val = l.text.substr(l.start, l.pos)
			return .string
		}

	}
	l.val = l.text.substr(l.start, l.pos - 1)
	return .string
}

fun (mut l Lexer) char_val() token.TokenKind {
	l.start = l.pos
	for l.pos < l.text.length {
		c := l.text[l.pos]
		l.pos += 1
		if c == `\`` {
			break
		}
		if c == `\\` {
			l.pos += 1
		}
	}
	l.val = l.text.substr(l.start, l.pos - 1)
	return .char
}

fun (mut l Lexer) unknown(c u8) token.TokenKind {
	l.val = c.ascii()
	return .unknown
}

fun (mut l Lexer) skip_whitespace() {
	for l.pos < l.text.length {
		c := l.text[l.pos]
		if c == `\n` {
			if l.insert_semi {
				return
			}
			l.pos += 1
			l.line_starts.push(l.pos)
		} else if c == ` ` or c == `\t` or c == `\r` {
			l.pos += 1
		} else {
			break
		}
	}
}

fun (mut l Lexer) skip_line() {
	for l.pos < l.text.length and l.text[l.pos] != `\n` {
		l.pos += 1
	}
	l.pos += 1
	l.line_starts.push(l.pos)
}

fun is_name_start_char(c u8) bool {
	return c >= `a` and c <= `z` or c >= `A` and c <= `Z` or c == `_`
}

fun is_name_char(c u8) bool {
	return is_name_start_char(c) or is_digit(c)
}

fun is_digit(c u8) bool {
	return c >= `0` and c <= `9`
}
