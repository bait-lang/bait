// SPDX-FileCopyrightText: 2024-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package lexer

import bait.token

fun (mut l Lexer) number() token.Token {
	l.start = l.pos - 1

	mut is_dec := false
	c := l.text[l.pos]

	if l.text[l.start] == `0` {
		if c == `b` {
			l.advance_bin_number()
		} else if c == `o` {
			l.advance_oct_number()
		} else if c == `x` {
			l.advance_hex_number()
		} else if c.is_digit() {
			l.val = 'leading zeros in decimal numbers are not allowed'
			return .error
		} else {
			is_dec = true
		}
	} else {
		l.advance_dec_number()
	}

	// Fraction part of a float
	if l.text[l.pos] == `.` {
		l.pos += 1
		l.advance_dec_number()
		l.val = l.text.substr(l.start, l.pos)
		return .float
	}

	l.val = l.text.substr(l.start, l.pos)
	return .integer
}


fun (mut l Lexer) advance_dec_number() {
	for l.pos < l.text.length and l.text[l.pos].is_digit() {
		l.pos += 1
	}
}

fun (mut l Lexer) advance_bin_number() {
	l.pos += 1
	for l.pos < l.text.length and l.text[l.pos].is_bin_digit() {
		l.pos += 1
	}
}

fun (mut l Lexer) advance_oct_number() {
	l.pos += 1
	for l.pos < l.text.length and l.text[l.pos].is_oct_digit() {
		l.pos += 1
	}
}

fun (mut l Lexer) advance_hex_number() {
	l.pos += 1
	for l.pos < l.text.length and l.text[l.pos].is_hex_digit() {
		l.pos += 1
	}
}
