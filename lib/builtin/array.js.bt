// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package builtin

struct Array {
mut:
	data #JS.Array
pub mut:
	length i32
}

fun (a Array) get(i i32) any {
	return a.data.at(i as #JS.Number)
}

fun (a Array) set(i i32, val any) {
	#JS.'a.data[i] = val'
}

pub fun (a Array) last() any {
	return a.get(a.length - 1)
}

pub fun (mut a Array) push(el any) {
	a.data.push(el)
	a.length += 1
}

pub fun (mut a Array) push_many(b Array) {
	a.data = a.data.concat(b.data)
	a.length += b.length
}

pub fun (a Array) index[T](val T) i32 {
	for i := 0; i < a.length; i += 1 {
		if a.get(i) as T == val {
			return i
		}
	}
	return -1
}

pub fun (a Array) index_last[T](val T) i32 {
	for i := a.length - 1; i >= 0; i -= 1 {
		if a.get(i) as T == val {
			return i
		}
	}
	return -1
}

pub fun (mut a Array) delete(idx i32) {
	#JS.'a.data.splice(idx, 1)'
	a.length -= 1
}

pub fun (a Array) slice(start i32, end i32) Array {
	return Array{
		data = a.data.slice(start as #JS.Number, end as #JS.Number)
		length = end - start
	}
}

pub fun (a Array) concat(b Array) Array {
	return Array{
		data = a.data.concat(b.data)
		length = a.length + b.length
	}
}

pub fun (a Array) copy() Array {
	return Array{
		data = #JS.'[...a.data]' as #JS.Array
		length = a.length
	}
}

pub fun (a Array) reverse() Array {
	// Note: Node 20 introduced Array.toReversed() for this
	b := a.copy()
	b.reverse_in_place()
	return b
}

pub fun (a Array) reverse_in_place() {
	a.data.reverse()
}

pub fun (a Array) filter(fn fun (any) bool) Array {
	return from_js_arr(a.data.filter(fn as #JS.Any))
}

pub fun from_js_arr(a #JS.Array) Array {
	return Array{
		data = a
		length = a.length as i32
	}
}
