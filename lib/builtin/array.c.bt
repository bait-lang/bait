// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package builtin

struct array{
pub mut:
	data &void
	length i32
	cap i32
	elem_size i32
}

fun new_array(len i32, cap i32, elem_size i32) array {
	mut real_cap := cap
	if cap < len {
		real_cap = len
	}
	return array{
		data = #C.calloc(1, real_cap * elem_size) as &void
		length = len
		cap = real_cap
		elem_size = elem_size
	}
}

fun new_array_from_c(len i32, cap i32, elem_size i32, carr &void) array {
	mut a := new_array(len, cap, elem_size)
	#C.memcpy(a.data, carr, len * elem_size)
	return a
}

fun (a &array) ensure_cap(min i32) {
	if min <= a.cap {
		return
	}

	mut cap := a.cap
	if cap == 0 {
		cap = 1
	}
	for min > cap {
		cap *= 2
		break
	}

	new_size := cap * a.elem_size
	new_data := #C.calloc(1, new_size) as &void
	#C.memcpy(new_data, a.data, a.length * a.elem_size)
	a.data = new_data
	a.cap = cap
}

pub fun (a &array) set(i i32, val &void) {
	#C.memcpy(#C.'a->data + i * a->elem_size' as &void, val, a.elem_size)
}

pub fun (a array) get(i i32) &void {
	return #C.'a.data + i * a.elem_size' as &void
}

pub fun (a &array) push(val &void) {
	a.ensure_cap(a.length + 1)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, val, a.elem_size)
	a.length += 1
}

pub fun (a &array) push_many(vals &array) {
	// TODO fix sym of &a not being found as vals.data is expected as placeholder
	// a.push_many_with_len(vals.data, vals.length)
	a.ensure_cap(a.length + vals.length)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, vals.data, a.elem_size * vals.length)
	a.length += vals.length
}

pub fun (a &array) push_many_with_len(data &void, len i32) {
	a.ensure_cap(a.length + len)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, data, a.elem_size * len)
	a.length += len
}
