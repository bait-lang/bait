// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package builtin

struct Array{
	pub mut data &void
	pub mut length i32
	pub mut cap i32
	pub mut elem_size i32
}

fun new_array(len i32, cap i32, elem_size i32) Array {
	mut real_cap := cap
	if cap < len {
		real_cap = len
	}
	return Array{
		data = #C.calloc(1, real_cap * elem_size) as &void
		length = len
		cap = real_cap
		elem_size = elem_size
	}
}

fun new_array_from_c(len i32, cap i32, elem_size i32, carr &void) Array {
	mut a := new_array(len, cap, elem_size)
	#C.memcpy(a.data, carr, len * elem_size)
	return a
}

fun (mut a Array) ensure_cap(min i32) {
	if min <= a.cap {
		return
	}

	mut cap := a.cap
	if cap == 0 {
		cap = 1
	}
	for min > cap {
		cap *= 2
		break
	}

	new_size := cap * a.elem_size
	new_data := #C.calloc(1, new_size) as &void
	#C.memcpy(new_data, a.data, a.length * a.elem_size)
	a.data = new_data
	a.cap = cap
}

pub fun (a &Array) set(i i32, val &void) {
	#C.memcpy(#C.'a->data + i * a->elem_size' as &void, val, a.elem_size)
}

pub fun (a Array) get(i i32) &void {
	return #C.'a.data + i * a.elem_size' as &void
}

pub fun (a Array) last() &void {
	return a.get(a.length - 1)
}

pub fun (mut a Array) push(val &void) {
	a.ensure_cap(a.length + 1)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, val, a.elem_size)
	a.length += 1
}

pub fun (mut a Array) push_many(vals &Array) {
	// TODO fix sym of &a not being found as vals.data is expected as placeholder
	// a.push_many_with_len(vals.data, vals.length)
	a.ensure_cap(a.length + vals.length)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, vals.data, a.elem_size * vals.length)
	a.length += vals.length
}

pub fun (mut a Array) push_many_with_len(data &void, len i32) {
	a.ensure_cap(a.length + len)
	#C.memmove(#C.'a->data + a->elem_size * (a->length)' as &void, data, a.elem_size * len)
	a.length += len
}

pub fun (a Array) index[T](val T) i32 {
	for i := 0; i < a.length; i += 1 {
		if *(a.get(i) as &T) == val {
			return i
		}
	}
	return -1
}

pub fun (a Array) index_last[T](val T) i32 {
	for i := a.length - 1; i >= 0; i -= 1 {
		if *(a.get(i) as &T) == val {
			return i
		}
	}
	return -1
}

pub fun (a Array) slice(start i32, end i32) Array {
	return Array{
		data = #C.'a.data + start * a.elem_size' as &void
		length = end - start
		cap = a.cap - start
		elem_size = a.elem_size
	}
}
