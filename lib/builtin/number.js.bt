// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package builtin

pub fun i8(n #JS.Any) i8 {
	#JS.'const v = n & 0xFF'
	return #JS.'v > MAX_I8 ? -v : v' as i8
}

pub fun i16(n #JS.Any) i16 {
	#JS.'const v = n & 0xFFFF'
	return #JS.'v > MAX_I16 ? -v : v' as i16
}

pub fun i32(n #JS.Any) i32 {
	#JS.'const v = n & 0xFFFFFFFF'
	return #JS.'v > MAX_I32 ? -v : v' as i32
}

pub fun i64(n #JS.Any) i64 {
	return #JS.'BigInt.asIntN(64, n)' as i64
}

pub fun u8(v #JS.Any) u8 {
	// Note: Bait does not support typeof for JS types
	// TODO implement this?
	if #JS.'typeof(v) == "string"' as bool {
		return #JS.'v.charCodeAt(0)' as u8
	}

	// TODO this could probably be changed to Bait `v is string` and string indexing
	if #JS.'v instanceof string' as bool {
		return #JS.'v.str.charCodeAt(0)' as u8
	}

	return #JS.'v & 0xFF' as u8
}

pub fun u16(n #JS.Any) u16 {
	return #JS.'n & 0xFFFF' as u16
}

pub fun u32(n #JS.Any) u32 {
	return #JS.'BigInt.asUintN(32, n)' as u32
}

pub fun u64(n #JS.Any) u64 {
	return #JS.'BigInt.asUintN(64, n)' as u64
}

pub fun (n i8) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n i16) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n i32) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n i64) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n u8) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n u16) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n u32) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n u64) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n f32) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}

pub fun (n f64) str() string {
	return from_js_string(#JS.'n.toString()' as #JS.String)
}
