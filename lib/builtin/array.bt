// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code Form is subject to the terms of the Mozilla Public License 2.0.
package builtin

struct array {
	data any // JS array
	length i32
}

pub fun (a array) get(i i32) any {
	return #JS.'a.data[i]'
}

pub fun (a array) set(i i32, val any) {
	#JS.'a.data[i] = val'
}

pub fun (a array) push(el any) {
	#JS.'a.data.push(el)'
	a.length += 1
}

// TODO remove requirement for functions like index, last_index, contains, ... to be duplicated for types that are objects in JS

pub fun (a array) index(el any) i32 {
	return #JS.'a.data.indexOf(el)'
}

pub fun (a []u8) index(c u8) i32 {
	for i, el in a {
		if el == c {
			return i
		}
	}
	return -1
}

pub fun (a []string) index(s string) i32 {
	for i, el in a {
		if el == s {
			return i
		}
	}
	return -1
}

pub fun (a array) last_index(el any) i32 {
	return #JS.'a.data.lastIndexOf(el)'
}

pub fun (a []u8) last_index(c u8) i32 {
	for i := a.length - 1; i >= 0; i -= 1 {
		if a[i] == c {
			return i
		}
	}
	return -1
}

pub fun (a []string) last_index(s string) i32 {
	for i := a.length - 1; i >= 0; i -= 1 {
		if a[i] == s {
			return i
		}
	}
	return -1
}

pub fun (a array) contains(el any) bool {
	return a.index(el) >= 0
}

pub fun (a []u8) contains(c u8) bool {
	return a.index(c) >= 0
}

pub fun (a []string) contains(s string) bool {
	return a.index(s) >= 0
}

pub fun (a array) slice(start i32, end i32) array {
	return array{
		data: #JS.'a.data.slice(start, end)'
		length: end - start
	}
}

pub fun (a array) concat(b array) array {
	return array{
		data: #JS.'a.data.concat(b.data)'
		length: a.length + b.length
	}
}

pub fun (a array) copy() array {
	return array{
		data: #JS.'[...a.data]'
		length: a.length
	}
}

pub fun (a array) reverse() array {
	// Note: Node 20 introduced Array.toReversed() for this
	b := a.copy()
	b.reverse_in_place()
	return b
}

pub fun (a array) reverse_in_place() {
	a.data = #JS.'a.data.reverse()'
}

pub fun (a array) filter(fn fun (any) bool) array {
	return from_js_arr(#JS.'a.data.filter(fn)')
}

fun from_js_arr(a any) array {
	return array{
		data: a
		length: a.length
	}
}
