// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package builtin

struct string {
pub mut:
	str #JS.String
	length i32
}

fun (s string) get(i i32) u8 {
	return u8(s.str.charCodeAt(i as #JS.Number) as #JS.Any)
}

pub fun (s string) replace(val string, with string) string {
	return from_js_string(s.str.replaceAll(val.str, with.str))
}

pub fun (s string) substr(start i32, end i32) string {
	return from_js_string(s.str.slice(start as #JS.Number, end as #JS.Number))
}

pub fun (s string) index_after(search string, pos i32) i32 {
	return s.str.indexOf(search.str, pos as #JS.Number) as i32
}

pub fun (s string) index_last(search string) i32 {
	return s.str.lastIndexOf(search.str) as i32
}

pub fun (s string) repeat(count i32) string {
	return from_js_string(s.str.repeat(count as #JS.Number))
}

pub fun (s string) trim_space() string {
	return from_js_string(s.str.trim())
}

pub fun (s string) starts_with(prefix string) bool {
	return s.str.startsWith(prefix.str) as bool
}

pub fun (s string) ends_with(suffix string) bool {
	return s.str.endsWith(suffix.str) as bool
}

pub fun (s string) contains(substr string) bool {
	return s.str.includes(substr.str) as bool
}

pub fun (s string) is_capital() bool {
	if s.length == 0 or not s[0].is_upper() {
		return false
	}

	for i := 1; i < s.length; i += 1 {
		if s[i].is_upper() {
			return false
		}
	}

	return true
}

pub fun (s string) is_upper() bool {
	return s.str == s.str.toUpperCase() and s.str != s.str.toLowerCase()
}

pub fun (s string) split(delim string) []string {
	mut res := []string
	mut i := 0

	if delim.length == 0 {
		for c in s {
			res.push(c.ascii())
		}
		return res
	}

	mut start := 0
	for i < s.length {
		is_delim := i + delim.length <= s.length and s.substr(i, i + delim.length) == delim
		if is_delim {
			res.push(s.substr(start, i))
			start = i + delim.length
			i = start
		} else {
			i += 1
		}
	}
	res.push(s.substr(start, s.length))
	return res
}

pub fun (s string) split_lines() []string {
	res := from_js_string_arr(s.str.split(#JS.'"\n"' as #JS.String))
	if res[res.length - 1].length == 0 {
		return res.slice(0, res.length - 1)
	}
	return res
}

pub fun (s string) toI32() i32 {
	return #JS.'parseInt(s.str)' as i32
}

pub fun (s string) toF64() f64 {
	return #JS.'parseFloat(s.str)' as f64
}

fun (s string) str() string {
	return s
}

@overload: '+'
fun (a string) add (b string) string {
	return from_js_string(a.str + b.str)
}

@overload: '=='
fun (a string) eq (b string) bool {
	if a.length != b.length {
		return false
	}
	return #JS.'a.str === b.str' as bool
}

pub fun (arr []string) join(sep string) string {
	js_arr := arr.to_js_arr()
	return from_js_string(js_arr.join(sep.str))
}

pub fun from_js_string(js_s #JS.String) string {
	return string{
		str = js_s
		length = js_s.length as i32
	}
}

pub fun from_js_string_arr(js_arr #JS.Array) []string {
	mut a := []string
	for i := 0; i < js_arr.length as i32; i += 1 {
		a.push(from_js_string(#JS.'js_arr[i]' as #JS.String))
	}
	return a
}

pub fun (arr []string) to_js_arr() #JS.Array {
	js_arr := #JS.'[]' as #JS.Array
	for s in arr {
		js_arr.push(s.str as #JS.Any)
	}
	return js_arr
}
