// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code is subject to the terms of the Mozilla Public License 2.0.
package builtin

struct string {
pub:
	str #JS.String
	length i32
}

#JS.'string.prototype = {
	toString: function() {
		return this.str
	}
}'

fun (s string) get(i i32) u8 {
	return #JS.'new u8(s.str.charCodeAt(i))' as u8
}

pub fun (s string) get_str(i i32) string {
	return from_js_string(s.str.charAt(i as #JS.Number))
}

pub fun (s string) get_code() i32 {
	return s.str.charCodeAt(0 as #JS.Number) as i32
}

pub fun (s string) replace(val string, rep string) string {
	return from_js_string(s.str.replaceAll(val.str, rep.str))
}

pub fun (s string) substr(start i32, end i32) string {
	return from_js_string(s.str.slice(start as #JS.Number, end as #JS.Number))
}

pub fun (s string) index(search string) i32 {
	return s.str.indexOf(search.str) as i32
}

pub fun (s string) last_index(search string) i32 {
	return s.str.lastIndexOf(search.str) as i32
}

pub fun (s string) all_before(search string) string {
	idx := s.index(search)
	if idx == -1 {
		return s
	}
	return s.substr(0, idx)
}

pub fun (s string) all_before_last(search string) string {
	idx := s.last_index(search)
	if idx == -1 {
		return s
	}
	return s.substr(0, idx)
}

pub fun (s string) all_after(search string) string {
	idx := s.index(search)
	if idx == -1 {
		return s
	}
	return s.substr(idx + 1, s.length)
}

pub fun (s string) all_after_last(search string) string {
	idx := s.last_index(search)
	if idx == -1 {
		return s
	}
	return s.substr(idx + 1, s.length)
}

pub fun (s string) repeat(count i32) string {
	return from_js_string(s.str.repeat(count as #JS.Number))
}

pub fun (s string) trim_space() string {
	return from_js_string(s.str.trim())
}

pub fun (s string) starts_with(prefix string) bool {
	return s.str.startsWith(prefix.str) as bool
}

pub fun (s string) ends_with(suffix string) bool {
	return s.str.endsWith(suffix.str) as bool
}

pub fun (s string) contains(substr string) bool {
	return s.str.includes(substr.str) as bool
}

pub fun (s string) is_upper() bool {
	return s.str == s.str.toUpperCase() and s.str != s.str.toLowerCase()
}

pub fun (s string) split_lines() []string {
	res := from_js_string_arr(s.str.split(#JS.'"\n"' as #JS.String))
	if res[res.length - 1].length == 0 {
		return res.slice(0, res.length - 1)
	}
	return res
}

pub fun (s string) toI32() i32 {
	return #JS.'parseInt(s.str)' as i32
}

@overload: '+'
fun (a string) add (b string) string {
	return from_js_string(a.str + b.str)
}

pub fun (arr []string) join(sep string) string {
	js_arr := arr.to_js_arr()
	return from_js_string(js_arr.join(sep.str))
}

pub fun from_js_string(js_s #JS.String) string {
	return string{
		str = js_s
		length = js_s.length as i32
	}
}

pub fun from_js_string_arr(js_arr #JS.Array) []string {
	mut a := []string
	for i := 0; i < js_arr.length as i32; i += 1 {
		a.push(from_js_string(#JS.'js_arr[i]' as #JS.String))
	}
	return a
}

pub fun (arr []string) to_js_arr() #JS.Array {
	js_arr := #JS.'[]' as #JS.Array
	for s in arr {
		js_arr.push(s.str as #JS.Any)
	}
	return js_arr
}
