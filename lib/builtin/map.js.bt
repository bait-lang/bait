// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package builtin

struct Map{
	mut data #JS.Map
	pub mut length i32
}

fun (m Map) get(key string) any {
	return m.data.get(key.str)
}

fun (mut m Map) set(key string, val any) {
	if not m.contains(key) {
		m.length += 1
	}
	m.data.set(key.str, val)
}

fun (mut m Map) get_set(key string, val any) any {
	if not m.contains(key) {
		m.set(key, val)
	}
	return m.get(key)
}

pub fun (m Map) contains(key string) bool {
	return m.data.has(key.str) as bool
}

pub fun (m Map) keys() []string {
	return from_js_string_arr(#JS.'Array.from(m.data.keys())' as #JS.Array)
}

pub fun (m Map) values() []any {
	return from_js_arr(#JS.'Array.from(m.data.values())' as #JS.Array)
}

pub fun (mut m Map) clear() {
	m.length = 0
	m.data = #JS.'new Map([])' as #JS.Map
}
