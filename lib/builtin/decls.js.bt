// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package builtin

import 'console' as #JS.console
import 'process' as #JS.process

type #JS.Any := #JS.Boolean | #JS.Number | #JS.String | #JS.Array | #JS.Map

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean
pub interface #JS.Boolean {}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
pub interface #JS.Number {}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
pub interface #JS.String {
	length #JS.Number
	charAt(pos #JS.Number) #JS.String
	charCodeAt(pos #JS.Number) #JS.Number
	indexOf(search #JS.String, position #JS.Number) #JS.Number
	lastIndexOf(search #JS.String) #JS.Number
	startsWith(search #JS.String) #JS.Boolean
	endsWith(search #JS.String) #JS.Boolean
	includes(search #JS.String) #JS.Boolean
	repeat(count #JS.Number) #JS.String
	replaceAll(pattern #JS.String, rep #JS.String) #JS.String
	slice(start #JS.Number, end #JS.Number) #JS.String
	split(sep #JS.String) #JS.Array
	trim() #JS.String
	toLowerCase() #JS.String
	toUpperCase() #JS.String
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
pub interface #JS.Array{
	length #JS.Number
	at(index #JS.Number) #JS.Any
	push(element #JS.Any)
	indexOf(element #JS.Any) #JS.Number
	lastIndexOf(element #JS.Any) #JS.Number
	concat(array2 #JS.Array) #JS.Array
	slice(start #JS.Number, end #JS.Number) #JS.Array
	join(separator #JS.String) #JS.String
	reverse()
	filter(callback #JS.Any) #JS.Array
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map
pub interface #JS.Map{
	size #JS.Number
	get(key #JS.String) #JS.Any
	set(key #JS.String, value #JS.Any)
	has(key #JS.String) #JS.Boolean
}

// https://developer.mozilla.org/en-US/docs/Web/API/console
fun #JS.console.log(message #JS.Any)
fun #JS.console.error(message #JS.Any)

fun #JS.process.exit(code #JS.Number)
