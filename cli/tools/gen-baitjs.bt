// SPDX-FileCopyrightText: Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MIT
package main

import os
import bait.util.escape

const GIT_USER := 'tiabeast-bot'
const GIT_MAIL := '131296262+tiabeast-bot@users.noreply.github.com'

const MAIN_REPO_COMMIT_URL := 'https://github.com/bait-lang/bait/commit'

// Exit if not in CI because gen-baitjs is only meant for use in GH Actions
fun ci_or_exit() {
	if os.getenv('CI') != 'true' {
		eprintln('gen-baitjs is only meant to be run in CI.')
		exit(1)
	}
}

fun main() {
	ci_or_exit()

	// Count the number of errors by adding the os.system return values
	mut errors := 0

	println('Configuring git user...')
	errors += git_command('config --global user.name "${GIT_USER}"')
	errors += git_command('config --global user.email "${GIT_MAIL}"')

	baitjs_dir := os.join_path(os.home_dir(), ['.bait', 'baitjs'])
	os.rmdir_all(baitjs_dir)

	access_token := os.getenv('TIABEAST_BOT_TOKEN')
	errors += git_command('clone --depth 1 https://${GIT_USER}:${access_token}@github.com/bait-lang/baitjs.git ${baitjs_dir}')

	println('Building bait.js...')
	res := os.exec('node ${$BAITEXE} cli/bait.bt -o ${baitjs_dir}/bait.js')
	if res.code != 0 {
		eprintln('Failed to build bait.js.')
		exit(1)
	}

	// Sanity check for a reasonable file size
	lines := os.read_lines('bait.js')
	if lines.length < 4000 {
		eprintln('bait.js is too small. Something went wrong.')
		exit(1)
	}

	// Stage changes in baitjs repo
	errors += git_command('-C ${baitjs_dir} add .')

	// Exit if there is nothing to commit
	has_changes := git_command('-C ${baitjs_dir} diff-index --quiet HEAD')
	if has_changes == 0 {
		println('No changes to commit.')
		exit(0)
	}

	// Get information about the current bait commit
	println('Collecting bait commit details...')
	branch := os.exec('git rev-parse --abbrev-ref HEAD').stdout.trim_space()
	commit_hash := os.exec('git rev-parse HEAD').stdout.trim_space()
	short_hash := commit_hash.substr(0, 7)
	original_msg := os.exec('git log -1 --oneline --pretty=%s HEAD').stdout.trim_space()

	// Create commit in baitjs
	println('Creating commit...')
	os.chdir(baitjs_dir)
	commit_msg := '[bait:${branch}] ${short_hash} - ${original_msg}'
	errors += git_command('commit -m "${commit_msg}" -m "${MAIN_REPO_COMMIT_URL}/${commit_hash}"')

	// Safety rebase and push to baitjs
	println('Pushing to baitjs...')
	errors += git_command('pull --rebase')
	errors += git_command('push')

	// Exit with the number of errors
	exit(errors)
}

fun git_command(cmd string) i32 {
	esc_cmd := escape.shell(cmd)
	return os.system('git ${esc_cmd}')
}
