// Copyright (c) 2023-present Lukas Neubert and contributors (see AUTHORS.md).
// This Source Code Form is subject to the terms of the Mozilla Public License 2.0.
package main

import os

struct CodeBlock {
	start_idx i32
	end_idx i32
	text string
}

fun main() {
	file := os.ARGS[2]
	blocks := collect_code_blocks(file)
	mut has_errors := false
	for block in blocks {
		res := check_block_runs(block)
		if not res {
			has_errors = true
		}
	}
	if has_errors {
		exit(1)
	}
}

fun collect_code_blocks(path string) []CodeBlock{
	lines := os.read_lines(path)
	mut blocks := []CodeBlock
	mut inside_block := false
	mut start := 0
	mut text := ''
	for i, line in lines {
		if line.starts_with('```bait') {
			inside_block = true
			start = i
			text = ''
		} else if inside_block and line.starts_with("```") {
			inside_block = false
			blocks.push(CodeBlock {
				start_idx: start
				end_idx: i
				text: text
			})
		} else if inside_block {
			text += line + '\n'
		}
	}
	return blocks
}

fun check_block_runs(block CodeBlock) bool {
	os.write_file('/tmp/tmp.bt', block.text)
	res := os.exec('node ${$BAITEXE} /tmp/tmp.bt')
	if res.code != 0 {
		println('Error in block ${block.start_idx + 1}:${block.end_idx + 1}')
		println(res.stderr)
		return false
	}
	return true
}
