// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

import os
import cli.options

const TEMPLATES := ['bin', 'lib']

const TMPL := os.dir($FILE) + '/templates'
const COMMON := os.dir($FILE) + '/common'

struct Init {
mut:
	name string
	tmpl_map map[string]string
}

fun main() {
	mut op := options.new_option_parser(os.user_args())
	template := op.string('template', `t`, 'bin')

	if not TEMPLATES.contains(template) {
		eprintln('invalid template ${template}')
		exit(1)
	}

	mut name := '.'
	if op.remaining().length > 0 {
		name = op.remaining()[0]
	}

	mut init := Init{
		name = name
	}

	init.check_preconditions() or {
		eprintln(err)
		exit(1)
	}

	init.create_git_repo()
	init.use_template(template)
}

fun (init Init) check_preconditions() !bool {
	if init.name == '.' {
		if os.ls('.').length > 0 {
			return error('cannot run init in non-empty directory')
		}
	} else if os.exists(init.name) {
		return error('"${init.name}" already exists')
	}

	// FIXME function should return !void
	return true
}

fun (init Init) create_git_repo() {
	// TODO check git is installed
	// TODO flag to skip
	if not os.exists_dir('${init.name}/.git') {
		res := os.exec('git init ${init.name}')
		if res.code != 0 {
			eprintln('Failed to create git repository')
			exit(1)
		}
	}
}

fun (mut init Init) use_template(template string) {
	init.tmpl_map = map{
		'name': init.name
		'test': 'test'
	}

	os.mkdir(init.name)

	init.copy_files(COMMON, init.name)
	init.copy_files(os.join_path(TMPL, [template]), init.name)
}

fun (init Init) copy_files(src string, dest string) {
	for file in os.ls(src) {
		path := '${src}/${file}'
		if os.is_dir(path) {
			os.mkdir('${dest}/${file}')
			init.copy_files(path, '${dest}/${file}')
			continue
		}

		content := render_template(os.read_file(path), init.tmpl_map)
		final_name := render_template(file, init.tmpl_map)
		os.write_file('${dest}/${final_name}', content)
	}
}

fun render_template(text string, data map[string]string) string {
	mut res := text
	for key, value in data {
		res = res.replace('\${${key}}', value)
	}
	return res
}
