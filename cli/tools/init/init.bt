// SPDX-FileCopyrightText: 2023-present Lukas Neubert <lukas.neubert@proton.me>
// SPDX-License-Identifier: MPL-2.0
package main

import os
import cli.options

const TMPL := os.dir($FILE) + '/templates'
const COMMON := os.dir($FILE) + '/common'

fun main() {
	mut op := options.new_option_parser(os.user_args())
	template := op.string('template', `t`, 'bin')
	// TODO check template exists

	mut name := '.'
	if op.remaining().length > 0 {
		name = op.remaining()[0]
	}

	create_git_repo(name)
	copy_template(template, name)
}

fun create_git_repo(dir string) {
	if not os.exists_dir('${dir}/.git') {
		res := os.exec('git init ${dir}')
		if res.code != 0 {
			eprintln('Failed to create git repository')
			exit(1)
		}
	}
}

fun copy_template(template string, dest string) {
	os.mkdir(dest)

	copy_files(COMMON, dest)
	copy_files(os.join_path(TMPL, [template]), dest)
}

fun copy_files(src string, dest string) {
	for file in os.ls(src) {
		path := '${src}/${file}'
		if os.is_dir(path) {
			os.mkdir('${dest}/${file}')
			copy_files(path, '${dest}/${file}')
			continue
		}

		content := render_template(os.read_file(path), map{
			'name': dest
		})
		os.write_file('${dest}/${file}', content)
	}
}

fun render_template(text string, data map[string]string) string {
	mut res := text
	for key, value in data {
		res = res.replace('\${${key}}', value)
	}
	return res
}
